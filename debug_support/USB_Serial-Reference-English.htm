<html lang="en">
<head>
<title>USB_Serial-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
USB Serial Driver Reference
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="Open Mode"></a>
<table width="100%"><td width="70%"><font size=6>Open Mode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Constant representing the mode when opening the port<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;

</font></pre></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_OPEN_MODE_CHECK_DTR">SCE_USBSER_OPEN_MODE_CHECK_DTR</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Mode that checks DTR&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_OPEN_MODE_IGNORE_DTR">SCE_USBSER_OPEN_MODE_IGNORE_DTR</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Mode that ignores DTR&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the mode when <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerOpen">sceUsbSerOpen</a>() is called to open the port.<br>It specifies whether to check or ignore the ON or OFF status of DTR (Data Terminal Ready). DTR indicates that the USB host has completed preparations for communication.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerOpen">sceUsbSerOpen</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="Read or Write Mode"></a>
<table width="100%"><td width="70%"><font size=6>Read or Write Mode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Constant representing the mode when reading or writing<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;

</font></pre></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_OP_MODE_BLOCKING">SCE_USBSER_OP_MODE_BLOCKING</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Blocking mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_OP_MODE_B_NB">SCE_USBSER_OP_MODE_B_NB</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Blocking/Non-Blocking mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_OP_MODE_NONBLOCKING">SCE_USBSER_OP_MODE_NONBLOCKING</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Non-Blocking mode&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the mode when <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRead">sceUsbSerRead</a>() or <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>() is called to read or write data.<br>For Blocking mode, the function will wait until the specified size is processed.<br>For Blocking/Non-Blocking mode, the function will wait only if it cannot perform processing immediately. Then, when processing can be performed, the function will continue but it will only handle data with a size that can be processed.<br>For Non-Blocking mode, the function will not wait but it will only handle data with a size that can be processed.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRead">sceUsbSerRead</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="Cancel Mode"></a>
<table width="100%"><td width="70%"><font size=6>Cancel Mode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Constant representing the mode when cancelling processing<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;

</font></pre></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_CANCEL_MODE_READ">SCE_USBSER_CANCEL_MODE_READ</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x01&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Mode for cancelling read processing&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_CANCEL_MODE_WRITE">SCE_USBSER_CANCEL_MODE_WRITE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x02&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Mode for cancelling write processing&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_CANCEL_MODE_FLUSH">SCE_USBSER_CANCEL_MODE_FLUSH</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x04&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Mode for cancelling flush processing&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the mode when <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerCancel">sceUsbSerCancel</a>() is called to cancel read, write, or flush processing in progress.<br>Constants can be ORed together to specify more than one mode at once.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerCancel">sceUsbSerCancel</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="Clear Mode"></a>
<table width="100%"><td width="70%"><font size=6>Clear Mode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Constant representing the mode when clearing an internal buffer<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;

</font></pre></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_CLEAR_MODE_READ">SCE_USBSER_CLEAR_MODE_READ</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x01&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Mode for clearing read internal buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_CLEAR_MODE_WRITE">SCE_USBSER_CLEAR_MODE_WRITE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x02&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Mode for clearing write internal buffer&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the mode when <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerClear">sceUsbSerClear</a>() is called to clear an internal buffer of the USB serial driver.<br>Constants can be ORed together to specify more than one mode at once.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerClear">sceUsbSerClear</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="DTR Status"></a>
<table width="100%"><td width="70%"><font size=6>DTR Status<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Constant representing DTR status<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;

</font></pre></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_DTR_OFF">SCE_USBSER_DTR_OFF</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;DTR is OFF&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_DTR_ON">SCE_USBSER_DTR_ON</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;DTR is ON&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the ON or OFF status of DTR (Data Terminal Ready), which indicates whether the USB host has completed preparations for communication.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerGetDTR">sceUsbSerGetDTR</a>()<br><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRegisterDTRCallback">sceUsbSerRegisterDTRCallback</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceUsbSerInitParam"></a>
<table width="100%"><td width="70%"><font size=6>SceUsbSerInitParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Initialization parameters<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
typedef struct SceUsbSerInitParam {
	SceSize <i>size</i>;
	SceUChar *<i>pReadBuf</i>;
	SceSize <i>sizeReadBuf</i>;
	SceUChar *<i>pWriteBuf</i>;
	SceSize <i>sizeWriteBuf</i>;
} <b>SceUsbSerInitParam</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size of structure&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pReadBuf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to read buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sizeReadBuf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size of read buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pWriteBuf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to write buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sizeWriteBuf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size of write buffer&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This structure represents initialization parameters that are specified when calling <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerInit">sceUsbSerInit</a>() to initialize the USB serial driver.<br>It is used to specify the internal buffers that are used when the USB serial driver reads and writes data. If no buffers are specified, 4KiB of memory will be allocated from kernel space for each internal buffer.<br>For <i>size</i>, be sure to specify the size of this structure.<br><br></div>

<!-- Note -->
<div style="margin-left:10px;"><b>Note</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The size of a buffer must be at least 512 bytes.<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerInit">sceUsbSerInit</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerInit"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerInit<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Initialize the USB serial driver<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerInit</b>(
	const <a href="../debug_support/USB_Serial-Reference-English.htm#SceUsbSerInitParam">SceUsbSerInitParam</a> *<i>pParam</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pParam</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to <a href="../debug_support/USB_Serial-Reference-English.htm#SceUsbSerInitParam">SceUsbSerInitParam</a> structure or NULL&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes, which are defined in usbser.h, or an error code defined in kerror.h or psperror.h is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_BUSY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244403&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has already been &nbsp;&nbsp;<br>&nbsp;&nbsp;initialized or another USB driver is &nbsp;&nbsp;<br>&nbsp;&nbsp;being used.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function initializes the USB serial driver. After the USB serial driver is initialized, it will be recognized by the USB host if a USB cable is connected.<br>If the USB serial driver has not been initialized, it will not be recognized by the USB host even if a USB cable is connected.<br><br>By specifying a pointer to a <a href="../debug_support/USB_Serial-Reference-English.htm#SceUsbSerInitParam">SceUsbSerInitParam</a> structure for the argument <i>pParam</i>, you can cause buffers that are specified as members of this structure to be used as the USB serial driver's internal buffers when it reads or writes data. Be sure to set the size of this structure in its <i>size</i> member. <br>When NULL is specified for the argument <i>pParam</i> or when NULL is specified for the structure member <i>pReadBuf</i> or <i>pWriteBuf</i>, 4KiB of memory will be allocated from kernel space for each internal buffer.<br><br>Since the USB serial driver cannot be used at the same time as another USB driver, an <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_ERROR_BUSY">SCE_USBSER_ERROR_BUSY</a> error will be returned if another USB driver was already started with the USB bus driver's sceUsbStart() function.<br>To use the USB serial driver, you must first stop all USB drivers and then initialize the USB serial driver.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define READ_BUF_SIZE (8 * 1024)
static char readBuf[READ_BUF_SIZE];

<a href="../debug_support/USB_Serial-Reference-English.htm#SceUsbSerInitParam">SceUsbSerInitParam</a> param;
int ret;

// Set the size of the structure in the size field
param.size = sizeof(<a href="../debug_support/USB_Serial-Reference-English.htm#SceUsbSerInitParam">SceUsbSerInitParam</a>);

// Use readBuf as the read buffer
param.pReadBuf = readBuf;
param.sizeReadBuf = READ_BUF_SIZE;

// Do not specify a write buffer and use a 4KiB buffer allocated by the driver
param.pWriteBuf = NULL;
param.sizeWriteBuf = 0;

// Initialize the USB serial driver
ret = sceUsbSerInit(&amp;param);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#SceUsbSerInitParam">SceUsbSerInitParam</a><br><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerEnd">sceUsbSerEnd</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerEnd"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerEnd<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Terminate USB serial driver<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerEnd</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes, which are defined in usbser.h, or an error code defined in kerror.h or psperror.h is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not &nbsp;&nbsp;<br>&nbsp;&nbsp;been initialized&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function terminates the USB serial driver.<br>After the USB serial driver is terminated, to the USB host it appears as if the USB cable is unplugged.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret;

// Terminate the USB serial driver
ret = sceUsbSerEnd();
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerInit">sceUsbSerInit</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerOpen"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerOpen<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Open USB serial port<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerOpen</b>(
	int <i>mode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Open mode&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">For argument <i>mode</i>, specify one of the following values.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OPEN_MODE_CHECK_DTR">SCE_USBSER_OPEN_MODE_CHECK_DTR</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Mode that checks DTR&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OPEN_MODE_IGNORE_DTR">SCE_USBSER_OPEN_MODE_IGNORE_DTR</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Mode that ignores DTR&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not &nbsp;&nbsp;<br>&nbsp;&nbsp;been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_BUSY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244403&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Port is already open&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function opens the USB serial port. More than one port cannot be open at the same time.<br><br>When the port is opened, the USB serial driver sets DCD (Data Carrier Detect) and DSR (Data Set Ready) to ON and reports that preparations for communication to the USB host are completed. When the port is opened and DTR (Data Terminal Ready) changes to ON, communications with the USB host can be performed. DTR indicates that preparations for communication have been completed on the USB host.<br><br>The internal buffers of the USB serial driver only save data during a communicable state (when the port is open and DTR is ON). Otherwise, the internal buffers are cleared.<br><br>Depending on the value specified for the argument <i>mode</i>, the behavior will change when DTR is OFF.<br><br></div>
</ol>
<div style="margin-left:35px;"><ul>
<li> In check DTR mode (<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OPEN_MODE_CHECK_DTR">SCE_USBSER_OPEN_MODE_CHECK_DTR</a>)<br>If DTR changes to OFF while <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRead">sceUsbSerRead</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>(), or <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerFlush">sceUsbSerFlush</a>() is executing or if DTR is off when these functions are called, an <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_ERROR_DTR_OFF">SCE_USBSER_ERROR_DTR_OFF</a> error will be returned.
<li> In ignore DTR mode (<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OPEN_MODE_IGNORE_DTR">SCE_USBSER_OPEN_MODE_IGNORE_DTR</a>)<br>An <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_ERROR_DTR_OFF">SCE_USBSER_ERROR_DTR_OFF</a> error will not be returned by <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRead">sceUsbSerRead</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>(), or <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerFlush">sceUsbSerFlush</a>().
</ul></div>
<div style="margin-left:50px;"><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret;

// Open the port in check DTR mode
ret = sceUsbSerOpen(<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OPEN_MODE_CHECK_DTR">SCE_USBSER_OPEN_MODE_CHECK_DTR</a>);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OPEN_MODE_CHECK_DTR">SCE_USBSER_OPEN_MODE_CHECK_DTR</a>, <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OPEN_MODE_IGNORE_DTR">SCE_USBSER_OPEN_MODE_IGNORE_DTR</a><br><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerClose">sceUsbSerClose</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRead">sceUsbSerRead</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerFlush">sceUsbSerFlush</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerClose"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerClose<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Close USB serial port<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerClose</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not &nbsp;&nbsp;<br>&nbsp;&nbsp;been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_ALREADY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244404&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Port has already been closed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function closes the USB serial port.<br><br>When the port is closed, the USB serial driver sets DCD and DSR to OFF to report that communication with the USB host cannot be performed and clears the internal buffers of the USB serial driver. While the port is closed, any data sent from the USB host will be discarded.<br><br>If the port is closed while <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRead">sceUsbSerRead</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>(), or <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerFlush">sceUsbSerFlush</a>() is executing, the executing function will return an <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_ERROR_CLOSED">SCE_USBSER_ERROR_CLOSED</a> error.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret;

ret = sceUsbSerClose();
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerOpen">sceUsbSerOpen</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRead">sceUsbSerRead</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerFlush">sceUsbSerFlush</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerRead"></a><a name="sceUsbSerReadCB"></a>
<a name="sceUsbSerRead / sceUsbSerReadCB"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerRead / sceUsbSerReadCB<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Read data<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerRead</b>(
	void *<i>buf</i>,
	SceSize <i>size</i>,
	int <i>mode</i>,
	int <i>timeout</i>
);
int <b>sceUsbSerReadCB</b>(
	void *<i>buf</i>,
	SceSize <i>size</i>,
	int <i>mode</i>,
	int <i>timeout</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>

<!-- sce_title -->
<a Name ="HeadingT_4_1">
<div style="margin-left:40px;"><h4><b>Blocking mode (SCE_USBSER_OP_MODE_BLOCKING)</b><br><b>Blocking/Non-Blocking mode (SCE_USBSER_OP_MODE_B_NB)</b><br><br></h4></div></a>

<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br></div>

<!-- sce_title -->
<a Name ="HeadingT_4_2">
<div style="margin-left:40px;"><h4><b>Non-Blocking mode (SCE_USBSER_OP_MODE_NONBLOCKING)</b><br><br></h4></div></a>

<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffer for storing data that was read&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Read data size&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Read mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>timeout</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Idle timeout interval (microseconds)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">For argument <i>mode</i> of sceUsbSerRead(), specify one of the following values.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_BLOCKING">SCE_USBSER_OP_MODE_BLOCKING</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Blocking mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_B_NB">SCE_USBSER_OP_MODE_B_NB</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Blocking/Non-Blocking mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_NONBLOCKING">SCE_USBSER_OP_MODE_NONBLOCKING</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Non-Blocking mode&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">For argument <i>mode</i> of sceUsbSerReadCB(), specify one of the following values.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_BLOCKING">SCE_USBSER_OP_MODE_BLOCKING</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Blocking mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_B_NB">SCE_USBSER_OP_MODE_B_NB</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Blocking/Non-Blocking mode&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, the size that was read (nonnegative value) is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not &nbsp;&nbsp;<br>&nbsp;&nbsp;been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_BUSY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244403&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Reading data&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_CLOSED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244405&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Port is closed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_DTR_OFF&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244406&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;DTR is OFF&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_TIMEOUT&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244407&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Timed out&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_CANCELED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244408&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Processing was cancelled&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The sceUsbSerRead() function reads data that was received from the USB host.<br>Multiple reads cannot be executed at the same time.<br><br>Data received from the USB host is temporarily stored in the USB serial driver's internal read buffer. When sceUsbSerRead() is executed, the data is copied from the internal buffer to the buffer specified by the argument <i>buf</i>.<br><br>The following three modes can be specified for argument <i>mode</i>.<br></div>
<div style="margin-left:35px;"><ul>
<li> Blocking mode (<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_BLOCKING">SCE_USBSER_OP_MODE_BLOCKING</a>)<br>The function will enter a wait state until data with the size specified by <i>size</i> is read.
<li> Blocking/Non-Blocking mode (<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_B_NB">SCE_USBSER_OP_MODE_B_NB</a>)<br>If there is no data in the internal buffer, the function will enter a wait state until data is received. When data is received and stored in the internal buffer, only the data in the internal buffer will be read and then the function will complete.
<li> Non-Blocking mode (<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_NONBLOCKING">SCE_USBSER_OP_MODE_NONBLOCKING</a>)<br>Only the data in the internal buffer will be read and then the function will complete. If there is no data in the internal buffer, the function will return 0 without reading data. <br>In this case, since the function does not enter a wait state, the <i>timeout</i> argument is ignored.
</ul></div>
<div style="margin-left:50px;"><br>For Blocking and Blocking/Non-Blocking modes, you can specify an idle timeout interval in microseconds<i> </i>for the <i>timeout</i> argument. This will cause a timeout to occur if no data is received from the USB host within the specified period. Note that <i>timeout</i> is not the amount of time from when sceUsbSerRead() was executed. If a negative number is specified for <i>timeout</i>, timeouts will be disabled.<br><br>If the port was opened in the check DTR mode, an <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_ERROR_DTR_OFF">SCE_USBSER_ERROR_DTR_OFF</a> error will be returned when DTR is OFF.<br>If the port was opened in the ignore DTR mode, no error will occur even when DTR is OFF. However, no data will be received from the USB host until DTR changes to ON. As long as DTR remains OFF, execution will be blocked in Blocking and Blocking/Non-Blocking modes, and in Non-Blocking mode, the function will return 0.<br><br>The sceUsbSerReadCB() function has additional functionality for checking whether a callback notification exists while processing is in a wait state. While the calling thread is in a wait state, if a notification is reported for its callback, the thread temporarily leaves the wait state and then reenters it again after the callback function has executed.<br>sceUsbSerReadCB() cannot be used in Non-Blocking mode since the thread never enters a wait state.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define BUF_SIZE  (8 * 1024)
char buf[BUF_SIZE];
int ret;

// Read data with no timeout in Blocking mode and check for a callback notification
ret = sceUsbSerReadCB(buf, BUF_SIZE, <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_BLOCKING">SCE_USBSER_OP_MODE_BLOCKING</a>, -1);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_BLOCKING">SCE_USBSER_OP_MODE_BLOCKING</a>, <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_B_NB">SCE_USBSER_OP_MODE_B_NB</a>, <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_NONBLOCKING">SCE_USBSER_OP_MODE_NONBLOCKING</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerWrite"></a><a name="sceUsbSerWriteCB"></a>
<a name="sceUsbSerWrite / sceUsbSerWriteCB"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerWrite / sceUsbSerWriteCB<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Write data<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerWrite</b>(
	void *<i>buf</i>,
	SceSize <i>size</i>,
	int <i>mode</i>,
	int <i>timeout</i>
);
int <b>sceUsbSerWriteCB</b>(
	void *<i>buf</i>,
	SceSize <i>size</i>,
	int <i>mode</i>,
	int <i>timeout</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>

<!-- sce_title -->
<a Name ="HeadingT_4_3">
<div style="margin-left:40px;"><h4><b>Blocking mode (SCE_USBSER_OP_MODE_BLOCKING)</b><br><b>Blocking/Non-Blocking mode (SCE_USBSER_OP_MODE_B_NB)</b><br><br></h4></div></a>

<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br></div>

<!-- sce_title -->
<a Name ="HeadingT_4_4">
<div style="margin-left:40px;"><h4><b>Non-Blocking mode (SCE_USBSER_OP_MODE_NONBLOCKING)</b><br><br></h4></div></a>

<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffer where data to be written is stored&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size to be written&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Write mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>timeout</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Idle timeout interval (microseconds)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">For argument <i>mode</i> of sceUsbSerWrite(), specify one of the following values.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_BLOCKING">SCE_USBSER_OP_MODE_BLOCKING</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Blocking mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_B_NB">SCE_USBSER_OP_MODE_B_NB</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Blocking/Non-Blocking mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_NONBLOCKING">SCE_USBSER_OP_MODE_NONBLOCKING</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Non-Blocking mode&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">For argument <i>mode</i> of sceUsbSerWriteCB(), specify one of the following values.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_BLOCKING">SCE_USBSER_OP_MODE_BLOCKING</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Blocking mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_B_NB">SCE_USBSER_OP_MODE_B_NB</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Blocking/Non-Blocking mode&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, the size that was written (nonnegative value) is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not &nbsp;&nbsp;<br>&nbsp;&nbsp;been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_BUSY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244403&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Writing data&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_CLOSED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244405&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Port is closed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_DTR_OFF&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244406&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;DTR is OFF&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_TIMEOUT&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244407&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Timed out&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_CANCELED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244408&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Processing was cancelled&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The sceUsbSerWrite() function writes data to be sent to the USB host.<br>Multiple writes cannot be executed at the same time.<br><br>When sceUsbSerWrite() is executed, data is read from the buffer specified in argument <i>buf</i> and temporarily stored in the USB serial driver's internal write buffer from where it is sequentially sent to the USB host. Note that even after sceUsbSerWrite() ends, there may still be data left in the internal buffer that was not sent to the USB host. To guarantee that all data is sent to the USB host, you must call <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerFlush">sceUsbSerFlush</a>() to explicitly flush the buffer.<br><br>The following three modes can be specified for argument <i>mode</i>.<br></div>
<div style="margin-left:35px;"><ul>
<li> Blocking mode (<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_BLOCKING">SCE_USBSER_OP_MODE_BLOCKING</a>)<br>The function will enter a wait state until data of the size specified in argument <i>size</i> is written.
<li> Blocking/Non-Blocking mode (<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_B_NB">SCE_USBSER_OP_MODE_B_NB</a>)<br>If there is no free space left in the internal buffer, the function will enter a wait state until data is sent and free space becomes available. After free space becomes available, only data with a size that is equal to the amount of free space in the internal buffer will be written, and then the function will complete.
<li> Non-Blocking mode (<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_NONBLOCKING">SCE_USBSER_OP_MODE_NONBLOCKING</a>)<br>If there is free space in the internal buffer, only data with a size that is equal to the amount of free space will be written and then the function will complete. If there is no free space in the internal buffer, the function will return 0 without writing any data. <br>Since the function will not enter a wait state, the <i>timeout</i> argument is ignored.
</ul></div>
<div style="margin-left:50px;"><br>For Blocking and Blocking/Non-Blocking modes, you can specify an idle timeout interval in microseconds for the <i>timeout</i> argument. This will cause a timeout to occur if no data could be sent to the USB host within the specified period. Note that <i>timeout</i> does not represent the amount of time from when sceUsbSerWrite() was executed. If a negative number is specified for <i>timeout</i>, timeouts will be disabled.<br><br>If the port was opened in the check DTR mode, an <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_ERROR_DTR_OFF">SCE_USBSER_ERROR_DTR_OFF</a> error will be returned when DTR is OFF.<br>If the port was opened in the ignore DTR mode, no error will occur even when DTR is off. Instead, all data will be written, and the value that was specified for argument <i>size</i> will be returned by the function. However, as long as DTR is OFF, data cannot be sent to the USB host. In this case, written data will not be sent and will be discarded instead.<br><br>The sceUsbSerWriteCB() function has additional functionality for checking whether a callback notification exists while processing is in a wait state. While the calling thread is in a wait state, if a notification is reported for its callback, the thread temporarily leaves the wait state and then reenters it again after the callback function has executed.<br>sceUsbSerWriteCB() cannot be used in Non-Blocking mode since the thread never enters a wait state.<br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define BUF_SIZE  (8 * 1024)
char buf[BUF_SIZE];
int ret;

memset(buf, 0xFF, BUF_SIZE);

// Write data in Non-Blocking mode
ret = sceUsbSerWrite(buf, BUF_SIZE, <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_NONBLOCKING">SCE_USBSER_OP_MODE_NONBLOCKING</a>, 0);
if (ret &lt; 0) {
	// Error handling
} else {
	printf(&quot;Wrote 0x%08x bytes\n&quot;, ret);
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_BLOCKING">SCE_USBSER_OP_MODE_BLOCKING</a>, <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_B_NB">SCE_USBSER_OP_MODE_B_NB</a>, <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_NONBLOCKING">SCE_USBSER_OP_MODE_NONBLOCKING</a><br><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerFlush">sceUsbSerFlush</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerFlush"></a><a name="sceUsbSerFlushCB"></a>
<a name="sceUsbSerFlush / sceUsbSerFlushCB"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerFlush / sceUsbSerFlushCB<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Flush data that was written<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerFlush</b>(
	int <i>timeout</i>
);
int <b>sceUsbSerFlushCB</b>(
	int <i>timeout</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>timeout</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Timeout interval (microseconds)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not &nbsp;&nbsp;<br>&nbsp;&nbsp;been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_BUSY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244403&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Flushing data&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_CLOSED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244405&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Port is closed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_DTR_OFF&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244406&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;DTR is OFF&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_TIMEOUT&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244407&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Timed out&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_CANCELED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244408&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Processing was cancelled&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The sceUsbSerFlush() function is used to ensure that data previously written with <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>() is sent to the USB host.<br>More than one flush operation cannot be executed at the same time.<br><br>When sceUsbSerFlush() is executed, the function enters a wait state until all data in the USB serial driver's internal write buffer is sent to the USB host.<br>If you want to ensure that all data is sent without having processing enter a wait state, you can poll using <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerGetWriteDataSize">sceUsbSerGetWriteDataSize</a>() to find out when there is no data left in the internal write buffer. You can also use <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRegisterSentCallback">sceUsbSerRegisterSentCallback</a>() to set a callback that will be reported when the free space in the internal write buffer equals or exceeds a specified threshold value.<br><br>You can specify an interval in microseconds in the argument <i>timeout</i> to cause a timeout to occur if the buffer could not be flushed within the specified interval. If you do not want a timeout to occur, specify a negative number for <i>timeout</i>.<br><br>If the port was opened in DTR check mode, an <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_ERROR_DTR_OFF">SCE_USBSER_ERROR_DTR_OFF</a> error will be returned if DTR is OFF.<br>If the port was opened in ignore DTR mode, no error will occur even if DTR is OFF. In this case, the function will return immediately with normal completion since any data previously written with <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>() while DTR is OFF will have been discarded.<br><br>The sceUsbSerFlushCB() function has additional functionality for checking whether a callback notification exists while processing is in a wait state. While the calling thread is in a wait state, if a notification is reported for its callback, the thread temporarily leaves the wait state and then reenters it again after the callback function has executed.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define BUF_SIZE  (8 * 1024)
char buf[BUF_SIZE];
int ret;

memset(buf, 0xFF, BUF_SIZE);

// Write data with no timeout in Blocking mode and check for a callback notification 
ret = <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWriteCB">sceUsbSerWriteCB</a>(buf, BUF_SIZE, <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_OP_MODE_BLOCKING">SCE_USBSER_OP_MODE_BLOCKING</a>, -1);
if (ret &lt; 0) {
	// Error handling
}

// Wait until all data is sent with no timeout and check for a callback notification
ret = sceUsbSerFlushCB(-1);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerGetWriteDataSize">sceUsbSerGetWriteDataSize</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRegisterSentCallback">sceUsbSerRegisterSentCallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerCancel"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerCancel<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cancel an executing process<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerCancel</b>(
	SceUInt <i>mode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Cancel mode&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">For argument <i>mode</i>, specify the logical OR of the following values.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CANCEL_MODE_READ">SCE_USBSER_CANCEL_MODE_READ</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x01&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Cancel read processing&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CANCEL_MODE_WRITE">SCE_USBSER_CANCEL_MODE_WRITE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x02&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Cancel write processing&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CANCEL_MODE_FLUSH">SCE_USBSER_CANCEL_MODE_FLUSH</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x04&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Cancel flush processing&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_CLOSED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244405&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Port is closed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function cancels read, write, or flush processing that is executing.<br><br>In argument <i>mode</i>, specify the processing to be canceled. You can cancel more than one kind of processing at the same time by specifying the logical OR of the desired macros.<br>The processing that was canceled will terminate and return an <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_ERROR_CANCELED">SCE_USBSER_ERROR_CANCELED</a> error.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret;

// Cancel read, write, or flush processing
ret = sceUsbSerCancel(<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CANCEL_MODE_READ">SCE_USBSER_CANCEL_MODE_READ</a> |
			<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CANCEL_MODE_WRITE">SCE_USBSER_CANCEL_MODE_WRITE</a> |
			<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CANCEL_MODE_FLUSH">SCE_USBSER_CANCEL_MODE_FLUSH</a>);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CANCEL_MODE_READ">SCE_USBSER_CANCEL_MODE_READ</a><br><a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CANCEL_MODE_WRITE">SCE_USBSER_CANCEL_MODE_WRITE</a><br><a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CANCEL_MODE_FLUSH">SCE_USBSER_CANCEL_MODE_FLUSH</a><br><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRead">sceUsbSerRead</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerFlush">sceUsbSerFlush</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerClear"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerClear<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Clear internal buffer<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerClear</b>(
	SceUInt <i>mode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Clear mode&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">For argument <i>mode</i>, specify the logical OR of the following values.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CLEAR_MODE_READ">SCE_USBSER_CLEAR_MODE_READ</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x01&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Clear the internal read buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CLEAR_MODE_WRITE">SCE_USBSER_CLEAR_MODE_WRITE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x02&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Clear the internal write buffer&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_CLOSED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244405&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Port is closed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function clears an internal buffer of the USB serial driver.<br><br>In argument <i>mode</i>, specify the buffer to be cleared. You can clear both the internal read and write buffers at the same time by specifying the logical OR of the two macros.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret;

// Clear the internal read and write buffers
ret = sceUsbSerClear(<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CLEAR_MODE_READ">SCE_USBSER_CLEAR_MODE_READ</a> |
			<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CLEAR_MODE_WRITE">SCE_USBSER_CLEAR_MODE_WRITE</a>);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CLEAR_MODE_READ">SCE_USBSER_CLEAR_MODE_READ</a>, <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_CLEAR_MODE_WRITE">SCE_USBSER_CLEAR_MODE_WRITE</a><br><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRead">sceUsbSerRead</a>(), <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerGetReadDataSize"></a><a name="sceUsbSerGetReadFreeSize"></a>
<a name="sceUsbSerGetReadDataSize / sceUsbSerGetReadFreeSize"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerGetReadDataSize / sceUsbSerGetReadFreeSize<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get data size and free space size of internal read buffer<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
SceSize <b>sceUsbSerGetReadDataSize</b>(
	void
);
SceSize <b>sceUsbSerGetReadFreeSize</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The data size or free space size is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These functions get the data size and free space size in the USB serial driver's internal read buffer. sceUsbSerGetReadDataSize() returns the data size and sceUsbSerGetReadFreeSize() returns the free space size.<br><br>If the USB serial driver has not been started, 0 will be returned for both the data size and free space size.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>printf(&quot;Read buffer : Data = 0x%08x, Free = 0x%08x\n&quot;,
	sceUsbSerGetReadDataSize(), sceUsbSerGetReadFreeSize());

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRead">sceUsbSerRead</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerGetWriteDataSize"></a><a name="sceUsbSerGetWriteFreeSize"></a>
<a name="sceUsbSerGetWriteDataSize / sceUsbSerGetWriteFreeSize"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerGetWriteDataSize / sceUsbSerGetWriteFreeSize<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get data size and free space size of internal write buffer<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
SceSize <b>sceUsbSerGetWriteDataSize</b>(
	void
);
SceSize <b>sceUsbSerGetWriteFreeSize</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The data size or free space size is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These functions get the data size and free space size in the USB serial driver's internal write buffer. sceUsbSerGetWriteDataSize() returns the data size and sceUsbSerGetWriteFreeSize() returns the free space size.<br><br>If the USB serial driver has not been started, 0 will be returned for both the data size and free space size.<br><br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>printf(&quot;Write buffer : Data = 0x%08x, Free = 0x%08x\n&quot;,
	sceUsbSerGetWriteDataSize(), sceUsbSerGetWriteFreeSize());

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerWrite">sceUsbSerWrite</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerGetDTR"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerGetDTR<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get DTR status<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerGetDTR</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">One of the following values, which represent the DTR status, is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_DTR_OFF&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;DTR is OFF&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_DTR_ON&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;DTR is ON&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the DTR (Data Terminal Ready) status. DTR indicates that preparations for communication have been completed by the host. When DTR is OFF, communication with the USB host cannot be performed.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>printf(&quot;DTR %s\n&quot;, sceUsbSerGetDTR() ? &quot;ON&quot; : &quot;OFF&quot;);

</font></pre></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerRegisterDTRCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerRegisterDTRCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Register callback for reporting changes in DTR status<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerRegisterDTRCallback</b>(
	SceUID <i>cbId</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbId</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback ID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_BUSY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244403&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback has already been registered&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function registers the callback for reporting changes in DTR status. More than one callback cannot be registered at the same time.<br><br>The callback is reported when the USB host switches the DTR status ON or OFF. One of the following values, which represent the DTR status, is passed in the argument <i>arg</i> of the callback function.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_DTR_OFF">SCE_USBSER_DTR_OFF</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;DTR is OFF&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_DTR_ON">SCE_USBSER_DTR_ON</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;DTR is ON&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>// Callback function
static int DtrCallback(int count, int arg, void *common)
{
	printf(&quot;DTR %s\n&quot;, (arg == <a href="../debug_support/USB_Serial-Reference-English.htm#SCE_USBSER_DTR_ON">SCE_USBSER_DTR_ON</a>) ? &quot;ON&quot; : &quot;OFF&quot;);
	return 0;
}


SceUID cbId;
int ret;

// Create callback
ret = <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>(&quot;DTRCallback&quot;, DtrCallback, NULL);
if (ret &lt; 0) {
	// Error handling
}
cbId = ret;

// Register callback
ret = sceUsbSerRegisterDTRCallback(cbId);
if (ret &lt; 0) {
	// Error handling
}

while (1) {
	// Use API with CB to check whether callback notification exists
	<a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankCB">sceDisplayWaitVblankCB</a>();
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerUnregisterDTRCallback">sceUsbSerUnregisterDTRCallback</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerUnregisterDTRCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerUnregisterDTRCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Unregister callback for reporting changes in DTR status<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerUnregisterDTRCallback</b>(
	SceUID <i>cbId</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbId</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback ID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_ALREADY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244404&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback has already been unregistered&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function unregisters the callback for reporting changes in DTR status.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>SceUID cbId;  // Registered callback ID
int ret;

// Unregister callback
ret = sceUsbSerUnregisterDTRCallback(cbId);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRegisterDTRCallback">sceUsbSerRegisterDTRCallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerRegisterRecvCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerRegisterRecvCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Register data receive callback<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerRegisterRecvCallback</b>(
	SceUID <i>cbId</i>,
	SceSize <i>threshold</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbId</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback ID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>threshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Threshold for reporting callback&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_BUSY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244403&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback has already been registered&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function registers the callback for reporting that data was received from the USB host. More than one callback cannot be registered at the same time.<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>
<div style="margin-left:50px;">The callback will be reported when the amount of data stored in the internal read buffer equals or exceeds the size specified by the <i>threshold</i> argument. The data size in the internal buffer is passed in argument <i>arg</i> of the callback function.<br>Once the callback is reported, it will not be reported again even if <i>threshold</i> is exceeded until the data size in the internal buffer falls below <i>threshold</i>.<br><br>The value specified for <i>threshold</i> cannot be 0 or a value larger than the size of the internal buffer. If an internal read buffer is not specified when sceUsbStart() is called to start the USB serial driver, the size of the internal buffer will be set to 4KiB.<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define RECV_THRESHOLD  4  // Report callback when at least 4 bytes are received

// Callback function
static int ReceivedCallback(int count, int arg, void *common)
{
	printf(&quot;Data size : %d bytes\n&quot;, arg);
	return 0;
}


SceUID cbId;
int ret;

// Create callback
ret = <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>(&quot;ReceivedCallback&quot;, ReceivedCallback, NULL);
if (ret &lt; 0) {
	// Error handling
}
cbId = ret;

// Register callback
ret = sceUsbSerRegisterRecvCallback(cbId, RECV_THRESHOLD);
if (ret &lt; 0) {
	// Error handling
}

while (1) {
	// Use API with CB to check whether callback notification exists
	<a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankCB">sceDisplayWaitVblankCB</a>();
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerUnregisterRecvCallback">sceUsbSerUnregisterRecvCallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerUnregisterRecvCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerUnregisterRecvCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Unregister data receive callback<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerUnregisterRecvCallback</b>(
	SceUID <i>cbId</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbId</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback ID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_ALREADY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244404&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback has already been unregistered&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function unregisters the callback for reporting that data was received from the USB host.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>SceUID cbId;  // Registered callback ID
int ret;

// Unregister callback
ret = sceUsbSerUnregisterRecvCallback(cbId);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRegisterRecvCallback">sceUsbSerRegisterRecvCallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerSetRecvCBThreshold"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerSetRecvCBThreshold<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set threshold for data receive callback<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerSetRecvCBThreshold</b>(
	SceSize <i>threshold</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>threshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Threshold for reporting callback&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the threshold value to be used for reporting the data receive callback.<br>The data receive callback must already have been registered with <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRegisterRecvCallback">sceUsbSerRegisterRecvCallback</a>() before this function can be called.<br><br>The value specified for <i>threshold</i> cannot be 0 or a value larger than the size of the internal buffer. If an internal read buffer is not specified when sceUsbStart() is called to start the USB serial driver, the size of the internal buffer will be set to 4KiB.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>// Change the threshold of the callback so that the callback will be reported when at least 1 
// byte is received
ret = sceUsbSerSetRecvCBThreshold(1);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRegisterRecvCallback">sceUsbSerRegisterRecvCallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerRegisterSentCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerRegisterSentCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Register data send callback<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerRegisterSentCallback</b>(
	SceUID <i>cbId</i>,
	SceSize <i>threshold</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbId</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback ID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>threshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Threshold for reporting callback&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_BUSY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244403&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback has already been registered&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function registers the callback for reporting that data was sent to the USB host. More than one callback cannot be registered at the same time.<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>
<div style="margin-left:50px;">The callback will be reported when the amount of free space in the internal write buffer equals or exceeds the value specified by the <i>threshold</i> argument. The amount of free space in the internal buffer is passed in argument <i>arg</i> of the callback function.<br>Once the callback is reported, it will not be reported again even if <i>threshold</i> is exceeded until the amount of free space in the internal buffer falls below <i>threshold</i>.<br><br>The value specified for <i>threshold</i> cannot be 0 or a value larger than the size of the internal buffer. If an internal write buffer is not specified when sceUsbStart() is called to start the USB serial driver, the size of the internal buffer will be set to 4KiB.<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define SENT_THRESHOLD  4  // Report callback when at least 4 bytes of free space is created

// Callback function
static int SentCallback(int count, int arg, void *common)
{
	printf(&quot;Free space size : %d bytes\n&quot;, arg);
	return 0;
}


SceUID cbId;
int ret;

// Create callback
ret = <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>(&quot;SentCallback&quot;, SentCallback, NULL);
if (ret &lt; 0) {
	// Error handling
}
cbId = ret;

// Register callback
ret = sceUsbSerRegisterSentCallback(cbId, SENT_THRESHOLD);
if (ret &lt; 0) {
	// Error handling
}

while (1) {
	// Use API with CB to check whether callback notification exists
	<a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankCB">sceDisplayWaitVblankCB</a>();
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerUnregisterSentCallback">sceUsbSerUnregisterSentCallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerUnregisterSentCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerUnregisterSentCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Unregister data send callback<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerUnregisterSentCallback</b>(
	SceUID <i>cbId</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbId</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback ID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_ALREADY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244404&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback has already been unregistered&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function unregisters the callback for reporting that data was sent to the USB host.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>SceUID cbId;  // Registered callback ID
int ret;

// Unregister callback
ret = sceUsbSerUnregisterSentCallback(cbId);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRegisterSentCallback">sceUsbSerRegisterSentCallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbSerSetSentCBThreshold"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbSerSetSentCBThreshold<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set threshold for data send callback<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbser.h&gt;
int <b>sceUsbSerSetSentCBThreshold</b>(
	SceSize <i>threshold</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on an interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>threshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Threshold for reporting callback&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, 0 is returned.<br>If an error occurs, one of the following error codes (negative value) is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_NOT_INITIALIZED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_USBSER_ERROR_INVAL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the threshold value to be used for reporting the data send callback.<br>The data send callback must already have been registered with <a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRegisterSentCallback">sceUsbSerRegisterSentCallback</a>() before this function can be called.<br><br>The value specified for <i>threshold</i> cannot be 0 or a value larger than the size of the internal buffer. If an internal write buffer is not specified when sceUsbStart() is called to start the USB serial driver, the size of the internal buffer will be set to 4KiB.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>// Change the threshold of the callback so that the callback will be reported when at least 1 
// byte of free space is created
ret = sceUsbSerSetSentCBThreshold(1);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/USB_Serial-Reference-English.htm#sceUsbSerRegisterSentCallback">sceUsbSerRegisterSentCallback</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="List of Error Codes"></a>
<table width="100%"><td width="70%"><font size=6>List of Error Codes<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Error Codes]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Error codes returned by the USB serial driver<br></div><br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_ERROR_NOT_INITIALIZED">SCE_USBSER_ERROR_NOT_INITIALIZED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;USB serial driver has not been initialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_ERROR_INVAL">SCE_USBSER_ERROR_INVAL</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid argument&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_ERROR_BUSY">SCE_USBSER_ERROR_BUSY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244403&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;In use&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_ERROR_ALREADY">SCE_USBSER_ERROR_ALREADY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244404&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Processing has already been performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_ERROR_CLOSED">SCE_USBSER_ERROR_CLOSED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244405&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Port is closed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_ERROR_DTR_OFF">SCE_USBSER_ERROR_DTR_OFF</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244406&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;DTR is OFF&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_ERROR_TIMEOUT">SCE_USBSER_ERROR_TIMEOUT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244407&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Timed out&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBSER_ERROR_CANCELED">SCE_USBSER_ERROR_CANCELED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80244408&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Processing was cancelled&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
