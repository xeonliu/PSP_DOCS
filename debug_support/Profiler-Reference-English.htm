<html lang="en">
<head>
<title>Profiler-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
Profiler Operation Utility Reference
</h1></center>
</a>
<!-- sce_hd1 -->
<div style="margin-left:50px;"><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceProfilerRegs"></a>
<table width="100%"><td width="70%"><font size=6>SceProfilerRegs<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get global mode profiler register addresses<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceProfilerRegs {
	volatile unsigned int <i>en</i>;		/* +0x00 Profiler(Count) Enable */
	volatile unsigned int <i>n_ck</i>;		/* +0x04 System Clock Cycle */
	volatile unsigned int <i>n_gck</i>;		/* +0x08 CPU Clock(Geared) Cycle */
	volatile unsigned int <i>n_stalli</i>;	/* +0x0C Internal Stall */
	volatile unsigned int <i>n_stallm</i>;	/* +0x10 Memory Stall */
	volatile unsigned int <i>n_slipc</i>;	/* +0x14 COPz Busy Stall */
	volatile unsigned int <i>n_stallc</i>;	/* +0x18 VFPU Busy Stall */
	volatile unsigned int <i>n_sleep</i>;	/* +0x1C Sleep Stall */
	volatile unsigned int <i>n_bus</i>;	/* +0x20 Bus Busy Cycle */
	volatile unsigned int <i>n_uld</i>;		/* +0x24 Uncached Load */
	volatile unsigned int <i>n_ust</i>;		/* +0x28 Uncached Store */
	volatile unsigned int <i>n_cld</i>;		/* +0x2C Cached Load */
	volatile unsigned int <i>n_cst</i>;		/* +0x30 Cached Store */
	volatile unsigned int <i>n_imiss</i>;	/* +0x34 I-Cache Miss */
	volatile unsigned int <i>n_dmiss</i>;	/* +0x38 D-Cache Miss */
	volatile unsigned int <i>n_wbk</i>;	/* +0x3C D-Cache WriteBack */
	volatile unsigned int <i>n_cop0</i>;	/* +0x40 CoProcessor 0 */
	volatile unsigned int <i>n_fpu</i>;		/* +0x44 CoProcessor 1 (FPU) */
	volatile unsigned int <i>n_vfpu</i>;	/* +0x48 CoProcessor 2 (VFPU) */
} <b>SceProfilerRegs</b>;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a structure for representing the profiler registers that are obtained by the <a href="../debug_support/Profiler-Reference-English.htm#sceKernelReferGlobalProfiler">sceKernelReferGlobalProfiler</a>() function or <a href="../debug_support/Profiler-Reference-English.htm#sceKernelReferThreadProfiler">sceKernelReferThreadProfiler</a>() function.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#sceKernelReferGlobalProfiler">sceKernelReferGlobalProfiler</a>(), <a href="../debug_support/Profiler-Reference-English.htm#sceKernelReferThreadProfiler">sceKernelReferThreadProfiler</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferGlobalProfiler"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferGlobalProfiler<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Profiler Operations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get global mode profiler register addresses<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
<a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<b>sceKernelReferGlobalProfiler</b> (
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A pointer to the ALLEGREX profiler registers is returned.<br>However, if the profiler is disabled or the mode is not global mode, NULL is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the profiler is initialized in global mode according to the boot parameter, the profiler register addresses are obtained by the sceKernelReferGlobalProfiler() function.<br><br>If the kernel is started up with bit 23 of the boot parameter set to 1 and bit 22 set to 0 when the PSP&trade; development TOOL is reset, the profiler operates in global mode. If the mode is not global mode, the sceKernelReferGlobalProfiler() function returns NULL. In an actual PSP&trade; device, since the profiler cannot be enabled, the sceKernelReferGlobalProfiler() function will always return NULL.<br><br>In global mode, the kernel never manipulates each counter value for the profiler. A program that uses the profiler for making measurements must perform counter value management itself.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelReferThreadProfiler">sceKernelReferThreadProfiler</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferThreadProfiler"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferThreadProfiler<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Profiler Operations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get thread mode profiler register addresses<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
<a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<b>sceKernelReferThreadProfiler</b> (
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A pointer to the ALLEGREX profiler registers is returned.<br>However, if the profiler is disabled or the mode is not thread mode, NULL is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the profiler is initialized in thread mode according to the boot parameter, the profiler register addresses are obtained by the sceKernelReferThreadProfiler() function.<br><br>If the kernel is started up with bit 23 of the boot parameter set to 1 and bit 22 set to 1 when the PSP&trade; development TOOL is reset, the profiler operates in thread mode. If the mode is not thread, the sceKernelReferThreadProfiler() function returns NULL. In an actual PSP&trade; device, since the profiler cannot be enabled, the sceKernelReferThreadProfiler() function will always return NULL.<br><br>In thread mode, the kernel handles the profiler operation status and counter values as a thread context. Since the profiler registers must also be context switched when a thread context switch occurs, each thread is assumed to have independent counters.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelReferGlobalProfiler">sceKernelReferGlobalProfiler</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerReset"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerReset<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Profiler Operations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reset all profiler counter values to zero<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ int <b>sceKernelProfilerReset </b>(
	<a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i>pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The operation status immediately before the sceKernelProfilerReset() function was called is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler was stopped&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler was operating&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function stops profiler operation and resets all counter values.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerStart">sceKernelProfilerStart</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerStart"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerStart<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Profiler Operations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Start profiler operation<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ int <b>sceKernelProfilerStart </b>(
	<a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i>pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The operation status immediately before the sceKernelProfilerStart() function was called is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler was stopped&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler was operating&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function starts profiler operation.<br>Before starting profiler operation by using the sceKernelProfilerStart() function, be sure to first clear the counters to zero by using the <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerReset">sceKernelProfilerReset</a>() function.<br>Call the sceKernelProfilerStart() function immediately before executing processing to be measured.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerReset">sceKernelProfilerReset</a>(), <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerStop">sceKernelProfilerStop</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerStop"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerStop<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Profiler Operations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Stop profiler operation<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ int <b>sceKernelProfilerStop </b>(
	<a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i>pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The operation status immediately before the sceKernelProfilerStop() function was called is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler was stopped&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler was operating&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function stops profiler operation.<br>Call the sceKernelProfilerStop() function immediately after executing processing to be measured. If this function is called while the profiler is still operating, counter values may change while results are being received from multiple counters. Even if profiler operation is stopped, the counter values are saved.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerStart">sceKernelProfilerStart</a>(),<a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerReset">sceKernelProfilerReset</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetSystemClockCycle"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetSystemClockCycle<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of system clock cycles <br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetSystemClockCycle </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i>pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of system clock cycles is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the interval that the CPU clock advanced during profiler operation as a number of cycles.<br><br>The number of cycles of the system clock on the PSP&trade; system chip is controlled by a PLL. Its frequency may be changed to either 74 MHz, 166 MHz, 222 MHz, 266 MHz, or 333 MHz.<br>The default on startup is 222 MHz, and the current PLL output clock frequency can be obtained by using the <a href="../peripheral/Power-Reference-English.htm#scePowerGetPllClockFrequencyFloat">scePowerGetPllClockFrequencyFloat</a>() function.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../peripheral/Power-Reference-English.htm#scePowerGetPllClockFrequencyFloat">scePowerGetPllClockFrequencyFloat</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetCpuClockCycle"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetCpuClockCycle<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of CPU clock cycles<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetCpuClockCycle </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i>pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of CPU clock cycles is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the number of times that the CPU clock advanced during profiler operation as a number of cycles.<br><br>The CPU clock, which is a clock that is generated based on the system clock, can vary in the range from 1 to 333 MHz. The default on startup is 222 MHz, and the current CPU output clock frequency can be obtained by using the <a href="../peripheral/Power-Reference-English.htm#scePowerGetCpuClockFrequencyFloat">scePowerGetCpuClockFrequencyFloat</a>().<br>However, if the CPU must access the bus because a non-cached load or store instruction is executed or because of a cache refill or writeback, the CPU automatically switches to operating according to the system clock. This has an effect on the counter value and thus the number of CPU clock cycles that are returned by the sceKernelProfilerGetCpuClockCycle() function. This may cause the counter value to increment at a faster frequency than the frequency that is obtained by the <a href="../peripheral/Power-Reference-English.htm#scePowerGetCpuClockFrequencyFloat">scePowerGetCpuClockFrequencyFloat</a>() function, but just for one second.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../peripheral/Power-Reference-English.htm#scePowerGetCpuClockFrequencyFloat">scePowerGetCpuClockFrequencyFloat</a>(),  <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetCpuAverageFreq">sceKernelProfilerGetCpuAverageFreq</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetInternalStall"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetInternalStall<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of stall cycles due to CPU internal cause<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetInternalStall </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i>pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of stall cycles due to a CPU internal cause is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the number of cycles for which the pipeline had been stalled due to a CPU internal cause during profiler operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetMemoryStall"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetMemoryStall<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of stall cycles due to memory access cause<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetMemoryStall </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i>pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of stall cycles due to a memory access cause is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the number of cycles for which the pipeline had been stalled due to a memory access cause during profiler operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetBusBusyCycle">sceKernelProfilerGetBusBusyCycle</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetFpuStall"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetFpuStall<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of stall cycles due to FPU busy signal<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetFpuStall </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of stall cycles due to an FPU busy signal is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the number of cycles for which the pipeline had been stalled due to an FPU busy signal during profiler operation.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_1">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">An interlock due to a VFPU branch instruction (bvt, bvtl, bvf, or bvfl) is totaled in the same counter as is used for the FPU busy signal, even if the interlock occurs because the branch instruction is waiting for the results of the preceding vcmp instruction due to a slip in the RF stage. The number of interlock cycles due to an FPU busy signal cannot be distinguished from the number of cycles due to a VFPU branch interlock.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetFpuCount">sceKernelProfilerGetFpuCount</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetVfpuStall"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetVfpuStall<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of stall cycles due to VFPU busy signal <br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetVfpuStall </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of stall cycles due to a VFPU busy signal is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the number of cycles for which the pipeline had been stalled due to a VFPU busy signal during profiler operation.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_2">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">If the entire pipeline stalls because of an I-cache miss before the next VFPU instruction is executed after the VFPU repeat instruction was used, the latter VFPU instruction may cause an interlock. Although the effect on performance is extremely slight because the penalty due to the I-cache miss is dominant, when referencing counter values in detail for tuning, be careful of I-cache misses.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetVfpuCount">sceKernelProfilerGetVfpuCount</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetSleepStall"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetSleepStall<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of stall cycles due to SLEEP instruction<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetSleepStall </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of stall cycles due to execution of a SLEEP instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the number of cycles for which the pipeline had been stalled due to execution of a SLEEP instruction during profiler operation.<br><br>In the PSP&trade; kernel, a SLEEP instruction is issued by an idle thread having the lowest priority. A SLEEP instruction cannot be executed by another thread.<br>Therefore, when the profiler is operating in global mode, the return value of the sceKernelProfilerGetSleepStall() function can be considered as an approximate value of the number of idle thread execution cycles.<br>Also, when the profiler is operating in thread mode, the return value of the sceKernelProfilerGetSleepStall() function will be zero because the SLEEP instruction is not executed by a thread other than the idle thread.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetCpuAverageLoad">sceKernelProfilerGetCpuAverageLoad</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetBusBusyCycle"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetBusBusyCycle<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of bus busy cycles during bus access<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetBusBusyCycle </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of delayed cycles due to the bus being busy during bus access is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the number of delayed cycles during a bus access due to a bus busy signal during profiler operation. An ALLEGREX bus access is performed in non-blocking mode independently of the CPU pipeline. Note that the count value returned by the sceKernelProfilerGetBusBusyCycle() function does not indicate the number of cycles for which the CPU pipeline was stalled. The number of cycles for which the pipeline was stalled due to a memory access cause can be obtained by the <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetMemoryStall">sceKernelProfilerGetMemoryStall</a>() function.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetMemoryStall">sceKernelProfilerGetMemoryStall</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetUncacheLoadCount"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetUncacheLoadCount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Non-cached load instruction execution count<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetUncacheLoadCount </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of times a load instruction for a non-cached address was executed is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the counter value which counts the number times a load instruction (LB, LBU, LH, LHU, LW, LWL, LWR, LL, LWC1, LV.S, LV.Q) having a non-cached address (kuseg1, kseg1) as its target was executed during profiler operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetUncacheStoreCount">sceKernelProfilerGetUncacheStoreCount</a>(), <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetCacheLoadCount">sceKernelProfilerGetCacheLoadCount</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetUncacheStoreCount"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetUncacheStoreCount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Non-cached store instruction execution count<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetUncacheStoreCount </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of times a store instruction for a non-cached address was executed is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the counter value which counts the number times a store instruction (SB, SH, SW, SWL, SWR, SC, SWC1, SV.S, SV.Q, SVL.Q, SVR.Q, SV.Q,WB) having a non-cached address (kuseg1, kseg1) as its target was executed during profiler operation.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_3">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">The registers of the profiler itself exist as memory mapped I/O that are accessed from memory addresses in the kuseg1 segment range. When a <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerReset">sceKernelProfilerReset</a>(), <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerStart">sceKernelProfilerStart</a>(), or <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerStop">sceKernelProfilerStop</a>() function for manipulating profiler operation or counter values is executed, the non-cached store instruction execution count changes because the ALLEGREX CPU will be executing store instructions to non-cached addresses. By using the <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerStop">sceKernelProfilerStop</a>() function to stop profiler operation in advance so that the count value does not change while the operation for getting profiler count values is being performed, you can limit the sceKernelProfilerGetUncacheStoreCount() function error to 1.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetUncacheLoadCount">sceKernelProfilerGetUncacheLoadCount</a>(), <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetCacheStoreCount">sceKernelProfilerGetCacheStoreCount</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetCacheLoadCount"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetCacheLoadCount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Execution count for load instructions via cache <br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetCacheLoadCount </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of times a load instruction to a cached address was executed is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the counter value which counts the number times a load instruction (LB, LBU, LH, LHU, LW, LWL, LWR, LL, LWC1, LV.S, LV.Q) having a cached address (kuseg0, kseg0) as its target was executed during profiler operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetCacheStoreCount">sceKernelProfilerGetCacheStoreCount</a>(), <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetUncacheLoadCount">sceKernelProfilerGetUncacheLoadCount</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetCacheStoreCount"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetCacheStoreCount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Execution count for store instructions via cache<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetCacheStoreCount </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of times a store instruction to a cached address was executed is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the counter value which counts the number times a store instruction (SB, SH, SW, SWL, SWR, SC, SWC1, SV.S, SV.Q, SVL.Q, SVR.Q, SV.Q,WB) having a cached address (kuseg0, kseg0) as its target was executed during profiler operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetCacheLoadCount">sceKernelProfilerGetCacheLoadCount</a>(), <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetUncacheStoreCount">sceKernelProfilerGetUncacheStoreCount</a>(), <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetDcacheWritebackCount">sceKernelProfilerGetDcacheWritebackCount</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetIcacheMissCount"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetIcacheMissCount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of times an I-cache miss occurred<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetIcacheMissCount </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of times an I-cache miss occurred is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the counter value which counts the number of times an I-cache miss occurred during profiler operation.<br><br>The I-cache hit ratio can be obtained by calling the <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetIcacheHitRatio">sceKernelProfilerGetIcacheHitRatio</a>() function.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetIcacheHitRatio">sceKernelProfilerGetIcacheHitRatio</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetDcacheMissCount"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetDcacheMissCount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of times a D-cache miss occurred <br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetDcacheMissCount </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of times a D-cache miss occurred is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the counter value which counts the number of times a D-cache miss occurred during profiler operation.<br><br>The D-cache hit ratio can be obtained by calling the <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetDcacheHitRatio">sceKernelProfilerGetDcacheHitRatio</a>() function.<br>The value obtained by this function is the number of times a D-cache miss occurred when the access was from a cached address (kuseg0, kseg0). Since accesses from non-cached addresses do not concern the D-cache, they are not counted as D-cache misses.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetDcacheHitRatio">sceKernelProfilerGetDcacheHitRatio</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetDcacheWritebackCount"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetDcacheWritebackCount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of times a D-cache writeback occurred <br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetDcacheWritebackCount </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of times a D-cache writeback occurred is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the counter value which counts the number of times a D-cache writeback occurred during profiler operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetCacheStoreCount">sceKernelProfilerGetCacheStoreCount</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetCop0Count"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetCop0Count<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get COP0 instruction execution count<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetCop0Count </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of times a COP0 instruction was executed is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the counter value which counts the number times a COP0 instruction was executed during profiler operation.<br>Many COP0 instructions are privileged instructions. Although they cannot be executed from user mode, some CACHE instructions can be issued in user mode, and they are counted as COP0 instructions.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetFpuCount"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetFpuCount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get FPU instruction execution count<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetFpuCount </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of times an FPU instruction was executed is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the counter value which counts the number times an FPU instruction was executed during profiler operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetVfpuCount"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetVfpuCount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Counter Value Acquisition]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get VFPU instruction execution count<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetVfpuCount </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of times a VFPU instruction was executed is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the counter value which counts the number times a VFPU instruction was executed during profiler operation.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_4">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">If you use an sv.q or wb instruction, the assembler may automatically insert a vnop instruction to avoid a problem related to the VFPU write buffer. Be careful with how profiler results are evaluated when using an sv.q or wb instruction since the vnop instruction that was automatically inserted by the assembler is also included in the count as a VFPU instruction.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetStallCycle"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetStallCycle<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Statistics Calculations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of CPU pipeline stall cycles<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetStallCycle </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i>pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The counter value for the number of CPU pipeline stall cycles is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the interval that the CPU pipeline had been stalled as a number of cycles from the operation results during profiler operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetExecInstructions"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetExecInstructions<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Statistics Calculations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of instructions executed<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelProfilerGetExecInstructions </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i>pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The number of instructions that were executed by the CPU is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the number of instructions that were executed by the CPU from the operation results during profiler operation.<br>However, this must be a result that was measured when the program counter was executing within cached address (kuseg0, kseg0).<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetCPI">sceKernelProfilerGetCPI</a>(), <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetIcacheHitRatio">sceKernelProfilerGetIcacheHitRatio</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetCPI"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetCPI<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Statistics Calculations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get CPI (Cycles Per Instruction) value<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ float <b>sceKernelProfilerGetCPI </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i>pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The estimated CPI value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function calculates the CPI (Cycles Per Instruction), which is a numerical value indicating the effective performance of the CPU pipeline, from the operation results during profiler operation.<br><br>The CPI is the average value of the number of cycles required for the CPU to execute one instruction. Theoretically, when it is 1.0 in a single pipeline ALLEGREX, it means that the CPU is operating at the highest level of performance<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetExecInstructions">sceKernelProfilerGetExecInstructions</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetIcacheHitRatio">sceKernelProfilerGetIcacheHitRatio</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetIcacheHitRatio"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetIcacheHitRatio<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Statistics Calculations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get I-cache hit ratio<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ float <b>sceKernelProfilerGetIcacheHitRatio </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The I-cache hit ratio is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function calculates the I-cache hit ratio from the operation results during profiler operation.<br>However, this must be a result that was measured when the program counter was executing within cached addresses (kuseg0, kseg0).<br>When an I-cache miss occurs, the CPU refills the 64-byte cache line including the requested instruction. Since 64 bytes contain 16 instruction OP codes, if no jump or branch occurs, then after the first instruction misses the I-cache, the next 15 instructions will hit the I-cache. At this time the hit ratio is 15/16 = 0.9375. When evaluating the I-cache hit ratio, consider this value as a criterion.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetIcacheMissCount">sceKernelProfilerGetIcacheMissCount</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetDcacheHitRatio"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetDcacheHitRatio<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Statistics Calculations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get D-cache hit ratio<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ float <b>sceKernelProfilerGetDcacheHitRatio </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The D-cache hit ratio is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function calculates the D-cache hit ratio from the operation results during profiler operation.<br>The value that is calculated here is the D-cache hit ratio when the access was from a cached address (kuseg0, kseg0). Since accesses from non-cached addresses (kuseg1, kseg1) do not concern the D-cache, they are not reflected in the D-cache hit ratio.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetDcacheMissCount">sceKernelProfilerGetDcacheMissCount</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetCpuAverageFreq"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetCpuAverageFreq<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Statistics Calculations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get average CPU clock frequency<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ float <b>sceKernelProfilerGetCpuAverageFreq </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The average CPU clock frequency is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the average operating clock frequency of the CPU from the operation results during profiler operation.<br><br>Although the CPU clock is at the frequency that was set by the <a href="../peripheral/Power-Reference-English.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>() function when the bus is not being accessed, the clock frequency changes to the system clock during a bus access because the clock must be synchronized with the bus clock. Since the average operating clock frequency that is obtained by the sceKernelProfilerGetCpuAverageFreq() function is affected by this, a frequency that is higher than the frequency that is obtained by the <a href="../peripheral/Power-Reference-English.htm#scePowerGetCpuClockFrequencyFloat">scePowerGetCpuClockFrequencyFloat</a>() function may be measured.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../peripheral/Power-Reference-English.htm#scePowerGetCpuClockFrequencyFloat">scePowerGetCpuClockFrequencyFloat</a>(),  <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetCpuClockCycle">sceKernelProfilerGetCpuClockCycle</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelProfilerGetCpuAverageLoad"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelProfilerGetCpuAverageLoad<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Statistics Calculations]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get average CPU load<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ float <b>sceKernelProfilerGetCpuAverageLoad </b>(
	const <a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a> *<i> pRegs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler (does not depend on interrupt-disabled or -enabled state)<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pRegs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Profiler register addresses&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The average CPU load is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the average CPU load from the operation results during profiler operation. 1.0 indicates the maximum load, and 0.0 indicates a no load state.<br><br>In the PSP&trade; kernel, a SLEEP instruction is executed by an idle thread having the lowest priority, which runs only when all other threads are in a WAIT state. When a SLEEP instruction is executed, the pipeline stops until an interrupt is generated for the CPU, and this interval is used to calculate the CPU load.<br><br>The idle thread execution time can be obtained in microseconds from the idleClocks member of the <a href="../kernel/Thread_Manager-Reference-English.htm#SceKernelSystemStatus">SceKernelSystemStatus</a> structure, which is obtained by using the <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelReferSystemStatus">sceKernelReferSystemStatus</a>() function.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../debug_support/Profiler-Reference-English.htm#SceProfilerRegs">SceProfilerRegs</a>, <a href="../debug_support/Profiler-Reference-English.htm#sceKernelProfilerGetSleepStall">sceKernelProfilerGetSleepStall</a>(), <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelReferSystemStatus">sceKernelReferSystemStatus</a>(), <a href="../kernel/Thread_Manager-Reference-English.htm#SceKernelSystemStatus">SceKernelSystemStatus</a><br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2005 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
