<html lang="en">
<head>
<title>VFPU_Intrinsics-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
VFPU Intrinsics Reference
</h1></center>
</a>
<!-- sce_hd1 -->
<div style="margin-left:50px;"><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_v4"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_v4<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[typedefs]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>V4SF mode type<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef float <b>vfpu_v4</b>   __attribute__((mode(V4SF)));

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a typedef for the V4SF mode type that uses VFPU matrix registers.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a>, <a href="../kernel/Types-Reference-English.htm#ScePspFVector4">ScePspFVector4</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_m4x4"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_m4x4<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[typedefs]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>V16SF mode type<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef float <b>vfpu_m4x4</b>   __attribute__((mode(V16SF)));

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a typedef for the V16SF mode type that uses VFPU matrix registers.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../kernel/Types-Reference-English.htm#ScePspFMatrix4">ScePspFMatrix4</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_flag_type"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_flag_type<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[typedefs]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Flag specification type<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>__extension__ typedef const unsigned long long <b>vfpu_flag_type</b>;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This type is used to indicate a flag argument when using VFPU intrinsics.<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VD_X"></a><a name="VFPU_VD_Y"></a><a name="VFPU_VD_Z"></a><a name="VFPU_VD_W"></a>
<a name="VFPU_VD_X / VFPU_VD_Y / VFPU_VD_Z / VFPU_VD_W"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VD_X / VFPU_VD_Y / VFPU_VD_Z / VFPU_VD_W<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>1D vd operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VD_X	= 0LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VD_Y	= 1LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VD_Z	= 2LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VD_W	= 3LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 1D vd operand, these constants select the fields to which the result of the operation will be output in the V4SF type return value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZW">VFPU_VD_XYZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VD_XY"></a><a name="VFPU_VD_ZW"></a>
<a name="VFPU_VD_XY / VFPU_VD_ZW"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VD_XY / VFPU_VD_ZW<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>2D vd operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VD_XY	= 0LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VD_ZW	= 2LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 2D vd operand, these constants select the fields to which the result of the operation will be output in the V4SF type return value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZW">VFPU_VS_XYZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VD_XYZ"></a><a name="VFPU_VD_YZW"></a>
<a name="VFPU_VD_XYZ / VFPU_VD_YZW"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VD_XYZ / VFPU_VD_YZW<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>3D vd operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VD_XYZ	= 0LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VD_YZW	= 1LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 3D vd operand, these constants select the fields to which the result of the operation will be output in the V4SF type return value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZW">VFPU_VD_XYZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VD_XYZW"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VD_XYZW<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>4D vd operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VD_XYZW	= 0LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 4D vd operand, this constant selects the fields to which the result of the operation will be output in the V4SF type return value.<br><br>Although the VFPU hardware can specify 4D vectors with register numbers using a two-element rotated format for 4D format instructions, some instructions are restricted in the use of that format and are not supported by the assembler. Specifically, VFPU_VD_XYZW can only be used with 4D vd operands.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VS_X"></a><a name="VFPU_VS_Y"></a><a name="VFPU_VS_Z"></a><a name="VFPU_VS_W"></a>
<a name="VFPU_VS_X / VFPU_VS_Y / VFPU_VS_Z / VFPU_VS_W"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VS_X / VFPU_VS_Y / VFPU_VS_Z / VFPU_VS_W<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>1D vs operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VS_X	= 0LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VS_Y	= 4LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VS_Z	= 8LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VS_W	= 12LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 1D vs operand, these constants select the fields from the V4SF type argument that are subject to the operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZW">VFPU_VS_XYZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VS_XY"></a><a name="VFPU_VS_ZW"></a>
<a name="VFPU_VS_XY / VFPU_VS_ZW"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VS_XY / VFPU_VS_ZW<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>2D vs operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VS_XY	= 0LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VS_ZW	= 2LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 2D vs operand, these constants select the fields from the V4SF type argument that are subject to the operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZW">VFPU_VS_XYZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VS_XYZ"></a><a name="VFPU_VS_YZW"></a>
<a name="VFPU_VS_XYZ / VFPU_VS_YZW"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VS_XYZ / VFPU_VS_YZW<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>3D vs operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VS_XYZ	= 0LL;	
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VS_YZW	= 4LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 3D vs operand, these constants select the fields from the V4SF type argument that are subject to the operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZW">VFPU_VS_XYZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VS_XYZW"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VS_XYZW<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>4D vs operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VS_XYZW	= 0LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 4D vs operand, this constant selects the fields from the V4SF type argument that are subject to the operation.<br><br>Although the VFPU hardware can specify 4D vectors with register numbers using a two-element rotated format for 4D format instructions, some instructions are restricted in the use of that format and are not supported by the assembler. Specifically, VFPU_VS_XYZW can only be used with 4D vs operands.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VT_X"></a><a name="VFPU_VT_Y"></a><a name="VFPU_VT_Z"></a><a name="VFPU_VT_W"></a>
<a name="VFPU_VT_X / VFPU_VT_Y / VFPU_VT_Z / VFPU_VT_W"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VT_X / VFPU_VT_Y / VFPU_VT_Z / VFPU_VT_W<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>1D vt operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VT_X	= 0LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VT_Y	= 16LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VT_Z	= 32LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VT_W	= 48LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 1D vt operand, these constants select the fields from the V4SF type argument that are subject to the operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZW">VFPU_VT_XYZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VT_XY"></a><a name="VFPU_VT_ZW"></a>
<a name="VFPU_VT_XY / VFPU_VT_ZW"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VT_XY / VFPU_VT_ZW<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>2D vt operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VT_XY	= 0LL;
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VT_ZW	= 32LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 2D vt operand, these constants select the fields from the V4SF type argument that are subject to the operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZW">VFPU_VT_XYZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VT_XYZ"></a><a name="VFPU_VT_YZW"></a>
<a name="VFPU_VT_XYZ / VFPU_VT_YZW"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VT_XYZ / VFPU_VT_YZW<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>3D vt operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VT_XYZ	= 0LL;	
static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VT_YZW	= 16LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 3D vt operand, these constants select the fields from the V4SF type argument that are subject to the operation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZW">VFPU_VT_XYZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_VT_XYZW"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_VT_XYZW<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>4D vt operand selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>static <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> VFPU_VT_XYZW	= 0LL;

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">For a VFPU intrinsic operation with a 4D vt operand, this constant selects the fields from the V4SF type argument that are subject to the operation.<br><br>Although the VFPU hardware can specify 4D vectors with register numbers using a two-element rotated format for 4D format instructions, some instructions are restricted in the use of that format and are not supported by the assembler. Specifically, VFPU_VT_XYZW can only be used with 4D vt operands.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_PFX_VD_S()"></a><a name="VFPU_PFX_VD_P()"></a><a name="VFPU_PFX_VD_T()"></a><a name="VFPU_PFX_VD_Q()"></a>
<a name="VFPU_PFX_VD_S() / VFPU_PFX_VD_P() / VFPU_PFX_VD_T() / VFPU_PFX_VD_Q()"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_PFX_VD_S() / VFPU_PFX_VD_P() / VFPU_PFX_VD_T() / VFPU_PFX_VD_Q()<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Destination prefix selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#define VFPU_PFX_VD_S(_X_)
#define VFPU_PFX_VD_P(_X_, _Y_)
#define VFPU_PFX_VD_T(_X_, _Y_, _Z_)
#define VFPU_PFX_VD_Q(_X_, _Y_, _Z_, _W_)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants specify the destination prefix due to a vpfxd instruction for a VFPU instrinsic.<br><br>The following macros can be specified for each element as a destination prefix.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_THRU&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Don't update destination&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MASK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Write mask&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_CLAMP0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Saturated write to [0:1]&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_CLAMP1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Saturated write to [-1:1]&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_PFX_VS_S()"></a><a name="VFPU_PFX_VS_P()"></a><a name="VFPU_PFX_VS_T()"></a><a name="VFPU_PFX_VS_Q()"></a>
<a name="VFPU_PFX_VS_S() / VFPU_PFX_VS_P() / VFPU_PFX_VS_T() / VFPU_PFX_VS_Q()"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_PFX_VS_S() / VFPU_PFX_VS_P() / VFPU_PFX_VS_T() / VFPU_PFX_VS_Q()<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Source prefix selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#define VFPU_PFX_VS_S(_X_)
#define VFPU_PFX_VS_P(_X_, _Y_)
#define VFPU_PFX_VS_T(_X_, _Y_, _Z_)
#define VFPU_PFX_VS_Q(_X_, _Y_, _Z_, _W_)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants specify the source prefix due to a vpfxs instruction for a VFPU instrinsic.<br><br>The following macros can be specified for each element as a source prefix.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_X&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle X&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_Y&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Y&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_Z&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Z&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_W&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle W&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_X&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle X with absolute value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_Y&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Y with absolute value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_Z&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Z with absolute value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_W&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle W with absolute value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 0.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 1.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 2.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_HALF&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 0.5&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_3&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 3.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_THIRD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 1/3&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_QUARTER&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 1/4&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_SIXTH&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 1/6&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_X&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sign inverted swizzle X&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_Y&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sign inverted swizzle Y&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_Z&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sign inverted swizzle Z&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_W&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sign inverted swizzle W&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_ABS_X&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle X with minus sign&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_ABS_Y&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Y with minus sign&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_Z&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Z with minus sign&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_W&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle W with minus sign&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -0.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -1.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -2.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_HALF&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -0.5&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_3&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -3.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_THIRD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -1/3&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_QUARTER&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -1/4&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_SIXTH&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -1/6&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="VFPU_PFX_VT_S()"></a><a name="VFPU_PFX_VT_P()"></a><a name="VFPU_PFX_VT_T()"></a><a name="VFPU_PFX_VT_Q()"></a>
<a name="VFPU_PFX_VT_S() / VFPU_PFX_VT_P() / VFPU_PFX_VT_T() / VFPU_PFX_VT_Q()"></a>
<table width="100%"><td width="70%"><font size=6>VFPU_PFX_VT_S() / VFPU_PFX_VT_P() / VFPU_PFX_VT_T() / VFPU_PFX_VT_Q()<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Target prefix selection<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#define VFPU_PFX_VT_S(_X_)
#define VFPU_PFX_VT_P(_X_, _Y_)
#define VFPU_PFX_VT_T(_X_, _Y_, _Z_)
#define VFPU_PFX_VT_Q(_X_, _Y_, _Z_, _W_)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants specify the target prefix due to a vpfxt instruction for a VFPU instrinsic.<br><br>The following macros can be specified for each element as a target prefix.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_X&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle X&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_Y&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Y&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_Z&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Z&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_W&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle W&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_X&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle X with absolute value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_Y&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Y with absolute value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_Z&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Z with absolute value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_W&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle W with absolute value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 0.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 1.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 2.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_HALF&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 0.5&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_3&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 3.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_THIRD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 1/3&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_QUARTER&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 1/4&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_SIXTH&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value 1/6&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_X&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sign inverted swizzle X&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_Y&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sign inverted swizzle Y&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_Z&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sign inverted swizzle Z&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_W&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sign inverted swizzle W&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_ABS_X&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle X with minus sign&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_ABS_Y&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Y with minus sign&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_Z&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle Z with minus sign&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_ABS_W&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Swizzle W with minus sign&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -0.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -1.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -2.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_HALF&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -0.5&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_3&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -3.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_THIRD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -1/3&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_QUARTER&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -1/4&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;VFPU_PFX_MINUS_SIXTH&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value -1/6&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vabs_s"></a><a name="vfpu_vabs_s_partial"></a>
<a name="vfpu_vabs_s / vfpu_vabs_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vabs_s / vfpu_vabs_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Absolute Value Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vabs_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vabs_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vabs.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vabs.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vabs.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vabs.s instruction to calculate the absolute value then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_p">vfpu_vabs_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_p_partial">vfpu_vabs_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_t">vfpu_vabs_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_t_partial">vfpu_vabs_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_q">vfpu_vabs_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_q_partial">vfpu_vabs_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vabs_p"></a><a name="vfpu_vabs_p_partial"></a>
<a name="vfpu_vabs_p / vfpu_vabs_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vabs_p / vfpu_vabs_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Absolute Value Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vabs_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vabs_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vabs.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vabs.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vabs.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vabs.p instruction to calculate the absolute value then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_s">vfpu_vabs_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_s_partial">vfpu_vabs_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_t">vfpu_vabs_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_t_partial">vfpu_vabs_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_q">vfpu_vabs_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_q_partial">vfpu_vabs_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vabs_t"></a><a name="vfpu_vabs_t_partial"></a>
<a name="vfpu_vabs_t / vfpu_vabs_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vabs_t / vfpu_vabs_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Absolute Value Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vabs_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vabs_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vabs.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vabs.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vabs.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vabs.t instruction to calculate the absolute value then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_s">vfpu_vabs_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_s_partial">vfpu_vabs_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_p">vfpu_vabs_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_p_partial">vfpu_vabs_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_q">vfpu_vabs_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_q_partial">vfpu_vabs_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vabs_q"></a><a name="vfpu_vabs_q_partial"></a>
<a name="vfpu_vabs_q / vfpu_vabs_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vabs_q / vfpu_vabs_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Absolute Value Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vabs_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vabs_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vabs.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vabs.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vabs.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vabs.q instruction to calculate the absolute value then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_s">vfpu_vabs_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_s_partial">vfpu_vabs_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_p">vfpu_vabs_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_p_partial">vfpu_vabs_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_t">vfpu_vabs_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vabs_t_partial">vfpu_vabs_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vadd_s"></a><a name="vfpu_vadd_s_partial"></a>
<a name="vfpu_vadd_s / vfpu_vadd_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vadd_s / vfpu_vadd_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Add Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vadd_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vadd_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vadd.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vadd.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vadd.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vadd.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vadd.s instruction to calculate the sum then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_p">vfpu_vadd_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_p_partial">vfpu_vadd_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_t">vfpu_vadd_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_t_partial">vfpu_vadd_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_q">vfpu_vadd_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_q_partial">vfpu_vadd_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vadd_p"></a><a name="vfpu_vadd_p_partial"></a>
<a name="vfpu_vadd_p / vfpu_vadd_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vadd_p / vfpu_vadd_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Add Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vadd_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vadd_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vadd.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vadd.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vadd.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vadd.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vadd.p instruction to calculate the sum then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_s">vfpu_vadd_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_s_partial">vfpu_vadd_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_t">vfpu_vadd_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_t_partial">vfpu_vadd_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_q">vfpu_vadd_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_q_partial">vfpu_vadd_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vadd_t"></a><a name="vfpu_vadd_t_partial"></a>
<a name="vfpu_vadd_t / vfpu_vadd_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vadd_t / vfpu_vadd_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Add Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vadd_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vadd_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vadd.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vadd.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vadd.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vadd.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vadd.t instruction to calculate the sum then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_s">vfpu_vadd_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_s_partial">vfpu_vadd_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_p">vfpu_vadd_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_p_partial">vfpu_vadd_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_q">vfpu_vadd_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_q_partial">vfpu_vadd_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vadd_q"></a><a name="vfpu_vadd_q_partial"></a>
<a name="vfpu_vadd_q / vfpu_vadd_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vadd_q / vfpu_vadd_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Add Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vadd_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vadd_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vadd.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vadd.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vadd.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vadd.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vadd.q instruction to calculate the sum then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_s">vfpu_vadd_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_s_partial">vfpu_vadd_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_p">vfpu_vadd_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_p_partial">vfpu_vadd_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_t">vfpu_vadd_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vadd_t_partial">vfpu_vadd_t_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vasin_s"></a><a name="vfpu_vasin_s_partial"></a>
<a name="vfpu_vasin_s / vfpu_vasin_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vasin_s / vfpu_vasin_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Arc Sine Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vasin_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vasin_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vasin.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vasin.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vasin.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vasin.s instruction to calculate the arcsine then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_p">vfpu_vasin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_p_partial">vfpu_vasin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_t">vfpu_vasin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_t_partial">vfpu_vasin_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_q">vfpu_vasin_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vasin_p"></a><a name="vfpu_vasin_p_partial"></a>
<a name="vfpu_vasin_p / vfpu_vasin_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vasin_p / vfpu_vasin_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Arc Sine Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vasin_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vasin_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vasin.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vasin.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vasin.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vasin.p instruction to calculate the arcsine then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_s">vfpu_vasin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_s_partial">vfpu_vasin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_t">vfpu_vasin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_t_partial">vfpu_vasin_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_q">vfpu_vasin_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vasin_t"></a><a name="vfpu_vasin_t_partial"></a>
<a name="vfpu_vasin_t / vfpu_vasin_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vasin_t / vfpu_vasin_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Arc Sine Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vasin_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vasin_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vasin.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vasin.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vasin.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vasin.t instruction to calculate the arcsine then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_s">vfpu_vasin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_s_partial">vfpu_vasin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_p">vfpu_vasin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_p_partial">vfpu_vasin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_q">vfpu_vasin_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vasin_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vasin_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Arc Sine Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vasin_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vasin.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vasin.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vasin.q instruction to calculate the arcsine then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_s">vfpu_vasin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_s_partial">vfpu_vasin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_p">vfpu_vasin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_p_partial">vfpu_vasin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_t">vfpu_vasin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vasin_t_partial">vfpu_vasin_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vavg_p"></a><a name="vfpu_vavg_p_partial"></a>
<a name="vfpu_vavg_p / vfpu_vavg_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vavg_p / vfpu_vavg_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Average Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vavg_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vavg_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vavg.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vavg.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vavg.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vavg.p instruction to calculate the 2D average then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_t">vfpu_vavg_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_t_partial">vfpu_vavg_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_q">vfpu_vavg_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_q_partial">vfpu_vavg_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vavg_t"></a><a name="vfpu_vavg_t_partial"></a>
<a name="vfpu_vavg_t / vfpu_vavg_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vavg_t / vfpu_vavg_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Average Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vavg_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vavg_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vavg.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vavg.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vavg.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vavg.t instruction to calculate the 3D average then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_p">vfpu_vavg_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_p_partial">vfpu_vavg_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_q">vfpu_vavg_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_q_partial">vfpu_vavg_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vavg_q"></a><a name="vfpu_vavg_q_partial"></a>
<a name="vfpu_vavg_q / vfpu_vavg_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vavg_q / vfpu_vavg_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Average Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vavg_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vavg_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vavg.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vavg.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, and&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vavg.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vavg.q instruction to calculate the 4D average then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_p">vfpu_vavg_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_p_partial">vfpu_vavg_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_t">vfpu_vavg_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vavg_t_partial">vfpu_vavg_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vbfy1_p"></a><a name="vfpu_vbfy1_p_partial"></a>
<a name="vfpu_vbfy1_p / vfpu_vbfy1_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vbfy1_p / vfpu_vbfy1_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Butterfly 1 Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vbfy1_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vbfy1_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vbfy1.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vbfy1.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vbfy1.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vbfy1.p instruction to calculate the 2D butterfly value then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vbfy1_q">vfpu_vbfy1_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vbfy1_q_partial">vfpu_vbfy1_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vbfy1_q"></a><a name="vfpu_vbfy1_q_partial"></a>
<a name="vfpu_vbfy1_q / vfpu_vbfy1_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vbfy1_q / vfpu_vbfy1_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Butterfly 1 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vbfy1_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vbfy1_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vbfy1.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vbfy1.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vbfy1.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vbfy1.q instruction to calculate the 4D butterfly value then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vbfy1_p">vfpu_vbfy1_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vbfy1_p_partial">vfpu_vbfy1_p_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vbfy2_q"></a><a name="vfpu_vbfy2_q_partial"></a>
<a name="vfpu_vbfy2_q / vfpu_vbfy2_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vbfy2_q / vfpu_vbfy2_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Butterfly 2 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vbfy2_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vbfy2_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vbfy2.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vbfy2.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vbfy2.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vbfy2.q instruction to calculate the 4D butterfly value then outputs a 4D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vc2i_s"></a><a name="vfpu_vc2i_s_partial"></a>
<a name="vfpu_vc2i_s / vfpu_vc2i_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vc2i_s / vfpu_vc2i_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert to integer from signed char Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vc2i_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vc2i_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vc2i.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vc2i.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, and&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The 8 bits x 4 value that is unpacked to 32 bits x 4 is returned as a 4D V4SF mode type value.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vc2i.s instruction to unpack then outputs a 4D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_s</b> (
	const enum vfpu_condition <i>_Cond</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Cond</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;<br>&nbsp;&nbsp;Defined according to enum vfpu_condition&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_FL, VFPU_EQ, VFPU_LT, VFPU_LE, VFPU_TR, &nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_NE, VFPU_GE, VFPU_GT, VFPU_EZ, VFPU_EN, &nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_EI, VFPU_ES, VFPU_NZ, VFPU_NN, VFPU_NI, and&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_NS are valid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcmp.s instruction to compare according to the given condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_p">vfpu_vcmp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcmp_p</b> (
	const enum vfpu_condition <i>_Cond</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Cond</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;<br>&nbsp;&nbsp;Defined according to enum vfpu_condition&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_FL, VFPU_EQ, VFPU_LT, VFPU_LE, VFPU_TR, VFPU_NE, &nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_GE, VFPU_GT, VFPU_EZ, VFPU_EN, VFPU_EI, VFPU_ES, &nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_NZ, VFPU_NN, VFPU_NI, and VFPU_NS are valid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcmp.p instruction to compare according to the given condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcmp_t</b> (
	const enum vfpu_condition <i>_Cond</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Cond</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;<br>&nbsp;&nbsp;Defined according to enum vfpu_condition&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_FL, VFPU_EQ, VFPU_LT, VFPU_LE, VFPU_TR, VFPU_NE, &nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_GE, VFPU_GT, VFPU_EZ, VFPU_EN, VFPU_EI, VFPU_ES, &nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_NZ, VFPU_NN, VFPU_NI, and VFPU_NS are valid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcmp.t instruction to compare according to the given condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_p">vfpu_vcmp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcmp_q</b> (
	const enum vfpu_condition <i>_Cond</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Cond</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;<br>&nbsp;&nbsp;Defined according to enum vfpu_condition&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_FL, VFPU_EQ, VFPU_LT, VFPU_LE, VFPU_TR, &nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_NE, VFPU_GE, VFPU_GT, VFPU_EZ, VFPU_EN, &nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_EI, VFPU_ES, VFPU_NZ, VFPU_NN, VFPU_NI, and&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_NS are valid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcmp.q instruction to compare according to the given condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_p">vfpu_vcmp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcos_s"></a><a name="vfpu_vcos_s_partial"></a>
<a name="vfpu_vcos_s / vfpu_vcos_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcos_s / vfpu_vcos_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cosine Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcos_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcos_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vcos.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcos.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vcos.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcos.s instruction to calculate the cosine then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_p">vfpu_vcos_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_p_partial">vfpu_vcos_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_t">vfpu_vcos_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_t_partial">vfpu_vcos_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_q">vfpu_vcos_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcos_p"></a><a name="vfpu_vcos_p_partial"></a>
<a name="vfpu_vcos_p / vfpu_vcos_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcos_p / vfpu_vcos_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cosine Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcos_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcos_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vcos.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcos.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vcos.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcos.p instruction to calculate the cosine then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_s">vfpu_vcos_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_s_partial">vfpu_vcos_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_t">vfpu_vcos_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_t_partial">vfpu_vcos_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_q">vfpu_vcos_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcos_t"></a><a name="vfpu_vcos_t_partial"></a>
<a name="vfpu_vcos_t / vfpu_vcos_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcos_t / vfpu_vcos_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cosine Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcos_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcos_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of vcos.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcos.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vcos.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcos.t instruction to calculate the cosine then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_s">vfpu_vcos_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_s_partial">vfpu_vcos_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_p">vfpu_vcos_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_p_partial">vfpu_vcos_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_q">vfpu_vcos_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcos_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcos_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cosine Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcos_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcos.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vcos.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcos.q instruction to calculate the cosine then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_s">vfpu_vcos_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_s_partial">vfpu_vcos_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_p">vfpu_vcos_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_p_partial">vfpu_vcos_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_t">vfpu_vcos_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcos_t_partial">vfpu_vcos_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcrs_t"></a><a name="vfpu_vcrs_t_partial"></a>
<a name="vfpu_vcrs_t / vfpu_vcrs_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcrs_t / vfpu_vcrs_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cross Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcrs_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcrs_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vcrs.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vcrs.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vcrs.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vcrs.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcrs.t instruction to calculate the cross product then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcrsp_t">vfpu_vcrsp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcrsp_t_partial">vfpu_vcrsp_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcrsp_t"></a><a name="vfpu_vcrsp_t_partial"></a>
<a name="vfpu_vcrsp_t / vfpu_vcrsp_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcrsp_t / vfpu_vcrsp_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cross Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcrsp_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcrsp_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vcrsp.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vcrsp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vcrsp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vcrsp.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcrsp.t instruction to calculate the cross product then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcrs_t">vfpu_vcrs_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcrs_t_partial">vfpu_vcrs_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcst_s"></a><a name="vfpu_vcst_s_partial"></a>
<a name="vfpu_vcst_s / vfpu_vcst_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcst_s / vfpu_vcst_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Constant Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcst_s</b> (
	const enum vfpu_constant<i> _Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcst_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const enum vfpu_constant<i> _Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vcst.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value selection code&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, and&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vcst.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcst.s instruction to generate the 1D constant value specified by <i>_Imm5</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_p">vfpu_vcst_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_p_partial">vfpu_vcst_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_t">vfpu_vcst_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_t_partial">vfpu_vcst_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_q">vfpu_vcst_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_q_partial">vfpu_vcst_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcst_p"></a><a name="vfpu_vcst_p_partial"></a>
<a name="vfpu_vcst_p / vfpu_vcst_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcst_p / vfpu_vcst_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Constant Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcst_p</b> (
	const enum vfpu_constant<i> _Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcst_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const enum vfpu_constant<i> _Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vcst.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value selection code&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vcst.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcst.p instruction to generate the 2D constant value specified by <i>_Imm5</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_s">vfpu_vcst_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_s_partial">vfpu_vcst_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_t">vfpu_vcst_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_t_partial">vfpu_vcst_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_q">vfpu_vcst_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_q_partial">vfpu_vcst_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcst_t"></a><a name="vfpu_vcst_t_partial"></a>
<a name="vfpu_vcst_t / vfpu_vcst_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcst_t / vfpu_vcst_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Constant Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcst_t</b> (
	const enum vfpu_constant<i> _Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcst_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const enum vfpu_constant<i> _Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vcst.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value selection code&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vcst.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcst.t instruction to generate the 3D constant value specified by <i>_Imm5</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_s">vfpu_vcst_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_s_partial">vfpu_vcst_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_p">vfpu_vcst_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_p_partial">vfpu_vcst_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_q">vfpu_vcst_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_q_partial">vfpu_vcst_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcst_q"></a><a name="vfpu_vcst_q_partial"></a>
<a name="vfpu_vcst_q / vfpu_vcst_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcst_q / vfpu_vcst_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Constant Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcst_q</b> (
	const enum vfpu_constant<i> _Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vcst_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const enum vfpu_constant<i> _Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vcst.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Constant value selection code&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vcst.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vcst.q instruction to generate the 4D constant value specified by <i>_Imm5</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_s">vfpu_vcst_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_s_partial">vfpu_vcst_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_p">vfpu_vcst_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_p_partial">vfpu_vcst_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_t">vfpu_vcst_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcst_t_partial">vfpu_vcst_t_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vdet_p"></a><a name="vfpu_vdet_p_partial"></a>
<a name="vfpu_vdet_p / vfpu_vdet_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vdet_p / vfpu_vdet_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>2X2 Matrix Determinant<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdet_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdet_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vdet.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vdet.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vdet.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vdet.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vdet.p instruction to calculate the determinant of a 2x2 matrix then outputs a 1D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vdiv_s"></a><a name="vfpu_vdiv_s_partial"></a>
<a name="vfpu_vdiv_s / vfpu_vdiv_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vdiv_s / vfpu_vdiv_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Divide Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdiv_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdiv_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vdiv.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vdiv.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vdiv.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vdiv.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vdiv.s instruction to calculate the quotient then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_p">vfpu_vdiv_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_p_partial">vfpu_vdiv_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_t">vfpu_vdiv_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_t_partial">vfpu_vdiv_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_q">vfpu_vdiv_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vdiv_p"></a><a name="vfpu_vdiv_p_partial"></a>
<a name="vfpu_vdiv_p / vfpu_vdiv_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vdiv_p / vfpu_vdiv_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Divide Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdiv_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdiv_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vdiv.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vdiv.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vdiv.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vdiv.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vdiv.p instruction to calculate the quotient then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_s">vfpu_vdiv_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_s_partial">vfpu_vdiv_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_t">vfpu_vdiv_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_t_partial">vfpu_vdiv_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_q">vfpu_vdiv_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vdiv_t"></a><a name="vfpu_vdiv_t_partial"></a>
<a name="vfpu_vdiv_t / vfpu_vdiv_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vdiv_t / vfpu_vdiv_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Divide Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdiv_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdiv_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vdiv.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vdiv.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vdiv.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vdiv.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vdiv.t instruction to calculate the quotient then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_s">vfpu_vdiv_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_s_partial">vfpu_vdiv_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_p">vfpu_vdiv_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_p_partial">vfpu_vdiv_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_q">vfpu_vdiv_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vdiv_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vdiv_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Divide Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdiv_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vdiv.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vdiv.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vdiv.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vdiv.q instruction to calculate the quotient then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_s">vfpu_vdiv_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_s_partial">vfpu_vdiv_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_p">vfpu_vdiv_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_p_partial">vfpu_vdiv_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_t">vfpu_vdiv_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdiv_t_partial">vfpu_vdiv_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vdot_p"></a><a name="vfpu_vdot_p_partial"></a>
<a name="vfpu_vdot_p / vfpu_vdot_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vdot_p / vfpu_vdot_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Dot Product Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdot_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdot_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vdot.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vdot.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vdot.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vdot.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vdot.p instruction to calculate the dot product then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_t">vfpu_vdot_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_t_partial">vfpu_vdot_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_q">vfpu_vdot_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_q_partial">vfpu_vdot_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vdot_t"></a><a name="vfpu_vdot_t_partial"></a>
<a name="vfpu_vdot_t / vfpu_vdot_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vdot_t / vfpu_vdot_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Dot Product Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdot_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdot_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vdot.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vdot.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vdot.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vdot.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vdot.t instruction to calculate the dot product then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_p">vfpu_vdot_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_p_partial">vfpu_vdot_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_q">vfpu_vdot_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_q_partial">vfpu_vdot_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vdot_q"></a><a name="vfpu_vdot_q_partial"></a>
<a name="vfpu_vdot_q / vfpu_vdot_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vdot_q / vfpu_vdot_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Dot Product Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdot_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vdot_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vdot.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vdot.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vdot.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vdot.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vdot.q instruction to calculate the dot product then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_p">vfpu_vdot_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_p_partial">vfpu_vdot_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_t">vfpu_vdot_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vdot_t_partial">vfpu_vdot_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vexp2_s"></a><a name="vfpu_vexp2_s_partial"></a>
<a name="vfpu_vexp2_s / vfpu_vexp2_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vexp2_s / vfpu_vexp2_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Exponential base 2 Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vexp2_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vexp2_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vexp2.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vexp2.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vexp2.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vexp2.s instruction to calculate the base 2 exponential value then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_p">vfpu_vexp2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_p_partial">vfpu_vexp2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_t">vfpu_vexp2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_t_partial">vfpu_vexp2_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_q">vfpu_vexp2_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vexp2_p"></a><a name="vfpu_vexp2_p_partial"></a>
<a name="vfpu_vexp2_p / vfpu_vexp2_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vexp2_p / vfpu_vexp2_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Exponential base 2 Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vexp2_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vexp2_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vexp2.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vexp2.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vexp2.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vexp2.p instruction to calculate the base 2 exponential value then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_s">vfpu_vexp2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_s_partial">vfpu_vexp2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_t">vfpu_vexp2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_t_partial">vfpu_vexp2_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_q">vfpu_vexp2_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vexp2_t"></a><a name="vfpu_vexp2_t_partial"></a>
<a name="vfpu_vexp2_t / vfpu_vexp2_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vexp2_t / vfpu_vexp2_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Exponential base 2 Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vexp2_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vexp2_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vexp2.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vexp2.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vexp2.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vexp2.t instruction to calculate the base 2 exponential value then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_s">vfpu_vexp2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_s_partial">vfpu_vexp2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_p">vfpu_vexp2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_p_partial">vfpu_vexp2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_q">vfpu_vexp2_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vexp2_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vexp2_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Exponential base 2 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vexp2_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vexp2.q instruction &nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vexp2.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vexp2.q instruction to calculate the base 2 exponential value then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_s">vfpu_vexp2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_s_partial">vfpu_vexp2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_p">vfpu_vexp2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_p_partial">vfpu_vexp2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_t">vfpu_vexp2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vexp2_t_partial">vfpu_vexp2_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2h_p"></a><a name="vfpu_vf2h_p_partial"></a>
<a name="vfpu_vf2h_p / vfpu_vf2h_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2h_p / vfpu_vf2h_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert float to float16 Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2h_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2h_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2h.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2h.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, and&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2h.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2h.p instruction to pack two 32-bit single-precision floating-point numbers into two 16-bit half-precision floating-point numbers then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2h_q">vfpu_vf2h_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2h_q_partial">vfpu_vf2h_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2h_q"></a><a name="vfpu_vf2h_q_partial"></a>
<a name="vfpu_vf2h_q / vfpu_vf2h_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2h_q / vfpu_vf2h_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert float to float16 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2h_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2h_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2h.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2h.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2h.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2h.q instruction to pack four 32-bit single-precision floating-point numbers into four 16-bit half-precision floating-point numbers then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2h_p">vfpu_vf2h_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2h_p_partial">vfpu_vf2h_p_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2id_s"></a><a name="vfpu_vf2id_s_partial"></a>
<a name="vfpu_vf2id_s / vfpu_vf2id_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2id_s / vfpu_vf2id_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2id_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2id_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2id.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2id.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2id.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2id.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2id.s instruction to round to the nearest integer in the -( direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_p">vfpu_vf2id_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_p_partial">vfpu_vf2id_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_t">vfpu_vf2id_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_t_partial">vfpu_vf2id_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_q">vfpu_vf2id_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_q_partial">vfpu_vf2id_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2id_p"></a><a name="vfpu_vf2id_p_partial"></a>
<a name="vfpu_vf2id_p / vfpu_vf2id_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2id_p / vfpu_vf2id_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2id_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2id_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2id.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2id.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2id.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2id.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2id.p instruction to round to the nearest integer in the -( direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_s">vfpu_vf2id_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_s_partial">vfpu_vf2id_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_t">vfpu_vf2id_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_t_partial">vfpu_vf2id_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_q">vfpu_vf2id_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_q_partial">vfpu_vf2id_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2id_t"></a><a name="vfpu_vf2id_t_partial"></a>
<a name="vfpu_vf2id_t / vfpu_vf2id_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2id_t / vfpu_vf2id_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2id_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2id_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2id.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2id.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2id.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2id.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2id.t instruction to round to the nearest integer in the -( direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_s">vfpu_vf2id_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_s_partial">vfpu_vf2id_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_p">vfpu_vf2id_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_p_partial">vfpu_vf2id_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_q">vfpu_vf2id_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_q_partial">vfpu_vf2id_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2id_q"></a><a name="vfpu_vf2id_q_partial"></a>
<a name="vfpu_vf2id_q / vfpu_vf2id_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2id_q / vfpu_vf2id_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2id_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
	const unsigned int <i>_Imm5,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2id_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2id.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2id.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2id.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2id.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2id.q instruction to round to the nearest integer in the -( direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_s">vfpu_vf2id_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_s_partial">vfpu_vf2id_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_p">vfpu_vf2id_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_p_partial">vfpu_vf2id_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_t">vfpu_vf2id_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2id_t_partial">vfpu_vf2id_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2in_s"></a><a name="vfpu_vf2in_s_partial"></a>
<a name="vfpu_vf2in_s / vfpu_vf2in_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2in_s / vfpu_vf2in_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to nearest integer from float with Scaling Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2in_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2in_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2in.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2in.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2in.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2in.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2in.s instruction to round to the nearest integer after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_p">vfpu_vf2in_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_p_partial">vfpu_vf2in_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_t">vfpu_vf2in_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_t_partial">vfpu_vf2in_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_q">vfpu_vf2in_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_q_partial">vfpu_vf2in_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2in_p"></a><a name="vfpu_vf2in_p_partial"></a>
<a name="vfpu_vf2in_p / vfpu_vf2in_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2in_p / vfpu_vf2in_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to nearest integer from float with Scaling Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2in_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2in_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2in.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2in.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2in.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2in.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2in.p instruction to round to the nearest integer after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_s">vfpu_vf2in_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_s_partial">vfpu_vf2in_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_t">vfpu_vf2in_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_t_partial">vfpu_vf2in_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_q">vfpu_vf2in_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_q_partial">vfpu_vf2in_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2in_t"></a><a name="vfpu_vf2in_t_partial"></a>
<a name="vfpu_vf2in_t / vfpu_vf2in_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2in_t / vfpu_vf2in_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to nearest integer from float with Scaling Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2in_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2in_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2in.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2in.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2in.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2in.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2in.t instruction to round to the nearest integer after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_s">vfpu_vf2in_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_s_partial">vfpu_vf2in_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_p">vfpu_vf2in_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_p_partial">vfpu_vf2in_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_q">vfpu_vf2in_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_q_partial">vfpu_vf2in_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2in_q"></a><a name="vfpu_vf2in_q_partial"></a>
<a name="vfpu_vf2in_q / vfpu_vf2in_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2in_q / vfpu_vf2in_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to nearest integer from float with Scaling Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2in_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2in_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2in.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2in.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2in.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2in.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2in.q instruction to round to the nearest integer after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_s">vfpu_vf2in_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_s_partial">vfpu_vf2in_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_p">vfpu_vf2in_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_p_partial">vfpu_vf2in_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_t">vfpu_vf2in_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2in_t_partial">vfpu_vf2in_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2iu_s"></a><a name="vfpu_vf2iu_s_partial"></a>
<a name="vfpu_vf2iu_s / vfpu_vf2iu_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2iu_s / vfpu_vf2iu_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iu_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iu_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2iu.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2iu.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2iu.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2iu.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2iu.s instruction to round to the nearest integer in the +&infin; direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_p">vfpu_vf2iu_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_p_partial">vfpu_vf2iu_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_t">vfpu_vf2iu_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_t_partial">vfpu_vf2iu_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_q">vfpu_vf2iu_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_q_partial">vfpu_vf2iu_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2iu_p"></a><a name="vfpu_vf2iu_p_partial"></a>
<a name="vfpu_vf2iu_p / vfpu_vf2iu_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2iu_p / vfpu_vf2iu_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iu_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iu_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2iu.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2iu.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2iu.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2iu.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2iu.p instruction to round to the nearest integer in the +&infin; direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_s">vfpu_vf2iu_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_s_partial">vfpu_vf2iu_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_t">vfpu_vf2iu_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_t_partial">vfpu_vf2iu_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_q">vfpu_vf2iu_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_q_partial">vfpu_vf2iu_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2iu_t"></a><a name="vfpu_vf2iu_t_partial"></a>
<a name="vfpu_vf2iu_t / vfpu_vf2iu_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2iu_t / vfpu_vf2iu_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iu_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iu_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2iu.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2iu.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2iu.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2iu.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2iu.t instruction to round to the nearest integer in the +&infin; direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_s">vfpu_vf2iu_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_s_partial">vfpu_vf2iu_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_p">vfpu_vf2iu_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_p_partial">vfpu_vf2iu_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_q">vfpu_vf2iu_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_q_partial">vfpu_vf2iu_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2iu_q"></a><a name="vfpu_vf2iu_q_partial"></a>
<a name="vfpu_vf2iu_q / vfpu_vf2iu_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2iu_q / vfpu_vf2iu_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iu_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iu_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2iu.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2iu.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2iu.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2iu.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2iu.q instruction to round to the nearest integer in the +&infin; direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_s">vfpu_vf2iu_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_s_partial">vfpu_vf2iu_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_p">vfpu_vf2iu_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_p_partial">vfpu_vf2iu_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_t">vfpu_vf2iu_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iu_t_partial">vfpu_vf2iu_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2iz_s"></a><a name="vfpu_vf2iz_s_partial"></a>
<a name="vfpu_vf2iz_s / vfpu_vf2iz_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2iz_s / vfpu_vf2iz_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iz_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iz_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2iz.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2iz.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2iz.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2iz.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2iz.s instruction to round to the nearest integer in the 0 direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_p">vfpu_vf2iz_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_p_partial">vfpu_vf2iz_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_t">vfpu_vf2iz_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_t_partial">vfpu_vf2iz_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_q">vfpu_vf2iz_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_q_partial">vfpu_vf2iz_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2iz_p"></a><a name="vfpu_vf2iz_p_partial"></a>
<a name="vfpu_vf2iz_p / vfpu_vf2iz_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2iz_p / vfpu_vf2iz_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iz_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iz_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2iz.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2iz.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2iz.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2iz.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2iz.p instruction to round to the nearest integer in the 0 direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_s">vfpu_vf2iz_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_s_partial">vfpu_vf2iz_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_t">vfpu_vf2iz_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_t_partial">vfpu_vf2iz_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_q">vfpu_vf2iz_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_q_partial">vfpu_vf2iz_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2iz_t"></a><a name="vfpu_vf2iz_t_partial"></a>
<a name="vfpu_vf2iz_t / vfpu_vf2iz_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2iz_t / vfpu_vf2iz_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iz_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iz_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2iz.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2iz.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2iz.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2iz.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2iz.t instruction to round to the nearest integer in the 0 direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_s">vfpu_vf2iz_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_s_partial">vfpu_vf2iz_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_p">vfpu_vf2iz_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_p_partial">vfpu_vf2iz_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_q">vfpu_vf2iz_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_q_partial">vfpu_vf2iz_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vf2iz_q"></a><a name="vfpu_vf2iz_q_partial"></a>
<a name="vfpu_vf2iz_q / vfpu_vf2iz_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vf2iz_q / vfpu_vf2iz_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Round to smallest integer from float with Scaling Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iz_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vf2iz_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vf2iz.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vf2iz.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vf2iz.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vf2iz.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vf2iz.q instruction to round to the nearest integer in the 0 direction after multiplying by 2 raised to the power indicated by the argument <i>_Imm5</i> then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_s">vfpu_vf2iz_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_s_partial">vfpu_vf2iz_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_p">vfpu_vf2iz_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_p_partial">vfpu_vf2iz_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_t">vfpu_vf2iz_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vf2iz_t_partial">vfpu_vf2iz_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vfad_p"></a><a name="vfpu_vfad_p_partial"></a>
<a name="vfpu_vfad_p / vfpu_vfad_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vfad_p / vfpu_vfad_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Funnel Add Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vfad_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vfad_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>,
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vfad.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vfad.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vfad.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vfad.p instruction to calculate the 2D sum then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_t">vfpu_vfad_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_t_partial">vfpu_vfad_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_q">vfpu_vfad_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_q_partial">vfpu_vfad_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vfad_t"></a><a name="vfpu_vfad_t_partial"></a>
<a name="vfpu_vfad_t / vfpu_vfad_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vfad_t / vfpu_vfad_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Funnel Add Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vfad_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vfad_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vfad.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vfad.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vfad.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vfad.t instruction to calculate the 3D sum then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_p">vfpu_vfad_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_p_partial">vfpu_vfad_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_q">vfpu_vfad_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_q_partial">vfpu_vfad_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vfad_q"></a><a name="vfpu_vfad_q_partial"></a>
<a name="vfpu_vfad_q / vfpu_vfad_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vfad_q / vfpu_vfad_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Funnel Add Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vfad_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vfad_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vfad.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vfad.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vfad.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vfad.q instruction to calculate the 4D sum then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_p">vfpu_vfad_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_p_partial">vfpu_vfad_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_t">vfpu_vfad_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vfad_t_partial">vfpu_vfad_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vfim_s"></a><a name="vfpu_vfim_s_partial"></a>
<a name="vfpu_vfim_s / vfpu_vfim_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vfim_s / vfpu_vfim_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert float16 immediate to float Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vfim_s</b> (
	const float <i>_Imm16,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vfim_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const float <i>_Imm16</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vfim.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm16</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm16 operand of the vfim.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vfim.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vfim.s instruction to convert a half-precision floating-point number then outputs a 1D value.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_1">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">Although the argument <i>_Imm16</i> of vfpu_vfim_s() and vfpu_vfim_s_partial() is specified as a 32-bit float value, it is converted to a half-precision floating-point number by the assembler and packed into the low-order 16 bits of the vfim.s instruction opcode.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vh2f_s"></a><a name="vfpu_vh2f_s_partial"></a>
<a name="vfpu_vh2f_s / vfpu_vh2f_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vh2f_s / vfpu_vh2f_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert float16 to float Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vh2f_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vh2f_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vh2f.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vh2f.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vh2f.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vh2f.s instruction to pack two 16-bit half-precision floating-point numbers into two 32-bit single-precision floating-point numbers then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vh2f_p">vfpu_vh2f_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vh2f_p_partial">vfpu_vh2f_p_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vh2f_p"></a><a name="vfpu_vh2f_p_partial"></a>
<a name="vfpu_vh2f_p / vfpu_vh2f_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vh2f_p / vfpu_vh2f_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert float16 to float Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vh2f_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vh2f_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vh2f.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vh2f.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vh2f.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vh2f.p instruction to pack four 16-bit half-precision floating-point numbers into four 32-bit single-precision floating-point numbers then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vh2f_s">vfpu_vh2f_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vh2f_s_partial">vfpu_vh2f_s_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vhdp_p"></a><a name="vfpu_vhdp_p_partial"></a>
<a name="vfpu_vhdp_p / vfpu_vhdp_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vhdp_p / vfpu_vhdp_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Homogeneous Dot Product Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vhdp_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vhdp_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vhdp.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vhdp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vhdp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vhdp.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vhdp.p instruction to calculate the homogeneous dot product then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_t">vfpu_vhdp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_t_partial">vfpu_vhdp_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_q">vfpu_vhdp_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_q_partial">vfpu_vhdp_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vhdp_t"></a><a name="vfpu_vhdp_t_partial"></a>
<a name="vfpu_vhdp_t / vfpu_vhdp_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vhdp_t / vfpu_vhdp_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Homogeneous Dot Product Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vhdp_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vhdp_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vhdp.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vhdp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vhdp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vhdp.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vhdp.t instruction to calculate the homogeneous dot product then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_p">vfpu_vhdp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_p_partial">vfpu_vhdp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_q">vfpu_vhdp_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_q_partial">vfpu_vhdp_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vhdp_q"></a><a name="vfpu_vhdp_q_partial"></a>
<a name="vfpu_vhdp_q / vfpu_vhdp_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vhdp_q / vfpu_vhdp_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Homogeneous Dot Product Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vhdp_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vhdp_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vhdp.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vhdp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vhdp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vhdp.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vhdp.q instruction to calculate the homogeneous dot product then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_p">vfpu_vhdp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_p_partial">vfpu_vhdp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_t">vfpu_vhdp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhdp_t_partial">vfpu_vhdp_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vhtfm4_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vhtfm4_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Homogeneous Transform 4 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vhtfm4_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vhtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vhtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_VS_M and VFPU_VS_E are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vhtfm4.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vhtfm4.q instruction to transform 4D vectors to a 4D matrix as simultaneous coordinates then outputs a 4D value.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_2">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">Since VFPU intrinsics allocate V4SF mode types as c000 format, the operands <i>_Vs</i> and <i>_Vt</i> will have column vector format. To set the matrix in column order, specify VFPU_VS_E.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vchtfm4_q">vfpu_vchtfm4_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrhtfm4_q">vfpu_vrhtfm4_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vi2c_q"></a><a name="vfpu_vi2c_q_partial"></a>
<a name="vfpu_vi2c_q / vfpu_vi2c_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vi2c_q / vfpu_vi2c_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert integer to signed char Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2c_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2c_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vi2c.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vi2c.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vi2c.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vi2c.q instruction to pack four signed 32-bit values into four 8-bit values then outputs a 1D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vi2f_s"></a><a name="vfpu_vi2f_s_partial"></a>
<a name="vfpu_vi2f_s / vfpu_vi2f_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vi2f_s / vfpu_vi2f_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert integer to float with Scaling Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2f_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2f_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vi2f.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vi2f.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vi2f.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vi2f.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vi2f.s instruction to convert <i>_Vs</i> to a floating-point number and divide it by the exponent value indicated by <i>_Imm5</i> then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_p">vfpu_vi2f_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_p_partial">vfpu_vi2f_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_t">vfpu_vi2f_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_t_partial">vfpu_vi2f_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_q">vfpu_vi2f_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_q_partial">vfpu_vi2f_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vi2f_p"></a><a name="vfpu_vi2f_p_partial"></a>
<a name="vfpu_vi2f_p / vfpu_vi2f_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vi2f_p / vfpu_vi2f_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert integer to float with Scaling Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2f_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2f_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vi2f.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vi2f.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vi2f.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vi2f.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vi2f.p instruction to convert <i>_Vs</i> to a floating-point number and divide it by the exponent value indicated by <i>_Imm5</i> then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_s">vfpu_vi2f_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_s_partial">vfpu_vi2f_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_t">vfpu_vi2f_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_t_partial">vfpu_vi2f_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_q">vfpu_vi2f_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_q_partial">vfpu_vi2f_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vi2f_t"></a><a name="vfpu_vi2f_t_partial"></a>
<a name="vfpu_vi2f_t / vfpu_vi2f_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vi2f_t / vfpu_vi2f_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert integer to float with Scaling Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2f_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2f_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vi2f.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vi2f.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vi2f.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vi2f.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vi2f.t instruction to convert <i>_Vs</i> to a floating-point number and divide it by the exponent value indicated by <i>_Imm5</i> then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_s">vfpu_vi2f_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_s_partial">vfpu_vi2f_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_p">vfpu_vi2f_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_p_partial">vfpu_vi2f_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_q">vfpu_vi2f_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_q_partial">vfpu_vi2f_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vi2f_q"></a><a name="vfpu_vi2f_q_partial"></a>
<a name="vfpu_vi2f_q / vfpu_vi2f_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vi2f_q / vfpu_vi2f_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert integer to float with Scaling Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2f_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2f_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const unsigned int <i>_Imm5</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vi2f.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vi2f.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vi2f.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vi2f.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vi2f.q instruction to convert <i>_Vs</i> to a floating-point number and divide it by the exponent value indicated by <i>_Imm5</i> then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_s">vfpu_vi2f_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_s_partial">vfpu_vi2f_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_p">vfpu_vi2f_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_p_partial">vfpu_vi2f_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_t">vfpu_vi2f_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2f_t_partial">vfpu_vi2f_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vi2s_p"></a><a name="vfpu_vi2s_p_partial"></a>
<a name="vfpu_vi2s_p / vfpu_vi2s_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vi2s_p / vfpu_vi2s_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert integer to signed short Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2s_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2s_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vi2s.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vi2s.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vi2s.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vi2s.p instruction to pack two signed 32-bit integers into two 16-bit integers then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2s_q">vfpu_vi2s_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2s_q_partial">vfpu_vi2s_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vi2s_q"></a><a name="vfpu_vi2s_q_partial"></a>
<a name="vfpu_vi2s_q / vfpu_vi2s_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vi2s_q / vfpu_vi2s_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert integer to signed short Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2s_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2s_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vi2s.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vi2s.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, and &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vi2s.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vi2s.q instruction to pack two signed 32-bit integers into two 16-bit integers then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2s_p">vfpu_vi2s_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2s_p_partial">vfpu_vi2s_p_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vi2uc_q"></a><a name="vfpu_vi2uc_q_partial"></a>
<a name="vfpu_vi2uc_q / vfpu_vi2uc_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vi2uc_q / vfpu_vi2uc_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert integer to unsigned char Quad  Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2uc_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2uc_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vi2uc.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vi2uc.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vi2uc.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vi2uc.q instruction to pack four unsigned 32-bit integers into four 8-bit integers then outputs a 1D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vi2us_p"></a><a name="vfpu_vi2us_p_partial"></a>
<a name="vfpu_vi2us_p / vfpu_vi2us_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vi2us_p / vfpu_vi2us_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert integer to unsigned short Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2us_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2us_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vi2us.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vi2us.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, and&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vi2us.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vi2us.p instruction to pack two unsigned 32-bit integers into two 16-bit integers then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2us_q">vfpu_vi2us_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2us_q_partial">vfpu_vi2us_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vi2us_q"></a><a name="vfpu_vi2us_q_partial"></a>
<a name="vfpu_vi2us_q / vfpu_vi2us_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vi2us_q / vfpu_vi2us_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert integer to unsigned short Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2us_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vi2us_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vi2us.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vi2us.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, and&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vi2us.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vi2us.q instruction to pack four unsigned 32-bit integers into four 16-bit integers then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2us_p">vfpu_vi2us_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vi2us_p_partial">vfpu_vi2us_p_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vidt_p"></a><a name="vfpu_vidt_p_partial"></a>
<a name="vfpu_vidt_p / vfpu_vidt_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vidt_p / vfpu_vidt_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Identity Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vidt_p</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vidt_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;V4SF mode type value to be partially written&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vpfxs + vmov.p instructions is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vpfxs + vmov.p instructions to generate a 2D unit vector.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_t">vfpu_vidt_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_t_partial">vfpu_vidt_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_q">vfpu_vidt_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_q_partial">vfpu_vidt_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vidt_t"></a><a name="vfpu_vidt_t_partial"></a>
<a name="vfpu_vidt_t / vfpu_vidt_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vidt_t / vfpu_vidt_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Identity Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vidt_t</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vidt_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;V4SF mode type value to be partially written&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vpfxs + vmov.t instructions is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vpfxx + vmov.t instructions to generate a 3D unit vector.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_p">vfpu_vidt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_p_partial">vfpu_vidt_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_q">vfpu_vidt_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_q_partial">vfpu_vidt_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vidt_q"></a><a name="vfpu_vidt_q_partial"></a>
<a name="vfpu_vidt_q / vfpu_vidt_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vidt_q / vfpu_vidt_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Identity Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vidt_q</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vidt_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;V4SF mode type value to be partially written&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vpfxs + vmov.q instructions is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vpfxs + vmov.q instructions to generate a 4D unit vector.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_p">vfpu_vidt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_p_partial">vfpu_vidt_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_t">vfpu_vidt_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vidt_t_partial">vfpu_vidt_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_viim_s"></a><a name="vfpu_viim_s_partial"></a>
<a name="vfpu_viim_s / vfpu_viim_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_viim_s / vfpu_viim_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert integer immediate to float Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_viim_s</b> (
	const short <i>_Imm16,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_viim_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const short <i>_Imm16</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the viim.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm16</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm16 operand of the viim.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the viim.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU viim.s instruction to convert an unsigned 16-bit integer then outputs a 1D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vlgb_s"></a><a name="vfpu_vlgb_s_partial"></a>
<a name="vfpu_vlgb_s / vfpu_vlgb_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vlgb_s / vfpu_vlgb_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>LogB Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vlgb_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vlgb_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vlgb.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vlgb.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vlgb.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vlgb.s instruction to calculate the logB value then outputs a 1D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vlog2_s"></a><a name="vfpu_vlog2_s_partial"></a>
<a name="vfpu_vlog2_s / vfpu_vlog2_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vlog2_s / vfpu_vlog2_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Logarithm base 2 Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vlog2_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vlog2_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vlog2.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vlog2.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vlog2.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vlog2.s instruction to calculate the base 2 logarithm value then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_p">vfpu_vlog2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_p_partial">vfpu_vlog2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_t">vfpu_vlog2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_t_partial">vfpu_vlog2_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_q">vfpu_vlog2_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vlog2_p"></a><a name="vfpu_vlog2_p_partial"></a>
<a name="vfpu_vlog2_p / vfpu_vlog2_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vlog2_p / vfpu_vlog2_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Logarithm base 2 Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vlog2_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vlog2_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vlog2.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vlog2.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vlog2.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vlog2.p instruction to calculate the base 2 logarithm value then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_s">vfpu_vlog2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_s_partial">vfpu_vlog2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_t">vfpu_vlog2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_t_partial">vfpu_vlog2_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_q">vfpu_vlog2_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vlog2_t"></a><a name="vfpu_vlog2_t_partial"></a>
<a name="vfpu_vlog2_t / vfpu_vlog2_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vlog2_t / vfpu_vlog2_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Logarithm base 2 Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vlog2_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vlog2_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vlog2.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vlog2.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vlog2.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vlog2.t instruction to calculate the base 2 logarithm value then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_s">vfpu_vlog2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_s_partial">vfpu_vlog2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_p">vfpu_vlog2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_p_partial">vfpu_vlog2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_q">vfpu_vlog2_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vlog2_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vlog2_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Logarithm base 2 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vlog2_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vlog2.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vlog2.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vlog2.q instruction to calculate the base 2 logarithm value then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_s">vfpu_vlog2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_s_partial">vfpu_vlog2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_p">vfpu_vlog2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_p_partial">vfpu_vlog2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_t">vfpu_vlog2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vlog2_t_partial">vfpu_vlog2_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmax_s"></a><a name="vfpu_vmax_s_partial"></a>
<a name="vfpu_vmax_s / vfpu_vmax_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmax_s / vfpu_vmax_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Maximum Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmax_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmax_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmax.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmax.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmax.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmax.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmax.s instruction to calculate the maximum value then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_p">vfpu_vmax_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_p_partial">vfpu_vmax_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_t">vfpu_vmax_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_t_partial">vfpu_vmax_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_q">vfpu_vmax_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_q_partial">vfpu_vmax_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmax_p"></a><a name="vfpu_vmax_p_partial"></a>
<a name="vfpu_vmax_p / vfpu_vmax_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmax_p / vfpu_vmax_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Maximum Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmax_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmax_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmax.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmax.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmax.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmax.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmax.p instruction to calculate the maximum value then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_s">vfpu_vmax_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_s_partial">vfpu_vmax_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_t">vfpu_vmax_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_t_partial">vfpu_vmax_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_q">vfpu_vmax_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_q_partial">vfpu_vmax_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmax_t"></a><a name="vfpu_vmax_t_partial"></a>
<a name="vfpu_vmax_t / vfpu_vmax_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmax_t / vfpu_vmax_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Maximum Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmax_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmax_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmax.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmax.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmax.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmax.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmax.t instruction to calculate the maximum value then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_s">vfpu_vmax_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_s_partial">vfpu_vmax_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_p">vfpu_vmax_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_p_partial">vfpu_vmax_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_q">vfpu_vmax_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_q_partial">vfpu_vmax_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmax_q"></a><a name="vfpu_vmax_q_partial"></a>
<a name="vfpu_vmax_q / vfpu_vmax_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmax_q / vfpu_vmax_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Maximum Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmax_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmax_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmax.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmax.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmax.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmax.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmax.q instruction to calculate the maximum value then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_s">vfpu_vmax_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_s_partial">vfpu_vmax_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_p">vfpu_vmax_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_p_partial">vfpu_vmax_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_t">vfpu_vmax_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmax_t_partial">vfpu_vmax_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmin_s"></a><a name="vfpu_vmin_s_partial"></a>
<a name="vfpu_vmin_s / vfpu_vmin_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmin_s / vfpu_vmin_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Minimum Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmin_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmin_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmin.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmin.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmin.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmin.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmin.s instruction to calculate the minimum value then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_p">vfpu_vmin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_p_partial">vfpu_vmin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_t">vfpu_vmin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_t_partial">vfpu_vmin_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_q">vfpu_vmin_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_q_partial">vfpu_vmin_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmin_p"></a><a name="vfpu_vmin_p_partial"></a>
<a name="vfpu_vmin_p / vfpu_vmin_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmin_p / vfpu_vmin_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Minimum Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmin_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmin_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmin.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmin.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmin.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmin.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmin.p instruction to calculate the minimum value then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_s">vfpu_vmin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_s_partial">vfpu_vmin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_t">vfpu_vmin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_t_partial">vfpu_vmin_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_q">vfpu_vmin_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_q_partial">vfpu_vmin_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmin_t"></a><a name="vfpu_vmin_t_partial"></a>
<a name="vfpu_vmin_t / vfpu_vmin_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmin_t / vfpu_vmin_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Minimum Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmin_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmin_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmin.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmin.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmin.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmin.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmin.t instruction to calculate the minimum value then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_s">vfpu_vmin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_s_partial">vfpu_vmin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_p">vfpu_vmin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_p_partial">vfpu_vmin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_q">vfpu_vmin_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_q_partial">vfpu_vmin_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmin_q"></a><a name="vfpu_vmin_q_partial"></a>
<a name="vfpu_vmin_q / vfpu_vmin_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmin_q / vfpu_vmin_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Minimum Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmin_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmin_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmin.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmin.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmin.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmin.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmin.q instruction to calculate the minimum value then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_s">vfpu_vmin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_s_partial">vfpu_vmin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_p">vfpu_vmin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_p_partial">vfpu_vmin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_t">vfpu_vmin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmin_t_partial">vfpu_vmin_t_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmidt_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmidt_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Identity Quad x Quad Matrix<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_vmidt_q</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_VD_M and VFPU_VD_E are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V16SF mode type value that contains the vd operand of the vmidt.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmidt.q instruction to generate a unit matrix then outputs a 4D matrix value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmone_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmone_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>One Quad x Quad Matrix<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_vmone_q</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_VD_M and VFPU_VD_E are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V16SF mode type value that contains the vd operand of the vmone.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmone.q instruction to generate a matrix in which all elements are 1 then outputs a 4D matrix value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmmov_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmmov_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Move Quad x Quad Matrix<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_vmmov_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmmov.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_VS_M, VFPU_VS_E, VFPU_VD_M, and VFPU_VD_E are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V16SF mode type value that contains the vd operand of the vmmov.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmmov.q instruction to transfer registers then outputs a 4D matrix value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmmul_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmmul_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Multiply Quad x Quad Matrix<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_vmmul_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmmul.q instruction &nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmmul.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_VS_M, VFPU_VS_E, VFPU_VT_M, VFPU_VT_E, &nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_VD_M, and VFPU_VD_E are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V16SF mode type value that contains the vd operand of the vmmul.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmmul.q instruction to calculate a 4D matrix product then outputs a 4D matrix value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmmul_q">vfpu_vcmmul_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrmmul_q">vfpu_vrmmul_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmov_s"></a><a name="vfpu_vmov_s_partial"></a>
<a name="vfpu_vmov_s / vfpu_vmov_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmov_s / vfpu_vmov_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Move Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmov_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmov_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmov.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmov.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmov.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmov.s instruction to perform a register transfer then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_p">vfpu_vmov_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_p_partial">vfpu_vmov_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_t">vfpu_vmov_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_t_partial">vfpu_vmov_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_q">vfpu_vmov_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_q_partial">vfpu_vmov_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmov_p"></a><a name="vfpu_vmov_p_partial"></a>
<a name="vfpu_vmov_p / vfpu_vmov_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmov_p / vfpu_vmov_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Move Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmov_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmov_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmov.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmov.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmov.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmov.p instruction to perform a register transfer then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_s">vfpu_vmov_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_s_partial">vfpu_vmov_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_t">vfpu_vmov_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_t_partial">vfpu_vmov_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_q">vfpu_vmov_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_q_partial">vfpu_vmov_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmov_t"></a><a name="vfpu_vmov_t_partial"></a>
<a name="vfpu_vmov_t / vfpu_vmov_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmov_t / vfpu_vmov_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Move Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmov_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmov_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmov.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmov.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmov.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmov.t instruction to perform a register transfer then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_s">vfpu_vmov_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_s_partial">vfpu_vmov_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_p">vfpu_vmov_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_p_partial">vfpu_vmov_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_q">vfpu_vmov_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_q_partial">vfpu_vmov_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmov_q"></a><a name="vfpu_vmov_q_partial"></a>
<a name="vfpu_vmov_q / vfpu_vmov_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmov_q / vfpu_vmov_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Move Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmov_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmov_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmov.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmov.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmov.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmov.q instruction to perform a register transfer then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_s">vfpu_vmov_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_s_partial">vfpu_vmov_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_p">vfpu_vmov_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_p_partial">vfpu_vmov_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_t">vfpu_vmov_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmov_t_partial">vfpu_vmov_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmul_s"></a><a name="vfpu_vmul_s_partial"></a>
<a name="vfpu_vmul_s / vfpu_vmul_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmul_s / vfpu_vmul_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Multiply Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmul_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmul_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmul.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmul.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmul.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmul.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmul.s instruction to calculate the product then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_p">vfpu_vmul_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_p_partial">vfpu_vmul_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_t">vfpu_vmul_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_t_partial">vfpu_vmul_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_q">vfpu_vmul_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_q_partial">vfpu_vmul_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmul_p"></a><a name="vfpu_vmul_p_partial"></a>
<a name="vfpu_vmul_p / vfpu_vmul_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmul_p / vfpu_vmul_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Multiply Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmul_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmul_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmul.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmul.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmul.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmul.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmul.p instruction to calculate the product then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_s">vfpu_vmul_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_s_partial">vfpu_vmul_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_t">vfpu_vmul_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_t_partial">vfpu_vmul_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_q">vfpu_vmul_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_q_partial">vfpu_vmul_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmul_t"></a><a name="vfpu_vmul_t_partial"></a>
<a name="vfpu_vmul_t / vfpu_vmul_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmul_t / vfpu_vmul_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Multiply Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmul_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmul_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmul.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmul.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmul.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmul.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmul.t instruction to calculate the product then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_s">vfpu_vmul_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_s_partial">vfpu_vmul_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_p">vfpu_vmul_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_p_partial">vfpu_vmul_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_q">vfpu_vmul_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_q_partial">vfpu_vmul_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmul_q"></a><a name="vfpu_vmul_q_partial"></a>
<a name="vfpu_vmul_q / vfpu_vmul_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmul_q / vfpu_vmul_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Multiply Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmul_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vmul_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vmul.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vmul.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vmul.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vmul.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmul.q instruction to calculate the product then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_s">vfpu_vmul_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_s_partial">vfpu_vmul_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_p">vfpu_vmul_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_p_partial">vfpu_vmul_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_t">vfpu_vmul_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmul_t_partial">vfpu_vmul_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vmzero_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vmzero_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Zero Quad x Quad Matrix<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_vmzero_q</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_VD_M and VFPU_VD_E are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V16SF mode type value that contains the vd operand of the vmzero.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vmzero.q instruction to generate the zero matrix then outputs a 4D matrix value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vneg_s"></a><a name="vfpu_vneg_s_partial"></a>
<a name="vfpu_vneg_s / vfpu_vneg_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vneg_s / vfpu_vneg_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negate Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vneg_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vneg_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vneg.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vneg.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vneg.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vneg.s instruction to calculate the sign inverted value then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_p">vfpu_vneg_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_p_partial">vfpu_vneg_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_t">vfpu_vneg_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_t_partial">vfpu_vneg_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_q">vfpu_vneg_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_q_partial">vfpu_vneg_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vneg_p"></a><a name="vfpu_vneg_p_partial"></a>
<a name="vfpu_vneg_p / vfpu_vneg_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vneg_p / vfpu_vneg_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negate Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vneg_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vneg_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vneg.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vneg.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vneg.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vneg.p instruction to calculate the sign inverted value then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_s">vfpu_vneg_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_s_partial">vfpu_vneg_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_t">vfpu_vneg_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_t_partial">vfpu_vneg_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_q">vfpu_vneg_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_q_partial">vfpu_vneg_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vneg_t"></a><a name="vfpu_vneg_t_partial"></a>
<a name="vfpu_vneg_t / vfpu_vneg_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vneg_t / vfpu_vneg_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negate Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vneg_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vneg_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vneg.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vneg.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vneg.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vneg.t instruction to calculate the sign inverted value then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_s">vfpu_vneg_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_s_partial">vfpu_vneg_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_p">vfpu_vneg_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_p_partial">vfpu_vneg_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_q">vfpu_vneg_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_q_partial">vfpu_vneg_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vneg_q"></a><a name="vfpu_vneg_q_partial"></a>
<a name="vfpu_vneg_q / vfpu_vneg_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vneg_q / vfpu_vneg_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negate Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vneg_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vneg_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vneg.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vneg.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vneg.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vneg.q instruction to calculate the sign inverted value then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_s">vfpu_vneg_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_s_partial">vfpu_vneg_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_p">vfpu_vneg_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_p_partial">vfpu_vneg_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_t">vfpu_vneg_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vneg_t_partial">vfpu_vneg_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vnrcp_s"></a><a name="vfpu_vnrcp_s_partial"></a>
<a name="vfpu_vnrcp_s / vfpu_vnrcp_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vnrcp_s / vfpu_vnrcp_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negative Reciprocal Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnrcp_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnrcp_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vnrcp.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vnrcp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vnrcp.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vnrcp.s instruction to calculate the negative reciprocal then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_p">vfpu_vnrcp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_p_partial">vfpu_vnrcp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_t">vfpu_vnrcp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_t_partial">vfpu_vnrcp_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_q">vfpu_vnrcp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vnrcp_p"></a><a name="vfpu_vnrcp_p_partial"></a>
<a name="vfpu_vnrcp_p / vfpu_vnrcp_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vnrcp_p / vfpu_vnrcp_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negative Reciprocal Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnrcp_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnrcp_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vnrcp.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vnrcp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vnrcp.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vnrcp.p instruction to calculate the negative reciprocal then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_s">vfpu_vnrcp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_s_partial">vfpu_vnrcp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_t">vfpu_vnrcp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_t_partial">vfpu_vnrcp_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_q">vfpu_vnrcp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vnrcp_t"></a><a name="vfpu_vnrcp_t_partial"></a>
<a name="vfpu_vnrcp_t / vfpu_vnrcp_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vnrcp_t / vfpu_vnrcp_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negative Reciprocal Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnrcp_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnrcp_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vnrcp.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vnrcp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vnrcp.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vnrcp.t instruction to calculate the negative reciprocal then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_s">vfpu_vnrcp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_s_partial">vfpu_vnrcp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_p">vfpu_vnrcp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_p_partial">vfpu_vnrcp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_q">vfpu_vnrcp_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vnrcp_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vnrcp_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negative Reciprocal Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnrcp_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vnrcp.q instruction &nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vnrcp.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vnrcp.q instruction to calculate the negative reciprocal then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_s">vfpu_vnrcp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_s_partial">vfpu_vnrcp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_p">vfpu_vnrcp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_p_partial">vfpu_vnrcp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_t">vfpu_vnrcp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnrcp_t_partial">vfpu_vnrcp_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vnsin_s"></a><a name="vfpu_vnsin_s_partial"></a>
<a name="vfpu_vnsin_s / vfpu_vnsin_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vnsin_s / vfpu_vnsin_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negative Sine Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnsin_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnsin_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vnsin.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vnsin.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vnsin.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vnsin.s instruction to calculate the negative sine then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_p">vfpu_vnsin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_p_partial">vfpu_vnsin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_t">vfpu_vnsin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_t_partial">vfpu_vnsin_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_q">vfpu_vnsin_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vnsin_p"></a><a name="vfpu_vnsin_p_partial"></a>
<a name="vfpu_vnsin_p / vfpu_vnsin_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vnsin_p / vfpu_vnsin_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negative Sine Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnsin_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnsin_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vnsin.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vnsin.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vnsin.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vnsin.p instruction to calculate the negative sine then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_s">vfpu_vnsin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_s_partial">vfpu_vnsin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_t">vfpu_vnsin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_t_partial">vfpu_vnsin_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_q">vfpu_vnsin_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vnsin_t"></a><a name="vfpu_vnsin_t_partial"></a>
<a name="vfpu_vnsin_t / vfpu_vnsin_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vnsin_t / vfpu_vnsin_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negative Sine Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnsin_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnsin_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vnsin.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vnsin.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vnsin.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vnsin.t instruction to calculate the negative sine then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_s">vfpu_vnsin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_s_partial">vfpu_vnsin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_p">vfpu_vnsin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_p_partial">vfpu_vnsin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_q">vfpu_vnsin_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vnsin_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vnsin_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Negative Sine Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vnsin_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vnsin.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vnsin.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vnsin.q instruction to calculate the negative sine then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_s">vfpu_vnsin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_s_partial">vfpu_vnsin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_p">vfpu_vnsin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_p_partial">vfpu_vnsin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_t">vfpu_vnsin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vnsin_t_partial">vfpu_vnsin_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vocp_s"></a><a name="vfpu_vocp_s_partial"></a>
<a name="vfpu_vocp_s / vfpu_vocp_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vocp_s / vfpu_vocp_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>One's Complement Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vocp_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vocp_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vocp.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vocp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vocp.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vocp.s instruction to calculate the one's complement then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_p">vfpu_vocp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_p_partial">vfpu_vocp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_t">vfpu_vocp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_t_partial">vfpu_vocp_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_q">vfpu_vocp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vocp_p"></a><a name="vfpu_vocp_p_partial"></a>
<a name="vfpu_vocp_p / vfpu_vocp_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vocp_p / vfpu_vocp_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>One's Complement Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vocp_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vocp_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vocp.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vocp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vocp.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vocp.p instruction to calculate the one's complement then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_s">vfpu_vocp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_s_partial">vfpu_vocp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_t">vfpu_vocp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_t_partial">vfpu_vocp_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_q">vfpu_vocp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vocp_t"></a><a name="vfpu_vocp_t_partial"></a>
<a name="vfpu_vocp_t / vfpu_vocp_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vocp_t / vfpu_vocp_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>One's Complement Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vocp_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vocp_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vocp.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vocp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vocp.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vocp.t instruction to calculate the one's complement then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_s">vfpu_vocp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_s_partial">vfpu_vocp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_p">vfpu_vocp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_p_partial">vfpu_vocp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_q">vfpu_vocp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vocp_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vocp_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>One's Complement Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vocp_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vocp.q instruction &nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vocp.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vocp.q instruction to calculate the one's complement then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_s">vfpu_vocp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_s_partial">vfpu_vocp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_p">vfpu_vocp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_p_partial">vfpu_vocp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_t">vfpu_vocp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vocp_t_partial">vfpu_vocp_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vone_s"></a><a name="vfpu_vone_s_partial"></a>
<a name="vfpu_vone_s / vfpu_vone_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vone_s / vfpu_vone_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set One Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vone_s</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vone_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vone.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vone.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vone.s instruction to generate the 1D 1.0 value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_p">vfpu_vone_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_p_partial">vfpu_vone_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_t">vfpu_vone_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_t_partial">vfpu_vone_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_q">vfpu_vone_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_q_partial">vfpu_vone_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vone_p"></a><a name="vfpu_vone_p_partial"></a>
<a name="vfpu_vone_p / vfpu_vone_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vone_p / vfpu_vone_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set One Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vone_p</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vone_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vone.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vone.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vone.p instruction to generate the 2D 1.0 value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_s">vfpu_vone_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_s_partial">vfpu_vone_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_t">vfpu_vone_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_t_partial">vfpu_vone_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_q">vfpu_vone_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_q_partial">vfpu_vone_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vone_t"></a><a name="vfpu_vone_t_partial"></a>
<a name="vfpu_vone_t / vfpu_vone_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vone_t / vfpu_vone_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set One Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vone_t</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vone_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vone.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vone.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vone.t instruction to generate the 3D 1.0 value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_s">vfpu_vone_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_s_partial">vfpu_vone_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_p">vfpu_vone_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_p_partial">vfpu_vone_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_q">vfpu_vone_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_q_partial">vfpu_vone_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vone_q"></a><a name="vfpu_vone_q_partial"></a>
<a name="vfpu_vone_q / vfpu_vone_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vone_q / vfpu_vone_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set One Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vone_q</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vone_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vone.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vone.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vone.q instruction to generate the 4D 1.0 value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_s">vfpu_vone_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_s_partial">vfpu_vone_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_p">vfpu_vone_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_p_partial">vfpu_vone_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_t">vfpu_vone_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vone_t_partial">vfpu_vone_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vqmul_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vqmul_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Quaternion Multiply Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vqmul_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vqmul.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vqmul.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vqmul.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vqmul.q instruction to calculate the quaternion product then outputs a 4D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrcp_s"></a><a name="vfpu_vrcp_s_partial"></a>
<a name="vfpu_vrcp_s / vfpu_vrcp_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrcp_s / vfpu_vrcp_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrcp_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrcp_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrcp.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrcp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrcp.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrcp.s instruction to calculate the reciprocal then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_p">vfpu_vrcp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_p_partial">vfpu_vrcp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_t">vfpu_vrcp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_t_partial">vfpu_vrcp_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_q">vfpu_vrcp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrcp_p"></a><a name="vfpu_vrcp_p_partial"></a>
<a name="vfpu_vrcp_p / vfpu_vrcp_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrcp_p / vfpu_vrcp_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrcp_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrcp_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrcp.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrcp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrcp.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrcp.p instruction to calculate the reciprocal then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_s">vfpu_vrcp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_s_partial">vfpu_vrcp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_t">vfpu_vrcp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_t_partial">vfpu_vrcp_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_q">vfpu_vrcp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrcp_t"></a><a name="vfpu_vrcp_t_partial"></a>
<a name="vfpu_vrcp_t / vfpu_vrcp_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrcp_t / vfpu_vrcp_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrcp_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrcp_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrcp.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrcp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrcp.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrcp.t instruction to calculate the reciprocal then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_s">vfpu_vrcp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_s_partial">vfpu_vrcp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_p">vfpu_vrcp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_p_partial">vfpu_vrcp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_q">vfpu_vrcp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrcp_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrcp_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrcp_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrcp.q instruction &nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrcp.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrcp.q instruction to calculate the reciprocal then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_s">vfpu_vrcp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_s_partial">vfpu_vrcp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_p">vfpu_vrcp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_p_partial">vfpu_vrcp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_t">vfpu_vrcp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrcp_t_partial">vfpu_vrcp_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrexp2_s"></a><a name="vfpu_vrexp2_s_partial"></a>
<a name="vfpu_vrexp2_s / vfpu_vrexp2_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrexp2_s / vfpu_vrexp2_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Exponential base 2 Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrexp2_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrexp2_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrexp2.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrexp2.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrexp2.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrexp2.s instruction to calculate the reciprocal of the base 2 exponential value then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_p">vfpu_vrexp2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_p_partial">vfpu_vrexp2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_t">vfpu_vrexp2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_t_partial">vfpu_vrexp2_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_q">vfpu_vrexp2_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrexp2_p"></a><a name="vfpu_vrexp2_p_partial"></a>
<a name="vfpu_vrexp2_p / vfpu_vrexp2_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrexp2_p / vfpu_vrexp2_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Exponential base 2 Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrexp2_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrexp2_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrexp2.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrexp2.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrexp2.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrexp2.p instruction to calculate the reciprocal of the base 2 exponential value then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_s">vfpu_vrexp2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_s_partial">vfpu_vrexp2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_t">vfpu_vrexp2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_t_partial">vfpu_vrexp2_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_q">vfpu_vrexp2_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrexp2_t"></a><a name="vfpu_vrexp2_t_partial"></a>
<a name="vfpu_vrexp2_t / vfpu_vrexp2_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrexp2_t / vfpu_vrexp2_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Exponential base 2 Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrexp2_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrexp2_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrexp2.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrexp2.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrexp2.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrexp2.t instruction to calculate the reciprocal of the base 2 exponential value then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_s">vfpu_vrexp2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_s_partial">vfpu_vrexp2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_p">vfpu_vrexp2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_p_partial">vfpu_vrexp2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_q">vfpu_vrexp2_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrexp2_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrexp2_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Exponential base 2 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrexp2_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrexp2.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrexp2.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrexp2.q instruction to calculate the reciprocal of the base 2 exponential value then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_s">vfpu_vrexp2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_s_partial">vfpu_vrexp2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_p">vfpu_vrexp2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_p_partial">vfpu_vrexp2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_t">vfpu_vrexp2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrexp2_t_partial">vfpu_vrexp2_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndf1_s"></a><a name="vfpu_vrndf1_s_partial"></a>
<a name="vfpu_vrndf1_s / vfpu_vrndf1_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndf1_s / vfpu_vrndf1_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Floating Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf1_s</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf1_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndf1.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndf1.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrdnf1.s instruction to generate a 1D random number. The range of values that are generated is [1.0:2.0].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_p">vfpu_vrndf1_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_p_partial">vfpu_vrndf1_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_t">vfpu_vrndf1_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_t_partial">vfpu_vrndf1_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_q">vfpu_vrndf1_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_q_partial">vfpu_vrndf1_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndf1_p"></a><a name="vfpu_vrndf1_p_partial"></a>
<a name="vfpu_vrndf1_p / vfpu_vrndf1_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndf1_p / vfpu_vrndf1_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Floating Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf1_p</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf1_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndf1.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndf1.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrndf1.p instruction to generate a 2D random number. The range of values that are generated is [1.0:2.0].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_s">vfpu_vrndf1_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_s_partial">vfpu_vrndf1_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_t">vfpu_vrndf1_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_t_partial">vfpu_vrndf1_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_q">vfpu_vrndf1_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_q_partial">vfpu_vrndf1_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndf1_t"></a><a name="vfpu_vrndf1_t_partial"></a>
<a name="vfpu_vrndf1_t / vfpu_vrndf1_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndf1_t / vfpu_vrndf1_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Floating Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf1_t</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf1_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndf1.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndf1.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrndf1.t instruction to generate a 3D random number. The range of values that are generated is [1.0:2.0].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_s">vfpu_vrndf1_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_s_partial">vfpu_vrndf1_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_p">vfpu_vrndf1_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_p_partial">vfpu_vrndf1_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_q">vfpu_vrndf1_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_q_partial">vfpu_vrndf1_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndf1_q"></a><a name="vfpu_vrndf1_q_partial"></a>
<a name="vfpu_vrndf1_q / vfpu_vrndf1_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndf1_q / vfpu_vrndf1_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Floating Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf1_q</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf1_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndf1.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndf1.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrndf1.q instruction to generate a 4D random number. The range of values that are generated is [1.0:2.0].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_s">vfpu_vrndf1_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_s_partial">vfpu_vrndf1_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_p">vfpu_vrndf1_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_p_partial">vfpu_vrndf1_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_t">vfpu_vrndf1_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf1_t_partial">vfpu_vrndf1_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndf2_s"></a><a name="vfpu_vrndf2_s_partial"></a>
<a name="vfpu_vrndf2_s / vfpu_vrndf2_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndf2_s / vfpu_vrndf2_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Floating Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf2_s</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf2_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndf2.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndf2.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrndf2.s instruction to generate a 1D random number. The range of values that are generated is [2.0:4.0].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_p">vfpu_vrndf2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_p_partial">vfpu_vrndf2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_t">vfpu_vrndf2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_t_partial">vfpu_vrndf2_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_q">vfpu_vrndf2_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_q_partial">vfpu_vrndf2_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndf2_p"></a><a name="vfpu_vrndf2_p_partial"></a>
<a name="vfpu_vrndf2_p / vfpu_vrndf2_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndf2_p / vfpu_vrndf2_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Floating Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf2_p</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf2_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndf2.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndf2.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrndf2.p instruction to generate a 2D random number. The range of values that are generated is [2.0:4.0].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_s">vfpu_vrndf2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_s_partial">vfpu_vrndf2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_t">vfpu_vrndf2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_t_partial">vfpu_vrndf2_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_q">vfpu_vrndf2_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_q_partial">vfpu_vrndf2_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndf2_t"></a><a name="vfpu_vrndf2_t_partial"></a>
<a name="vfpu_vrndf2_t / vfpu_vrndf2_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndf2_t / vfpu_vrndf2_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Floating Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf2_t</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf2_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndf2.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndf2.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrndf2.t instruction to generate a 3D random number. The range of values that are generated is [2.0:4.0].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_s">vfpu_vrndf2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_s_partial">vfpu_vrndf2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_p">vfpu_vrndf2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_p_partial">vfpu_vrndf2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_q">vfpu_vrndf2_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_q_partial">vfpu_vrndf2_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndf2_q"></a><a name="vfpu_vrndf2_q_partial"></a>
<a name="vfpu_vrndf2_q / vfpu_vrndf2_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndf2_q / vfpu_vrndf2_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Floating Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf2_q</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndf2_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndf2.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndf2.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrndf2.q instruction to generate a 4D random number. The range of values that are generated is [2.0:4.0].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_s">vfpu_vrndf2_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_s_partial">vfpu_vrndf2_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_p">vfpu_vrndf2_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_p_partial">vfpu_vrndf2_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_t">vfpu_vrndf2_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndf2_t_partial">vfpu_vrndf2_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndi_s"></a><a name="vfpu_vrndi_s_partial"></a>
<a name="vfpu_vrndi_s / vfpu_vrndi_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndi_s / vfpu_vrndi_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Integer Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndi_s</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndi_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndi.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndi.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrndi.s instruction to generate a 1D integer random number. The range of values that are generated is [0x00000000:0xFFFFFFFF].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_p">vfpu_vrndi_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_p_partial">vfpu_vrndi_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_t">vfpu_vrndi_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_t_partial">vfpu_vrndi_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_q">vfpu_vrndi_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_q_partial">vfpu_vrndi_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndi_p"></a><a name="vfpu_vrndi_p_partial"></a>
<a name="vfpu_vrndi_p / vfpu_vrndi_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndi_p / vfpu_vrndi_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Integer Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndi_p</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndi_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndi.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndi.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrndi.p instruction to generate a 2D integer random number. The range of values that are generated is [0x00000000:0xFFFFFFFF].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_s">vfpu_vrndi_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_s_partial">vfpu_vrndi_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_t">vfpu_vrndi_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_t_partial">vfpu_vrndi_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_q">vfpu_vrndi_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_q_partial">vfpu_vrndi_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndi_t"></a><a name="vfpu_vrndi_t_partial"></a>
<a name="vfpu_vrndi_t / vfpu_vrndi_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndi_t / vfpu_vrndi_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Integer Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndi_t</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndi_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndi.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndi.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrndi.t instruction to generate a 3D integer random number. The range of values that are generated is [0x00000000:0xFFFFFFFF].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_s">vfpu_vrndi_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_s_partial">vfpu_vrndi_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_p">vfpu_vrndi_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_p_partial">vfpu_vrndi_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_q">vfpu_vrndi_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_q_partial">vfpu_vrndi_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrndi_q"></a><a name="vfpu_vrndi_q_partial"></a>
<a name="vfpu_vrndi_q / vfpu_vrndi_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrndi_q / vfpu_vrndi_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Integer Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndi_q</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrndi_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrndi.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrndi.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrndi.q instruction to generate a 4D integer random number. The range of values that are generated is [0x00000000:0xFFFFFFFF].<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_s">vfpu_vrndi_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_s_partial">vfpu_vrndi_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_p">vfpu_vrndi_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_p_partial">vfpu_vrndi_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_t">vfpu_vrndi_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrndi_t_partial">vfpu_vrndi_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrnds_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrnds_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Random Seed Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline void <b>vfpu_vrnds_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrnds.s instruction &nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, and VFPU_VS are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrnds.s instruction to set the pseudo random number seed. <br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrot_p"></a><a name="vfpu_vrot_p_partial"></a>
<a name="vfpu_vrot_p / vfpu_vrot_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrot_p / vfpu_vrot_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Rotator Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrot_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const enum vfpu_rotator_pair <i>_Imm5,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrot_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const enum vfpu_rotator_pair <i>_Imm5,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrot.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrot.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vrot.p instruction (rotator)&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_ROT_P_*are valid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrot.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrot.p instruction to calculate the fragment of the 2x2 rotation matrix then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrot_t">vfpu_vrot_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrot_t_partial">vfpu_vrot_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrot_q">vfpu_vrot_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrot_t"></a><a name="vfpu_vrot_t_partial"></a>
<a name="vfpu_vrot_t / vfpu_vrot_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrot_t / vfpu_vrot_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Rotator Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrot_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const enum vfpu_rotator_triple <i>_Imm5,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrot_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const enum vfpu_rotator_triple <i>_Imm5,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrot.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrot.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vrot.t instruction (rotator)&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_ROT_T_* are valid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrot.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrot.t instruction to calculate the fragment of the 3x3 rotation matrix then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrot_p">vfpu_vrot_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrot_p_partial">vfpu_vrot_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrot_q">vfpu_vrot_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrot_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrot_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Rotator Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrot_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const enum vfpu_rotator_quad <i>_Imm5,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrot.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Imm5</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;imm5 operand of the vrot.q instruction (rotator)&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_ROT_Q_* are valid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrot.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrot.q instruction to calculate the fragment of the 4x4 rotation matrix then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrot_p">vfpu_vrot_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrot_p_partial">vfpu_vrot_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrot_t">vfpu_vrot_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrot_t_partial">vfpu_vrot_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrsq_s"></a><a name="vfpu_vrsq_s_partial"></a>
<a name="vfpu_vrsq_s / vfpu_vrsq_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrsq_s / vfpu_vrsq_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Square Root Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrsq_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrsq_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrsq.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrsq.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrsq.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrsq.s instruction to calculate the reciprocal of the square root then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_p">vfpu_vrsq_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_p_partial">vfpu_vrsq_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_t">vfpu_vrsq_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_t_partial">vfpu_vrsq_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_q">vfpu_vrsq_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrsq_p"></a><a name="vfpu_vrsq_p_partial"></a>
<a name="vfpu_vrsq_p / vfpu_vrsq_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrsq_p / vfpu_vrsq_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Square Root Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrsq_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrsq_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrsq.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrsq.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrsq.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrsq.p instruction to calculate the reciprocal of the square root then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_s">vfpu_vrsq_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_s_partial">vfpu_vrsq_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_t">vfpu_vrsq_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_t_partial">vfpu_vrsq_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_q">vfpu_vrsq_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrsq_t"></a><a name="vfpu_vrsq_t_partial"></a>
<a name="vfpu_vrsq_t / vfpu_vrsq_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrsq_t / vfpu_vrsq_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Square Root Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrsq_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrsq_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vrsq.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrsq.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrsq.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrsq.t instruction to calculate the reciprocal of the square root then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_s">vfpu_vrsq_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_s_partial">vfpu_vrsq_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_p">vfpu_vrsq_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_p_partial">vfpu_vrsq_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_q">vfpu_vrsq_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrsq_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrsq_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Reciprocal Square Root Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrsq_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vrsq.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vrsq.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vrsq.q instruction to calculate the reciprocal of the square root then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_s">vfpu_vrsq_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_s_partial">vfpu_vrsq_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_p">vfpu_vrsq_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_p_partial">vfpu_vrsq_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_t">vfpu_vrsq_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrsq_t_partial">vfpu_vrsq_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vs2i_s"></a><a name="vfpu_vs2i_s_partial"></a>
<a name="vfpu_vs2i_s / vfpu_vs2i_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vs2i_s / vfpu_vs2i_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert to integer from signed short Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vs2i_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vs2i_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vs2i.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vs2i.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>,&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, and &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vs2i.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vs2i.s instruction to unpack two signed 16-bit values into four 32-bit values then outputs a 2D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vs2i_p"></a><a name="vfpu_vs2i_p_partial"></a>
<a name="vfpu_vs2i_p / vfpu_vs2i_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vs2i_p / vfpu_vs2i_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert to integer from signed short Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vs2i_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vs2i_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vs2i.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vs2i.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, and&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vs2i.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vs2i.p instruction to unpack four signed 16-bit values into four 32-bit values then outputs a 4D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsat0_s"></a><a name="vfpu_vsat0_s_partial"></a>
<a name="vfpu_vsat0_s / vfpu_vsat0_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsat0_s / vfpu_vsat0_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Saturate [0.0:1.0] Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat0_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat0_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsat0.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsat0.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsat0.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsat0.s instruction to calculate saturation to the range [0.0:1.0] then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_p">vfpu_vsat0_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_p_partial">vfpu_vsat0_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_t">vfpu_vsat0_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_t_partial">vfpu_vsat0_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_q">vfpu_vsat0_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsat0_p"></a><a name="vfpu_vsat0_p_partial"></a>
<a name="vfpu_vsat0_p / vfpu_vsat0_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsat0_p / vfpu_vsat0_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Saturate [0.0:1.0] Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat0_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat0_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsat0.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsat0.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsat0.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsat0.p instruction to calculate saturation to the range [0.0:1.0] then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_s">vfpu_vsat0_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_s_partial">vfpu_vsat0_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_t">vfpu_vsat0_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_t_partial">vfpu_vsat0_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_q">vfpu_vsat0_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsat0_t"></a><a name="vfpu_vsat0_t_partial"></a>
<a name="vfpu_vsat0_t / vfpu_vsat0_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsat0_t / vfpu_vsat0_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Saturate [0.0:1.0] Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat0_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat0_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsat0.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsat0.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsat0.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsat0.t instruction to calculate saturation to the range [0.0:1.0] then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_s">vfpu_vsat0_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_s_partial">vfpu_vsat0_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_p">vfpu_vsat0_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_p_partial">vfpu_vsat0_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_q">vfpu_vsat0_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsat0_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsat0_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Saturate [0.0:1.0] Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat0_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsat0.q instruction &nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsat0.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsat0.q instruction to calculate saturation to the range [0.0:1.0] then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_s">vfpu_vsat0_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_s_partial">vfpu_vsat0_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_p">vfpu_vsat0_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_p_partial">vfpu_vsat0_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_t">vfpu_vsat0_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat0_t_partial">vfpu_vsat0_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsat1_s"></a><a name="vfpu_vsat1_s_partial"></a>
<a name="vfpu_vsat1_s / vfpu_vsat1_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsat1_s / vfpu_vsat1_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Saturate [-1.0:1.0] Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat1_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat1_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsat1.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsat1.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsat1.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsat1.s instruction to calculate saturation to the range [-1.0:1.0] then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_p">vfpu_vsat1_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_p_partial">vfpu_vsat1_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_t">vfpu_vsat1_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_t_partial">vfpu_vsat1_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_q">vfpu_vsat1_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsat1_p"></a><a name="vfpu_vsat1_p_partial"></a>
<a name="vfpu_vsat1_p / vfpu_vsat1_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsat1_p / vfpu_vsat1_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Saturate [-1.0:1.0] Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat1_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat1_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsat1.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsat1.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsat1.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsat1.p instruction to calculate saturation to the range [-1.0:1.0] then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_s">vfpu_vsat1_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_s_partial">vfpu_vsat1_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_t">vfpu_vsat1_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_t_partial">vfpu_vsat1_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_q">vfpu_vsat1_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsat1_t"></a><a name="vfpu_vsat1_t_partial"></a>
<a name="vfpu_vsat1_t / vfpu_vsat1_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsat1_t / vfpu_vsat1_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Saturate [-1.0:1.0] Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat1_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat1_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsat1.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsat1.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsat1.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsat1.t instruction to calculate saturation to the range [-1.0:1.0] then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_s">vfpu_vsat1_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_s_partial">vfpu_vsat1_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_p">vfpu_vsat1_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_p_partial">vfpu_vsat1_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_q">vfpu_vsat1_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsat1_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsat1_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Saturate [-1.0:1.0] Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsat1_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsat1.q instruction &nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsat1.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsat1.q instruction to calculate saturation to the range [-1.0:1.0] then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_s">vfpu_vsat1_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_s_partial">vfpu_vsat1_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_p">vfpu_vsat1_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_p_partial">vfpu_vsat1_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_t">vfpu_vsat1_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsat1_t_partial">vfpu_vsat1_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsbn_s"></a><a name="vfpu_vsbn_s_partial"></a>
<a name="vfpu_vsbn_s / vfpu_vsbn_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsbn_s / vfpu_vsbn_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ScaleBN Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsbn_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsbn_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsbn.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsbn.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vsbn.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsbn.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsbn.s instruction to perform the scaleBN calculation (change the binary logarithmic scale) then outputs a 1D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsbz_s"></a><a name="vfpu_vsbz_s_partial"></a>
<a name="vfpu_vsbz_s / vfpu_vsbz_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsbz_s / vfpu_vsbz_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ScaleBZ Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsbz_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsbz_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsbz.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsbz.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsbz.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsbz.s instruction to calculate the excess of the [1.0:2.0] interval then outputs a 1D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vscl_p"></a><a name="vfpu_vscl_p_partial"></a>
<a name="vfpu_vscl_p / vfpu_vscl_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vscl_p / vfpu_vscl_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Scale Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscl_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscl_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vscl.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vscl.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vscl.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>/ &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vscl.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vscl.p instruction to calculate the scalar to vector multiplication then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_t">vfpu_vscl_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_t_partial">vfpu_vscl_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_q">vfpu_vscl_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_q_partial">vfpu_vscl_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vscl_t"></a><a name="vfpu_vscl_t_partial"></a>
<a name="vfpu_vscl_t / vfpu_vscl_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vscl_t / vfpu_vscl_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Scale Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscl_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscl_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vscl.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vscl.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vscl.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vscl.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vscl.t instruction to calculate the scalar to vector multiplication then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_p">vfpu_vscl_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_p_partial">vfpu_vscl_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_q">vfpu_vscl_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_q_partial">vfpu_vscl_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vscl_q"></a><a name="vfpu_vscl_q_partial"></a>
<a name="vfpu_vscl_q / vfpu_vscl_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vscl_q / vfpu_vscl_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Scale Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscl_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscl_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vscl.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vscl.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vscl.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vscl.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vscl.q instruction to calculate the scalar to vector multiplication then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_p">vfpu_vscl_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_p_partial">vfpu_vscl_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_t">vfpu_vscl_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscl_t_partial">vfpu_vscl_t_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vscmp_s"></a><a name="vfpu_vscmp_s_partial"></a>
<a name="vfpu_vscmp_s / vfpu_vscmp_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vscmp_s / vfpu_vscmp_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Compare Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscmp_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscmp_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vscmp.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vscmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vscmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vscmp.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vscmp.s instruction to output -1, 0, or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_p">vfpu_vscmp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_p_partial">vfpu_vscmp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_t">vfpu_vscmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_t_partial">vfpu_vscmp_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_q">vfpu_vscmp_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_q_partial">vfpu_vscmp_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vscmp_p"></a><a name="vfpu_vscmp_p_partial"></a>
<a name="vfpu_vscmp_p / vfpu_vscmp_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vscmp_p / vfpu_vscmp_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Compare Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscmp_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscmp_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vscmp.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vscmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vscmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vscmp.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vscmp.p instruction to output -1, 0, or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_s">vfpu_vscmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_s_partial">vfpu_vscmp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_t">vfpu_vscmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_t_partial">vfpu_vscmp_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_q">vfpu_vscmp_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_q_partial">vfpu_vscmp_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vscmp_t"></a><a name="vfpu_vscmp_t_partial"></a>
<a name="vfpu_vscmp_t / vfpu_vscmp_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vscmp_t / vfpu_vscmp_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Compare Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscmp_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscmp_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vscmp.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vscmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vscmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vscmp.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vscmp.t instruction to output -1, 0, or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_s">vfpu_vscmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_s_partial">vfpu_vscmp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_p">vfpu_vscmp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_p_partial">vfpu_vscmp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_q">vfpu_vscmp_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_q_partial">vfpu_vscmp_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vscmp_q"></a><a name="vfpu_vscmp_q_partial"></a>
<a name="vfpu_vscmp_q / vfpu_vscmp_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vscmp_q / vfpu_vscmp_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Compare Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscmp_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vscmp_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vscmp.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vscmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vscmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vscmp.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vscmp.q instruction to output -1, 0, or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_s">vfpu_vscmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_s_partial">vfpu_vscmp_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_p">vfpu_vscmp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_p_partial">vfpu_vscmp_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_t">vfpu_vscmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vscmp_t_partial">vfpu_vscmp_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsge_s"></a><a name="vfpu_vsge_s_partial"></a>
<a name="vfpu_vsge_s / vfpu_vsge_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsge_s / vfpu_vsge_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Greater Equal Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsge_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsge_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsge.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsge.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vsge.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsge.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsge.s instruction to output 0 or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_p">vfpu_vsge_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_p_partial">vfpu_vsge_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_t">vfpu_vsge_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_t_partial">vfpu_vsge_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_q">vfpu_vsge_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_q_partial">vfpu_vsge_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsge_p"></a><a name="vfpu_vsge_p_partial"></a>
<a name="vfpu_vsge_p / vfpu_vsge_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsge_p / vfpu_vsge_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Greater Equal Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsge_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsge_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsge.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsge.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vsge.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsge.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsge.p instruction to output 0 or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_s">vfpu_vsge_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_s_partial">vfpu_vsge_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_t">vfpu_vsge_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_t_partial">vfpu_vsge_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_q">vfpu_vsge_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_q_partial">vfpu_vsge_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsge_t"></a><a name="vfpu_vsge_t_partial"></a>
<a name="vfpu_vsge_t / vfpu_vsge_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsge_t / vfpu_vsge_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Greater Equal Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsge_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsge_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsge.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsge.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vsge.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsge.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsge.t instruction to output 0 or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_s">vfpu_vsge_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_s_partial">vfpu_vsge_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_p">vfpu_vsge_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_p_partial">vfpu_vsge_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_q">vfpu_vsge_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_q_partial">vfpu_vsge_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsge_q"></a><a name="vfpu_vsge_q_partial"></a>
<a name="vfpu_vsge_q / vfpu_vsge_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsge_q / vfpu_vsge_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Greater Equal Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsge_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsge_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsge.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsge.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vsge.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsge.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsge.q instruction to output 0 or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_s">vfpu_vsge_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_s_partial">vfpu_vsge_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_p">vfpu_vsge_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_p_partial">vfpu_vsge_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_t">vfpu_vsge_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsge_t_partial">vfpu_vsge_t_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsgn_s"></a><a name="vfpu_vsgn_s_partial"></a>
<a name="vfpu_vsgn_s / vfpu_vsgn_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsgn_s / vfpu_vsgn_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sign Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsgn_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsgn_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsgn.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsgn.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsgn.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsgn.s instruction to output -1, 0, or 1 according to <i>_Vs</i> sign then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_p">vfpu_vsgn_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_p_partial">vfpu_vsgn_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_t">vfpu_vsgn_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_t_partial">vfpu_vsgn_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_q">vfpu_vsgn_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_q_partial">vfpu_vsgn_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsgn_p"></a><a name="vfpu_vsgn_p_partial"></a>
<a name="vfpu_vsgn_p / vfpu_vsgn_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsgn_p / vfpu_vsgn_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sign Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsgn_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsgn_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsgn.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsgn.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsgn.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsgn.p instruction to output -1, 0, or 1 according to <i>_Vs</i> sign then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_s">vfpu_vsgn_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_s_partial">vfpu_vsgn_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_t">vfpu_vsgn_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_t_partial">vfpu_vsgn_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_q">vfpu_vsgn_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_q_partial">vfpu_vsgn_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsgn_t"></a><a name="vfpu_vsgn_t_partial"></a>
<a name="vfpu_vsgn_t / vfpu_vsgn_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsgn_t / vfpu_vsgn_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sign Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsgn_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsgn_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsgn.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsgn.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsgn.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsgn.t instruction to output -1, 0, or 1 according to <i>_Vs</i> sign then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_s">vfpu_vsgn_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_s_partial">vfpu_vsgn_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_p">vfpu_vsgn_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_p_partial">vfpu_vsgn_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_q">vfpu_vsgn_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_q_partial">vfpu_vsgn_q_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsgn_q"></a><a name="vfpu_vsgn_q_partial"></a>
<a name="vfpu_vsgn_q / vfpu_vsgn_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsgn_q / vfpu_vsgn_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sign Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsgn_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsgn_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsgn.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsgn.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsgn.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsgn.q instruction to output -1, 0, or 1 according to <i>_Vs</i> sign then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_s">vfpu_vsgn_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_s_partial">vfpu_vsgn_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_p">vfpu_vsgn_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_p_partial">vfpu_vsgn_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_t">vfpu_vsgn_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsgn_t_partial">vfpu_vsgn_t_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsin_s"></a><a name="vfpu_vsin_s_partial"></a>
<a name="vfpu_vsin_s / vfpu_vsin_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsin_s / vfpu_vsin_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sine Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsin_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsin_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsin.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsin.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsin.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsin.s instruction to calculate the sine then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_p">vfpu_vsin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_p_partial">vfpu_vsin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_t">vfpu_vsin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_t_partial">vfpu_vsin_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_q">vfpu_vsin_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsin_p"></a><a name="vfpu_vsin_p_partial"></a>
<a name="vfpu_vsin_p / vfpu_vsin_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsin_p / vfpu_vsin_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sine Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsin_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsin_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsin.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsin.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsin.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsin.p instruction to calculate the sine then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_s">vfpu_vsin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_s_partial">vfpu_vsin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_t">vfpu_vsin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_t_partial">vfpu_vsin_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_q">vfpu_vsin_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsin_t"></a><a name="vfpu_vsin_t_partial"></a>
<a name="vfpu_vsin_t / vfpu_vsin_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsin_t / vfpu_vsin_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sine Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsin_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsin_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsin.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsin.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsin.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsin.t instruction to calculate the sine then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_s">vfpu_vsin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_s_partial">vfpu_vsin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_p">vfpu_vsin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_p_partial">vfpu_vsin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_q">vfpu_vsin_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsin_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsin_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sine Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsin_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsin.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsin.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsin.q instruction to calculate the sine then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_s">vfpu_vsin_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_s_partial">vfpu_vsin_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_p">vfpu_vsin_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_p_partial">vfpu_vsin_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_t">vfpu_vsin_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsin_t_partial">vfpu_vsin_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vslt_s"></a><a name="vfpu_vslt_s_partial"></a>
<a name="vfpu_vslt_s / vfpu_vslt_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vslt_s / vfpu_vslt_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Less Than Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vslt_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vslt_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vslt.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vslt.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vslt.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vslt.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vslt.s instruction to output 0 or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_p">vfpu_vslt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_p_partial">vfpu_vslt_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_t">vfpu_vslt_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_t_partial">vfpu_vslt_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_q">vfpu_vslt_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_q_partial">vfpu_vslt_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vslt_p"></a><a name="vfpu_vslt_p_partial"></a>
<a name="vfpu_vslt_p / vfpu_vslt_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vslt_p / vfpu_vslt_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Less Than Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vslt_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vslt_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vslt.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vslt.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vslt.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vslt.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vslt.p instruction to output 0 or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_s">vfpu_vslt_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_s_partial">vfpu_vslt_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_t">vfpu_vslt_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_t_partial">vfpu_vslt_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_q">vfpu_vslt_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_q_partial">vfpu_vslt_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vslt_t"></a><a name="vfpu_vslt_t_partial"></a>
<a name="vfpu_vslt_t / vfpu_vslt_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vslt_t / vfpu_vslt_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Less Than Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vslt_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vslt_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vslt.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vslt.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vslt.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vslt.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vslt.t instruction to output 0 or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_s">vfpu_vslt_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_s_partial">vfpu_vslt_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_p">vfpu_vslt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_p_partial">vfpu_vslt_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_q">vfpu_vslt_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_q_partial">vfpu_vslt_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vslt_q"></a><a name="vfpu_vslt_q_partial"></a>
<a name="vfpu_vslt_q / vfpu_vslt_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vslt_q / vfpu_vslt_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Less Than Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vslt_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vslt_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vslt.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vslt.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vslt.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vslt.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vslt.q instruction to output 0 or 1 according to the result when <i>_Vs</i> and <i>_Vt</i> are compared then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_s">vfpu_vslt_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_s_partial">vfpu_vslt_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_p">vfpu_vslt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_p_partial">vfpu_vslt_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_t">vfpu_vslt_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vslt_t_partial">vfpu_vslt_t_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsocp_s"></a><a name="vfpu_vsocp_s_partial"></a>
<a name="vfpu_vsocp_s / vfpu_vsocp_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsocp_s / vfpu_vsocp_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Saturate and One's Complement Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsocp_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsocp_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsocp.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsocp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsocp.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsocp.s instruction to calculate one's complement value of <i>_Vs</i> then saturation to the range [0.0:1.0] then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsocp_p">vfpu_vsocp_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsocp_p_partial">vfpu_vsocp_p_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsocp_p"></a><a name="vfpu_vsocp_p_partial"></a>
<a name="vfpu_vsocp_p / vfpu_vsocp_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsocp_p / vfpu_vsocp_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Saturate and One's Complement Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsocp_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsocp_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsocp.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsocp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsocp.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsocp.p instruction to calculate one's complement value of <i>_Vs</i> then saturation to the range [0.0:1.0] then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsocp_s">vfpu_vsocp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsocp_s_partial">vfpu_vsocp_s_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsqrt_s"></a><a name="vfpu_vsqrt_s_partial"></a>
<a name="vfpu_vsqrt_s / vfpu_vsqrt_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsqrt_s / vfpu_vsqrt_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Square Root Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsqrt_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsqrt_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsqrt.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsqrt.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsqrt.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsqrt.s instruction to calculate the square root then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_p">vfpu_vsqrt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_p_partial">vfpu_vsqrt_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_t">vfpu_vsqrt_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_t_partial">vfpu_vsqrt_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_q">vfpu_vsqrt_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsqrt_p"></a><a name="vfpu_vsqrt_p_partial"></a>
<a name="vfpu_vsqrt_p / vfpu_vsqrt_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsqrt_p / vfpu_vsqrt_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Square Root Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsqrt_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsqrt_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsqrt.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsqrt.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsqrt.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsqrt.p instruction to calculate the square root then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_s">vfpu_vsqrt_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_s_partial">vfpu_vsqrt_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_t">vfpu_vsqrt_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_t_partial">vfpu_vsqrt_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_q">vfpu_vsqrt_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsqrt_t"></a><a name="vfpu_vsqrt_t_partial"></a>
<a name="vfpu_vsqrt_t / vfpu_vsqrt_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsqrt_t / vfpu_vsqrt_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Square Root Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsqrt_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsqrt_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsqrt.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsqrt.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsqrt.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsqrt.t instruction to calculate the square root then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_s">vfpu_vsqrt_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_s_partial">vfpu_vsqrt_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_p">vfpu_vsqrt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_p_partial">vfpu_vsqrt_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_q">vfpu_vsqrt_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsqrt_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsqrt_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Square Root Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsqrt_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsqrt.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsqrt.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsqrt.q instruction to calculate the square root then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_s">vfpu_vsqrt_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_s_partial">vfpu_vsqrt_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_p">vfpu_vsqrt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_p_partial">vfpu_vsqrt_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_t">vfpu_vsqrt_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsqrt_t_partial">vfpu_vsqrt_t_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsrt1_q"></a><a name="vfpu_vsrt1_q_partial"></a>
<a name="vfpu_vsrt1_q / vfpu_vsrt1_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsrt1_q / vfpu_vsrt1_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sort 1 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsrt1_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsrt1_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsrt1.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsrt1.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsrt1.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsrt1.q instruction to sort four elements then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt2_q">vfpu_vsrt2_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt2_q_partial">vfpu_vsrt2_q_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt3_q">vfpu_vsrt3_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt3_q_partial">vfpu_vsrt3_q_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt4_q">vfpu_vsrt4_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt4_q_partial">vfpu_vsrt4_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsrt2_q"></a><a name="vfpu_vsrt2_q_partial"></a>
<a name="vfpu_vsrt2_q / vfpu_vsrt2_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsrt2_q / vfpu_vsrt2_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sort 2 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsrt2_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsrt2_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsrt2.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsrt2.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsrt2.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsrt2.q instruction to sort four elements then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt1_q">vfpu_vsrt1_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt1_q_partial">vfpu_vsrt1_q_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt3_q">vfpu_vsrt3_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt3_q_partial">vfpu_vsrt3_q_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt4_q">vfpu_vsrt4_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt4_q_partial">vfpu_vsrt4_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsrt3_q"></a><a name="vfpu_vsrt3_q_partial"></a>
<a name="vfpu_vsrt3_q / vfpu_vsrt3_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsrt3_q / vfpu_vsrt3_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sort 3 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsrt3_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsrt3_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsrt3.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsrt3.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsrt3.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsrt3.q instruction to sort four elements then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt1_q">vfpu_vsrt1_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt1_q_partial">vfpu_vsrt1_q_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt2_q">vfpu_vsrt2_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt2_q_partial">vfpu_vsrt2_q_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt4_q">vfpu_vsrt4_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt4_q_partial">vfpu_vsrt4_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsrt4_q"></a><a name="vfpu_vsrt4_q_partial"></a>
<a name="vfpu_vsrt4_q / vfpu_vsrt4_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsrt4_q / vfpu_vsrt4_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sort 4 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsrt4_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsrt4_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsrt4.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsrt4.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsrt4.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsrt4.q instruction to sort four elements then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt1_q">vfpu_vsrt1_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt1_q_partial">vfpu_vsrt1_q_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt2_q">vfpu_vsrt2_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt2_q_partial">vfpu_vsrt2_q_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt3_q">vfpu_vsrt3_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsrt3_q_partial">vfpu_vsrt3_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsub_s"></a><a name="vfpu_vsub_s_partial"></a>
<a name="vfpu_vsub_s / vfpu_vsub_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsub_s / vfpu_vsub_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Subtract Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsub_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsub_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsub.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsub.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vsub.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsub.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsub.s instruction to calculate the difference then outputs a 1D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_p">vfpu_vsub_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_p_partial">vfpu_vsub_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_t">vfpu_vsub_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_t_partial">vfpu_vsub_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_q">vfpu_vsub_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_q_partial">vfpu_vsub_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsub_p"></a><a name="vfpu_vsub_p_partial"></a>
<a name="vfpu_vsub_p / vfpu_vsub_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsub_p / vfpu_vsub_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Subtract Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsub_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsub_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsub.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsub.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vsub.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsub.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsub.p instruction to calculate the difference then outputs a 2D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_s">vfpu_vsub_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_s_partial">vfpu_vsub_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_t">vfpu_vsub_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_t_partial">vfpu_vsub_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_q">vfpu_vsub_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_q_partial">vfpu_vsub_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsub_t"></a><a name="vfpu_vsub_t_partial"></a>
<a name="vfpu_vsub_t / vfpu_vsub_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsub_t / vfpu_vsub_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Subtract Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsub_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsub_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsub.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsub.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vsub.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>/ <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsub.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsub.t instruction to calculate the difference then outputs a 3D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_s">vfpu_vsub_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_s_partial">vfpu_vsub_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_p">vfpu_vsub_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_p_partial">vfpu_vsub_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_q">vfpu_vsub_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_q_partial">vfpu_vsub_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vsub_q"></a><a name="vfpu_vsub_q_partial"></a>
<a name="vfpu_vsub_q / vfpu_vsub_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vsub_q / vfpu_vsub_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Subtract Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsub_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vsub_q_partial</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vsub.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vsub.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vsub.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vsub.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vsub.q instruction to calculate the difference then outputs a 4D value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_s">vfpu_vsub_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_s_partial">vfpu_vsub_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_p">vfpu_vsub_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_p_partial">vfpu_vsub_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_t">vfpu_vsub_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vsub_t_partial">vfpu_vsub_t_partial</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vtfm4_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vtfm4_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Transform 4 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vtfm4_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;VFPU_VS_M and VFPU_VS_E are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vtfm4.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vtfm4.q instruction to transform the 4D vector according to the 4D matrix then outputs a 4D value.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_3">
<div style="margin-left:40px;"><h4><b>Note</b><br><br></h4></div></a>

<div style="margin-left:50px;">Since VFPU intrinsics allocate V4SF mode types as c000 format, the operands <i>_Vs</i> and <i>_Vt</i> will have column vector format. To set the matrix in column order, specify VFPU_VS_E.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vctfm4_q">vfpu_vctfm4_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrtfm4_q">vfpu_vrtfm4_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vuc2ifs_s"></a><a name="vfpu_vuc2ifs_s_partial"></a>
<a name="vfpu_vuc2ifs_s / vfpu_vuc2ifs_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vuc2ifs_s / vfpu_vuc2ifs_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert to integer from unsigned char Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vuc2ifs_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vuc2ifs_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vuc2ifs.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vuc2ifs.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, and&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vuc2ifs.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vuc2ifs.s instruction to unpack four unsigned 8-bit values into four 32-bit values with a pseudo full scale transformation then outputs a 4D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vus2i_s"></a><a name="vfpu_vus2i_s_partial"></a>
<a name="vfpu_vus2i_s / vfpu_vus2i_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vus2i_s / vfpu_vus2i_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert to integer from unsigned short Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vus2i_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vus2i_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vus2i.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vus2i.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>,&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, and&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vus2i.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vus2i.s instruction to unpack two unsigned 16-bit values into four 32-bit values then outputs a 2D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vus2i_p"></a><a name="vfpu_vus2i_p_partial"></a>
<a name="vfpu_vus2i_p / vfpu_vus2i_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vus2i_p / vfpu_vus2i_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert to integer from unsigned short Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vus2i_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vus2i_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vus2i.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vus2i.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, and&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vus2i.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vus2i.p instruction to unpack four unsigned 16-bit values into four 32-bit values then outputs a 4D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vwbn_s"></a><a name="vfpu_vwbn_s_partial"></a>
<a name="vfpu_vwbn_s / vfpu_vwbn_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vwbn_s / vfpu_vwbn_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>WrapBN Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vwbn_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vwbn_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vwbn.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vwbn.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vwbn.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vwbn.s instruction to perform the WrapBN calculation then outputs a 1D value.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vzero_s"></a><a name="vfpu_vzero_s_partial"></a>
<a name="vfpu_vzero_s / vfpu_vzero_s_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vzero_s / vfpu_vzero_s_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Zero Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vzero_s</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vzero_s_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vzero.s instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_X">VFPU_VD_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Y">VFPU_VD_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_Z">VFPU_VD_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_W">VFPU_VD_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_S()">VFPU_PFX_VD_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vzero.s instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vzero.s instruction to generate a 1D zero value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_p">vfpu_vzero_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_p_partial">vfpu_vzero_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_t">vfpu_vzero_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_t_partial">vfpu_vzero_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_q">vfpu_vzero_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_q_partial">vfpu_vzero_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vzero_p"></a><a name="vfpu_vzero_p_partial"></a>
<a name="vfpu_vzero_p / vfpu_vzero_p_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vzero_p / vfpu_vzero_p_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Zero Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vzero_p</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vzero_p_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vzero.p instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XY">VFPU_VD_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_ZW">VFPU_VD_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_P()">VFPU_PFX_VD_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vzero.p instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vzero.p instruction to generate a 2D zero value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_s">vfpu_vzero_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_s_partial">vfpu_vzero_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_t">vfpu_vzero_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_t_partial">vfpu_vzero_t_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_q">vfpu_vzero_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_q_partial">vfpu_vzero_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vzero_t"></a><a name="vfpu_vzero_t_partial"></a>
<a name="vfpu_vzero_t / vfpu_vzero_t_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vzero_t / vfpu_vzero_t_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Zero Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vzero_t</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vzero_t_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vzero.t instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_XYZ">VFPU_VD_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VD_YZW">VFPU_VD_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_T()">VFPU_PFX_VD_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vzero.t instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vzero.t instruction to generate a 3D zero value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_s">vfpu_vzero_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_s_partial">vfpu_vzero_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_p">vfpu_vzero_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_p_partial">vfpu_vzero_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_q">vfpu_vzero_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_q_partial">vfpu_vzero_q_partial</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vzero_q"></a><a name="vfpu_vzero_q_partial"></a>
<a name="vfpu_vzero_q / vfpu_vzero_q_partial"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vzero_q / vfpu_vzero_q_partial<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Zero Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vzero_q</b> (
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));
inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vzero_q_partial </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vd</i>,
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vd operand of the vzero.q instruction when performing a partial write&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VD_Q()">VFPU_PFX_VD_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vzero.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function wrapper uses the VFPU vzero.q instruction to generate a 4D zero value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_s">vfpu_vzero_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_s_partial">vfpu_vzero_s_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_p">vfpu_vzero_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_p_partial">vfpu_vzero_p_partial</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_t">vfpu_vzero_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vzero_t_partial">vfpu_vzero_t_partial</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_extract_float_from_v4x"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_extract_float_from_v4x<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Extract X-field from V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const float <b>vfpu_extract_float_from_v4x </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Input</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Input</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type subregister is obtained as a float value.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the inline assembly mfv instruction to get the value corresponding to the X-field of the 4D vector indicated by the V4SF mode type argument <i>_Input</i> as a float type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4y">vfpu_extract_float_from_v4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4z">vfpu_extract_float_from_v4z</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4w">vfpu_extract_float_from_v4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_extract_float_from_v4y"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_extract_float_from_v4y<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Extract Y-field from V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const float <b>vfpu_extract_float_from_v4y </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Input</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Input</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type subregister is obtained as a float value.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the inline assembly mfv instruction to get the value corresponding to the Y-field of the 4D vector indicated by the V4SF mode type argument <i>_Input</i> as a float type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4x">vfpu_extract_float_from_v4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4z">vfpu_extract_float_from_v4z</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4w">vfpu_extract_float_from_v4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_extract_float_from_v4z"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_extract_float_from_v4z<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Extract Z-field from V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const float <b>vfpu_extract_float_from_v4z </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Input</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Input</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type subregister is obtained as a float value.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the inline assembly mfv instruction to get the value corresponding to the Z-field of the 4D vector indicated by the V4SF mode type argument <i>_Input</i> as a float type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4x">vfpu_extract_float_from_v4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4y">vfpu_extract_float_from_v4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4w">vfpu_extract_float_from_v4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_extract_float_from_v4w"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_extract_float_from_v4w<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Extract W-field from V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const float <b>vfpu_extract_float_from_v4w </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Input</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Input</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type subregister is obtained as a float value.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the inline assembly mfv instruction to get the value corresponding to the W -field of the 4D vector indicated by the V4SF mode type argument <i>_Input</i> as a float type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4x">vfpu_extract_float_from_v4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4y">vfpu_extract_float_from_v4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_float_from_v4z">vfpu_extract_float_from_v4z</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_extract_v4_from_m4x"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_extract_v4_from_m4x<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Extract X-column from V16SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_extract_v4_from_m4x </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Input</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Input</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V16SF mode type subregister is obtained as a V4SF mode type value.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the vector corresponding to the X-column of the 4D column major order matrix indicated by the V16SF mode type argument <i>_Input</i> as a V4SF mode type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4y">vfpu_extract_v4_from_m4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4z">vfpu_extract_v4_from_m4z</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4w">vfpu_extract_v4_from_m4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_extract_v4_from_m4y"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_extract_v4_from_m4y<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Extract Y-column from V16SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_extract_v4_from_m4y</b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Input</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Input</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V16SF mode type subregister is obtained as a V4SF mode type value.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the vector corresponding to the Y-column of the 4D column major order matrix indicated by the V16SF mode type argument <i>_Input</i> as a V4SF mode type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4x">vfpu_extract_v4_from_m4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4z">vfpu_extract_v4_from_m4z</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4w">vfpu_extract_v4_from_m4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_extract_v4_from_m4z"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_extract_v4_from_m4z<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Extract Z-column from V16SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_extract_v4_from_m4z </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Input</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Input</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V16SF mode type subregister is obtained as a V4SF mode type value.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the vector corresponding to the Z-column of the 4D column major order matrix indicated by the V16SF mode type argument <i>_Input</i> as a V4SF mode type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4x">vfpu_extract_v4_from_m4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4y">vfpu_extract_v4_from_m4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4w">vfpu_extract_v4_from_m4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_extract_v4_from_m4w"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_extract_v4_from_m4w<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Extract W-column from V16SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_extract_v4_from_m4w </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Input</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Input</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V16SF mode type subregister is obtained as a V4SF mode type value.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the vector corresponding to the W-column of the 4D column major order matrix indicated by the V16SF mode type argument <i>_Input</i> as a V4SF mode type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4x">vfpu_extract_v4_from_m4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4y">vfpu_extract_v4_from_m4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_extract_v4_from_m4z">vfpu_extract_v4_from_m4z</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_float_into_v4x"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_float_into_v4x<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert X-field into V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_insert_float_into_v4x </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v,</i>
	float <i>x</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>x</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V4SF mode type value for which field insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the X -field of the 4D vector indicated by the V4SF mode type argument <i>v</i> to the float value specified by argument <i>x</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4y">vfpu_insert_float_into_v4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4z">vfpu_insert_float_into_v4z</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4w">vfpu_insert_float_into_v4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_float_into_v4y"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_float_into_v4y<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert Y-field into V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_insert_float_into_v4y </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v,</i>
	float <i>y</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>y</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V4SF mode type value for which field insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the Y -field of the 4D vector indicated by the V4SF mode type argument <i>v</i> to the float value specified by argument <i>y</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4x">vfpu_insert_float_into_v4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4z">vfpu_insert_float_into_v4z</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4w">vfpu_insert_float_into_v4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_float_into_v4z"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_float_into_v4z<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert Z-field into V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_insert_float_into_v4z </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v,</i>
	float <i>z</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>z</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V4SF mode type value for which field insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the Z -field of the 4D vector indicated by the V4SF mode type argument <i>v</i> to the float value specified by argument <i>z</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4x">vfpu_insert_float_into_v4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4y">vfpu_insert_float_into_v4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4w">vfpu_insert_float_into_v4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_float_into_v4w"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_float_into_v4w<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert W-field into V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_insert_float_into_v4w </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v,</i>
	float <i>w</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>w</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V4SF mode type value for which field insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the W -field of the 4D vector indicated by the V4SF mode type argument <i>v</i> to the float value specified by argument <i>w</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4x">vfpu_insert_float_into_v4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4y">vfpu_insert_float_into_v4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4z">vfpu_insert_float_into_v4z</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_float_into_v4xy"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_float_into_v4xy<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert X,Y-field into V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_insert_float_into_v4xy </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v,</i>
	float <i>x,</i>
	float <i>y</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>x</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>y</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V4SF mode type value for which field insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the X and Y -fields of the 4D vector indicated by the V4SF mode type argument <i>v</i> to the float values specified by arguments <i>x</i> and <i>y</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4zw">vfpu_insert_float_into_v4zw</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_float_into_v4zw"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_float_into_v4zw<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert Z,W-field into V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_insert_float_into_v4zw </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v,</i>
	float <i>z,</i>
	float <i>w</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>z</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>w</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V4SF mode type value for which field insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the Z and W -fields of the 4D vector indicated by the V4SF mode type argument <i>v</i> to the float values specified by arguments <i>z</i> and <i>w</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4xy">vfpu_insert_float_into_v4xy</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_float_into_v4xyz"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_float_into_v4xyz<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert X,Y,Z-field into V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_insert_float_into_v4xyz </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v,</i>
	float <i>x,</i>
	float <i>y</i>,
	float <i>z</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>x</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>y</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>z</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V4SF mode type value for which field insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the X, Y, and Z -fields of the 4D vector indicated by the V4SF mode type argument <i>v</i> to the float values specified by arguments <i>x</i>, <i>y</i>, and <i>z</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4yzw">vfpu_insert_float_into_v4yzw</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_float_into_v4yzw"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_float_into_v4yzw<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert Y,Z,W-field into V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_insert_float_into_v4yzw </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v,</i>
	float <i>y,</i>
	float <i>z,</i>
	float <i>w</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V4SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>y</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>z</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>w</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be inserted as subregister&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V4SF mode type value for which field insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the Y, Z, and W -fields of the 4D vector indicated by the V4SF mode type argument <i>v</i> to the float values specified by arguments <i>y</i>, <i>z</i>, and <i>w</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_float_into_v4xyz">vfpu_insert_float_into_v4xyz</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_assign_float_to_v4xyzw"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_assign_float_to_v4xyzw<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Assign X,Y,Z,W-field into V4SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_assign_float_to_v4xyzw </b>(
	float x<i>,</i>
	float <i>y,</i>
	float <i>z,</i>
	float <i>w</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>x</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be set as register&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>y</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be set as register&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>z</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be set as register&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>w</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;float type value to be set as register&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V4SF mode type value for which field insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function generates a 4D vector having the values indicated by the float type arguments <i>x</i>, <i>y</i>, <i>z</i>, and <i>w</i> in its fields.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_v4_into_m4x"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_v4_into_m4x<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert X-column into V16SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_insert_v4_into_m4x </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>m</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>m</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V16SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;V4SF mode type value to be inserted as a register&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V16SF mode type value for which vector insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function inserts the vector corresponding to the X-column of the 4D column major order matrix indicated by the V16SF mode type argument <i>m</i> as a V4SF mode type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4y">vfpu_insert_v4_into_m4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4z">vfpu_insert_v4_into_m4z</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4w">vfpu_insert_v4_into_m4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_v4_into_m4y"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_v4_into_m4y<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert Y-column into V16SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_insert_v4_into_m4y </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>m</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>m</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V16SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;V4SF mode type value to be inserted as a register&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V16SF mode type value for which vector insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function inserts the vector corresponding to the Y-column of the 4D column major order matrix indicated by the V16SF mode type argument <i>m</i> as a V4SF mode type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4x">vfpu_insert_v4_into_m4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4z">vfpu_insert_v4_into_m4z</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4w">vfpu_insert_v4_into_m4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_v4_into_m4z"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_v4_into_m4z<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert Z-column into V16SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_insert_v4_into_m4z </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>m</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>m</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V16SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;V4SF mode type value to be inserted as a register&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V16SF mode type value for which vector insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function inserts the vector corresponding to the Z-column of the 4D column major order matrix indicated by the V16SF mode type argument <i>m</i> as a V4SF mode type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4x">vfpu_insert_v4_into_m4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4y">vfpu_insert_v4_into_m4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4w">vfpu_insert_v4_into_m4w</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_insert_v4_into_m4w"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_insert_v4_into_m4w<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Insert W-column into V16SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_insert_v4_into_m4w </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>m</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>v</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>m</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input V16SF mode type value for which subregister access is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;V4SF mode type value to be inserted as a register&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V16SF mode type value for which vector insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function inserts the vector corresponding to the W-column of the 4D column major order matrix indicated by the V16SF mode type argument <i>m</i> as a V4SF mode type value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4x">vfpu_insert_v4_into_m4x</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4y">vfpu_insert_v4_into_m4y</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_insert_v4_into_m4z">vfpu_insert_v4_into_m4z</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_assign_v4_to_m4xyzw"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_assign_v4_to_m4xyzw<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Assign X,Y,Z,W-vector into V16SF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_assign_v4_to_m4xyzw </b>(
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> x<i>,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>y,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>z,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>w</i>
);

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>x</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;V4SF mode type value to be set as subregister&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>y</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;V4SF mode type value to be set as subregister&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>z</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;V4SF mode type value to be set as subregister&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>w</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;V4SF mode type value to be set as subregister&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The value returned is a V16SF mode type value for which field insertion was performed.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function generates a column major order matrix having the 4D vector X, Y, Z, and W -fields indicated by the V4SF mode type arguments <i>x</i>, <i>y</i>, <i>z</i>, and <i>w</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_eq_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_eq_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_eq_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the EQ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the EQ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_eq_p">vfpu_vcmp_eq_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_eq_t">vfpu_vcmp_eq_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_eq_q">vfpu_vcmp_eq_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_eq_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_eq_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_eq_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the EQ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the EQ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_eq_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_eq_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_eq_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the EQ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the EQ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_eq_s">vfpu_vcmp_eq_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_eq_p">vfpu_vcmp_eq_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_eq_q">vfpu_vcmp_eq_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_eq_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_eq_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_eq_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the EQ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the EQ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_eq_s">vfpu_vcmp_eq_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_eq_p">vfpu_vcmp_eq_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_eq_t">vfpu_vcmp_eq_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_lt_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_lt_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Less Than Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_lt_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the LT condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the LT condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_lt_p">vfpu_vcmp_lt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_lt_t">vfpu_vcmp_lt_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_lt_q">vfpu_vcmp_lt_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_lt_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_lt_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Less Than Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_lt_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the LT condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the LT condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_lt_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_lt_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Less Than Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_lt_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the LT condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the LT condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_lt_s">vfpu_vcmp_lt_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_lt_p">vfpu_vcmp_lt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_lt_q">vfpu_vcmp_lt_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_lt_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_lt_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Less Than Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_lt_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the LT condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the LT condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_lt_s">vfpu_vcmp_lt_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_lt_p">vfpu_vcmp_lt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_lt_t">vfpu_vcmp_lt_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_le_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_le_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Less Equal Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_le_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the LE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the LE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_le_p">vfpu_vcmp_le_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_le_t">vfpu_vcmp_le_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_le_q">vfpu_vcmp_le_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_le_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_le_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Less Equal Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_le_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the LE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the LE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_le_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_le_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Less Equal Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_le_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the LE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the LE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_le_s">vfpu_vcmp_le_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_le_p">vfpu_vcmp_le_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_le_q">vfpu_vcmp_le_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_le_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_le_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Less Equal Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_le_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the LE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the LE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_le_s">vfpu_vcmp_le_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_le_p">vfpu_vcmp_le_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_le_t">vfpu_vcmp_le_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ne_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ne_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Equal Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ne_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the NE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the NE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ne_p">vfpu_vcmp_ne_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ne_t">vfpu_vcmp_ne_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ne_q">vfpu_vcmp_ne_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ne_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ne_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Equal Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ne_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the NE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the NE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ne_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ne_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Equal Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ne_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the NE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the NE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ne_s">vfpu_vcmp_ne_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ne_p">vfpu_vcmp_ne_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ne_q">vfpu_vcmp_ne_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ne_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ne_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Equal Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ne_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the NE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the NE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ne_s">vfpu_vcmp_ne_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ne_p">vfpu_vcmp_ne_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ne_t">vfpu_vcmp_ne_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ge_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ge_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Greater Equal Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ge_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the GE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the GE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ge_p">vfpu_vcmp_ge_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ge_t">vfpu_vcmp_ge_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ge_q">vfpu_vcmp_ge_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ge_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ge_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Greater Equal Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ge_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the GE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the GE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ge_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ge_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Greater Equal Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ge_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the GE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the GE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ge_s">vfpu_vcmp_ge_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ge_p">vfpu_vcmp_ge_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ge_q">vfpu_vcmp_ge_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ge_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ge_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Greater Equal Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ge_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the GE condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the GE condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ge_s">vfpu_vcmp_ge_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ge_p">vfpu_vcmp_ge_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ge_t">vfpu_vcmp_ge_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_gt_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_gt_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Greater Than Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_gt_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_X">VFPU_VS_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Y">VFPU_VS_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_Z">VFPU_VS_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_W">VFPU_VS_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_X">VFPU_VT_X</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Y">VFPU_VT_Y</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_Z">VFPU_VT_Z</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_W">VFPU_VT_W</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_S()">VFPU_PFX_VS_S()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_S()">VFPU_PFX_VT_S()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the GT condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the GT condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_gt_p">vfpu_vcmp_gt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_gt_t">vfpu_vcmp_gt_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_gt_q">vfpu_vcmp_gt_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_gt_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_gt_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Greater Than Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_gt_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XY">VFPU_VT_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_ZW">VFPU_VT_ZW</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_P()">VFPU_PFX_VT_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the GT condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the GT condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_gt_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_gt_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Greater Than Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_gt_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_XYZ">VFPU_VT_XYZ</a>, &nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VT_YZW">VFPU_VT_YZW</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_T()">VFPU_PFX_VT_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the GT condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the GT condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_gt_s">vfpu_vcmp_gt_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_gt_p">vfpu_vcmp_gt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_gt_q">vfpu_vcmp_gt_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_gt_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_gt_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Greater Than Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_gt_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the GT condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the GT condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_gt_s">vfpu_vcmp_gt_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_gt_p">vfpu_vcmp_gt_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_gt_t">vfpu_vcmp_gt_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ez_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ez_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Zero Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ez_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the EZ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the EZ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ez_p">vfpu_vcmp_ez_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ez_t">vfpu_vcmp_ez_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ez_q">vfpu_vcmp_ez_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ez_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ez_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Zero Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ez_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the EZ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the EZ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ez_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ez_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Zero Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ez_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the EZ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the EZ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ez_s">vfpu_vcmp_ez_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ez_p">vfpu_vcmp_ez_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ez_q">vfpu_vcmp_ez_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ez_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ez_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Zero Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ez_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the EZ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the EZ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ez_s">vfpu_vcmp_ez_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ez_p">vfpu_vcmp_ez_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ez_t">vfpu_vcmp_ez_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_en_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_en_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal NaN Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_en_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the EN condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the EN condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_en_p">vfpu_vcmp_en_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_en_t">vfpu_vcmp_en_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_en_q">vfpu_vcmp_en_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_en_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_en_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal NaN Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_en_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the EN condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the EN condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_en_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_en_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal NaN Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_en_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the EN condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the EN condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_en_s">vfpu_vcmp_en_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_en_p">vfpu_vcmp_en_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_en_q">vfpu_vcmp_en_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_en_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_en_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal NaN Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_en_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the EN condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the EN condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_en_s">vfpu_vcmp_en_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_en_p">vfpu_vcmp_en_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_en_t">vfpu_vcmp_en_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ei_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ei_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Inf Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ei_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the EI condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the EI condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ei_p">vfpu_vcmp_ei_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ei_t">vfpu_vcmp_ei_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ei_q">vfpu_vcmp_ei_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ei_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ei_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Inf Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ei_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the EI condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the EI condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ei_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ei_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Inf Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ei_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the EI condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the EI condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ei_s">vfpu_vcmp_ei_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ei_p">vfpu_vcmp_ei_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ei_q">vfpu_vcmp_ei_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ei_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ei_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Inf Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ei_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the EI condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the EI condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ei_s">vfpu_vcmp_ei_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ei_p">vfpu_vcmp_ei_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ei_t">vfpu_vcmp_ei_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_es_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_es_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Special Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_es_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the ES condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the ES condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_es_p">vfpu_vcmp_es_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_es_t">vfpu_vcmp_es_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_es_q">vfpu_vcmp_es_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_es_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_es_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Special Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_es_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the ES condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the ES condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_es_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_es_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Special Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_es_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the ES condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the ES condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_es_s">vfpu_vcmp_es_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_es_p">vfpu_vcmp_es_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_es_q">vfpu_vcmp_es_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_es_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_es_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Equal Special Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_es_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the ES condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the ES condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_es_s">vfpu_vcmp_es_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_es_p">vfpu_vcmp_es_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_es_t">vfpu_vcmp_es_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_nz_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_nz_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Zero Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_nz_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the NZ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the NZ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nz_p">vfpu_vcmp_nz_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nz_t">vfpu_vcmp_nz_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nz_q">vfpu_vcmp_nz_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_nz_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_nz_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Zero Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_nz_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the NZ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the NZ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_nz_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_nz_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Zero Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_nz_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the NZ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the NZ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nz_s">vfpu_vcmp_nz_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nz_p">vfpu_vcmp_nz_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nz_q">vfpu_vcmp_nz_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_nz_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_nz_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Zero Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_nz_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the NZ condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the NZ condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nz_s">vfpu_vcmp_nz_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nz_p">vfpu_vcmp_nz_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nz_t">vfpu_vcmp_nz_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_nn_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_nn_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not NaN Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_nn_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the NN condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the NN condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nn_p">vfpu_vcmp_nn_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nn_t">vfpu_vcmp_nn_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nn_q">vfpu_vcmp_nn_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_nn_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_nn_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not NaN Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_nn_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the NN condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the NN condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_nn_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_nn_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not NaN Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_nn_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the NN condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the NN condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nn_s">vfpu_vcmp_nn_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nn_p">vfpu_vcmp_nn_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nn_q">vfpu_vcmp_nn_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_nn_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_nn_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not NaN Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_nn_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the NN condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the NN condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nn_s">vfpu_vcmp_nn_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nn_p">vfpu_vcmp_nn_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_nn_t">vfpu_vcmp_nn_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ni_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ni_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Inf Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ni_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the NI condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the NI condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ni_p">vfpu_vcmp_ni_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ni_t">vfpu_vcmp_ni_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ni_q">vfpu_vcmp_ni_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ni_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ni_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Inf Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ni_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the NI condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the NI condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ni_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ni_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Inf Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ni_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the NI condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the NI condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ni_s">vfpu_vcmp_ni_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ni_p">vfpu_vcmp_ni_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ni_q">vfpu_vcmp_ni_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ni_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ni_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Inf Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ni_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the NI condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the NI condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ni_s">vfpu_vcmp_ni_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ni_p">vfpu_vcmp_ni_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ni_t">vfpu_vcmp_ni_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ns_s"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ns_s<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Special Single Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ns_s</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.s instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VT_Q()">VFPU_PFX_VT_Q()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.s instruction using the NS condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.s instruction to compare according to the NS condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ns_p">vfpu_vcmp_ns_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ns_t">vfpu_vcmp_ns_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ns_q">vfpu_vcmp_ns_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ns_p"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ns_p<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Special Pair Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ns_p</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.p instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XY">VFPU_VS_XY</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_ZW">VFPU_VS_ZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_P()">VFPU_PFX_VS_P()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.p instruction using the NS condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.p instruction to compare according to the NS condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_s">vfpu_vcmp_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_t">vfpu_vcmp_t</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_q">vfpu_vcmp_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ns_t"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ns_t<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Special Triple Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ns_t</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.t instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_XYZ">VFPU_VS_XYZ</a>, <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_VS_YZW">VFPU_VS_YZW</a>, and <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_T()">VFPU_PFX_VS_T()</a> are valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.t instruction using the NS condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.t instruction to compare according to the NS condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ns_s">vfpu_vcmp_ns_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ns_p">vfpu_vcmp_ns_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ns_q">vfpu_vcmp_ns_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmp_ns_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmp_ns_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Compare Not Special Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline int <b>vfpu_vcmp_ns_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_flag_type">vfpu_flag_type</a> <i>_Flags</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vcmp.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Flags</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Intrinsic control flag&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#VFPU_PFX_VS_Q()">VFPU_PFX_VS_Q()</a> is valid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An int type value that contains the result of the vcmp.q instruction using the NS condition is returned. If the condition is satisfied, the value is true (1). If it is not satisfied, the value is false (0).<br>The comparison result is evaluated by ANDing together the comparison results of each field.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vcmp.q instruction to compare according to the NS condition then outputs a boolean value.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ns_s">vfpu_vcmp_ns_s</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ns_p">vfpu_vcmp_ns_p</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmp_ns_t">vfpu_vcmp_ns_t</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vchtfm4_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vchtfm4_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Homogeneous Transform 4 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vchtfm4_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vhtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vhtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vhtfm4.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vhtfm4.q instruction to transform 4D vectors to a 4D matrix as simultaneous coordinates then outputs a 4D value.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_5_4">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">To handle column vector and column major order matrix format, the <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhtfm4_q">vfpu_vhtfm4_q</a>() function is equivalent to <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhtfm4_q">vfpu_vhtfm4_q</a>(_Vs, _Vt, VFPU_VS_E) which is called with the VFPU_VS_E flag.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhtfm4_q">vfpu_vhtfm4_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrhtfm4_q">vfpu_vrhtfm4_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrhtfm4_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrhtfm4_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Homogeneous Transform 4 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrhtfm4_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vt</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of the vhtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of the vhtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vhtfm4.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vhtfm4.q instruction to transform 4D vectors to a 4D matrix as simultaneous coordinates then outputs a 4D value.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_5_5">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">To handle row vector and row major order matrix format, the <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhtfm4_q">vfpu_vhtfm4_q</a>() function is equivalent to <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhtfm4_q">vfpu_vhtfm4_q</a>(_Vt, _Vs, VFPU_VS_M) which is called with the VFPU_VS_M flag.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vhtfm4_q">vfpu_vhtfm4_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vchtfm4_q">vfpu_vchtfm4_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vcmmul_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vcmmul_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Multiply Quad x Quad Matrix<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_vcmmul_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vt</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vmmul.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vmmul.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V16SF mode type value that contains the vd operand of the vmmul.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vmmul.q instruction to calculate a 4D matrix product then outputs a 4D matrix value.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_5_6">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">To handle column major order matrix format, the <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmmul_q">vfpu_vmmul_q</a>() function is equivalent to <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmmul_q">vfpu_vmmul_q</a>(_Vt, _Vs, VFPU_VD_E | VFPU_VS_E | VFPU_VT_E) which is called with the VFPU_VS_E flag.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmmul_q">vfpu_vmmul_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrmmul_q">vfpu_vrmmul_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrmmul_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrmmul_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Multiply Quad x Quad Matrix<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <b>vfpu_vrmmul_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vt</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vmmul.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vmmul.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V16SF mode type value that contains the vd operand of the vmmul.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vmmul.q instruction to calculate a 4D matrix product then outputs a 4D matrix value.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_5_7">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">To handle row major order matrix format, the <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmmul_q">vfpu_vmmul_q</a>() function is equivalent to <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmmul_q">vfpu_vmmul_q</a>(_Vs, _Vt, VFPU_VD_M | VFPU_VS_M | VFPU_VT_M) which is called with the VFPU_VS_M flag.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vmmul_q">vfpu_vmmul_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vcmmul_q">vfpu_vcmmul_q</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vctfm4_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vctfm4_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Transform 4 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vctfm4_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vt</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vtfm4.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vtfm4.q instruction to transform a 4D vector according to a 4D matrix then outputs a 4D matrix value.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_5_8">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">To handle column vector and column major order matrix format, the <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vtfm4_q">vfpu_vtfm4_q</a>() function is equivalent to <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vtfm4_q">vfpu_vtfm4_q</a>(_Vs, _Vt, VFPU_VS_E) which is called with the VFPU_VS_E flag.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vtfm4_q">vfpu_vtfm4_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vrtfm4_q">vfpu_vrtfm4_q</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vfpu_vrtfm4_q"></a>
<table width="100%"><td width="70%"><font size=6>vfpu_vrtfm4_q<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Transform 4 Quad Word<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>inline const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <b>vfpu_vrtfm4_q</b> (
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_v4">vfpu_v4</a> <i>_Vs,</i>
	const <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_m4x4">vfpu_m4x4</a> <i>_Vt</i>
) __attribute__((always_inline));

</font></pre></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vt operand of vtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>_Vt</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;vs operand of vtfm4.q instruction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A V4SF mode type value that contains the vd operand of the vtfm4.q instruction is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function uses the VFPU vtfm4.q instruction to transform a 4D vector according to a 4D matrix then outputs a 4D matrix value.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_5_9">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">To handle row vector and row major order matrix format, the <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vtfm4_q">vfpu_vtfm4_q</a>() function is equivalent to <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vtfm4_q">vfpu_vtfm4_q</a>(_Vt, _Vs, VFPU_VS_M) which is called with the VFPU_VS_M flag.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vtfm4_q">vfpu_vtfm4_q</a>(), <a href="../fpu-vfpu/VFPU_Intrinsics-Reference-English.htm#vfpu_vctfm4_q">vfpu_vctfm4_q</a>()<br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
