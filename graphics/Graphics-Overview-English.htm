<html lang="en">
<head>
<title>Graphics-Overview</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
Graphics Overview
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd3 -->
<a name="Heading3_1">
<h2>
 1 <!-- hp --><b>Graphics Processing Overview</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_1_1">
<h3>
<a href="#Heading3_1"> 1. </a>1 
<!-- hp1 --><b>Graphics Processing Flow</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following figure shows how graphics data is typically created for the PSP&trade; along with the associated drawing process.<br></div>

<div align=center>
<p>
<img src="gif/Graphics-Overview-English001.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 1 PSP&trade; Graphics Processing Flow</b><br>
</div>
<br>

<!-- sce_hd3 -->
<a name="Heading3_2">
<h2>
 2 <!-- hp --><b>Graphics Artist Tools</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">Graphics data is created for the PSP&trade; using a two-step process. First, 3D model data and 2D image data are created with commercial graphics authoring tools. Next, the files output from the authoring tools are converted into suitable formats for the PSP&trade;, using one of the SCE-provided converters described below.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_1">
<h3>
<a href="#Heading3_2"> 2. </a>1 
<!-- hp1 --><b>GMO Converter Overview</b><br>
</a>
</h3>
<div style="margin-left:50px;">The GMO converter is a Windows-based tool that converts generic 3D model data into a format suitable for use with the PSP&trade;. Files can be converted using a drag-and-drop interface.<br>The GMO converter supports the data formats listed below.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_1_1">
<div style="margin-left:40px;"><h4><b>Supported input data formats</b><br><br></h4></div></a>

</ol>
<div style="margin-left:40px;"><ul>
<li> XSI (with restrictions, such as Patch models are not supported for SOFTIMAGE|XSI)
<li> GMS 
</ul></div>

<!-- sce_title -->
<a Name ="HeadingT_2_1_2">
<div style="margin-left:40px;"><h4><b>Supported output data formats</b><br><br></h4></div></a>

<div style="margin-left:40px;"><ul>
<li> GMO 
<li> GMS 
<li> INC 
</ul></div>
<div style="margin-left:50px;">A tool for previewing PSP&trade; 3D model data is bundled together with the GMO converter. For details about how to use the GMO converter, see the "GMO-Converter" document.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_2">
<h3>
<a href="#Heading3_2"> 2. </a>2 
<!-- hp1 --><b>GIM Converter Overview</b><br>
</a>
</h3>
<div style="margin-left:50px;">The GIM converter is a Windows-based tool that converts generic image data into 2D image data suitable for use with the PSP&trade; (GIM format). <br>The GIM converter supports the data formats listed below.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_2_3">
<div style="margin-left:40px;"><h4><b>Supported input data formats</b><br><br></h4></div></a>

<div style="margin-left:40px;"><ul>
<li> BMP 
<li> TGA 
<li> TM2 
<li> GIM 
</ul></div>

<!-- sce_title -->
<a Name ="HeadingT_2_2_4">
<div style="margin-left:40px;"><h4><b>Supported output data format</b><br><br></h4></div></a>

<div style="margin-left:40px;"><ul>
<li> GIM 
</ul></div>
<div style="margin-left:67px;"><br></div>
<div style="margin-left:50px;">The GIM converter can be executed from the Windows command prompt. Multiple input files can be specified at execution time and those files can be collected together into a single GIM file. In addition, a tool for previewing GIM-formatted image data is bundled with the GIM converter.<br></div>

<!-- sce_hd3 -->
<a name="Heading3_3">
<h2>
 3 <!-- hp --><b>Graphics Data Formats</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">The PSP&trade; supports two graphics data formats: GMO is used for 3D graphics data and GIM is used for 2D graphics data. These formats are described in more detail below.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_1">
<h3>
<a href="#Heading3_3"> 3. </a>1 
<!-- hp1 --><b>GMO Data Format Overview</b><br>
</a>
</h3>
<div style="margin-left:50px;">The GMO data format is used for displaying basic 3D models. It supports the following information for representing 3D models.<br><br></div>
<div style="margin-left:40px;"><ul>
<li> Hierarchical coordinate systems (matrix, TRS)
<li> Shape data (polygon, surface, morphing, skin mesh)
<li> Materials (color, mapping information)
<li> Textures (file name, file image)
<li> Motion (hierarchical coordinate system, material animation)
</ul></div>
<div style="margin-left:67px;"><br></div>
<div style="margin-left:50px;">This information is maintained in Bone, Part, Mesh, Arrays, Material, Layer, Texture, Motion, and FCurve block structures. In addition to this 3D model data, the GMO data format also includes command data which is used to drive the graphics API and display the 3D model data by calling APIs in accordance with the command data. In addition, if an appropriate display list is built by adding DMA tags to 3D model data in memory, drawing can be done with a high degree of efficiency. The GMO data format contains GMO data represented in binary and GMS data represented in text. The two are equivalent.<br>For details on the GMO data format, please see the "GMO_Format-Overview" and "GMO_Format-Reference" documents. The GMO converter tool is used to generate data files in GMO format. In addition, the libgmo library is provided for working with GMO-formatted data.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_2">
<h3>
<a href="#Heading3_3"> 3. </a>2 
<!-- hp1 --><b>GIM Data Format Overview</b><br>
</a>
</h3>
<div style="margin-left:50px;">GIM is a file format used for storing basic texture images. Multiple images can be stored using the hierarchical structure shown below.<br><br></div>
<div style="margin-left:67px;"></div>

<div align=center>
<p>
<img src="gif/Graphics-Overview-English002.gif">
</div>
<br>
<div style="margin-left:67px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 2 Hierarchical Structure of GIM Data Format</b><br>
</div>
<br>
<div style="margin-left:50px;">A picture chunk represents one set of 2D graphics data.<br>A two-dimensional array of image data can be stored in an image chunk. The dimension in one direction is called a level and is assumed to be used mainly for mipmaps. The dimension in the other direction is called a frame and is assumed to be used mainly for 2D animation sequences.<br>A two-dimensional array of palette data, which can be stored in a palette chunk, corresponds to the two-dimensional array of image data stored in the image chunk.<br>Frame rate and other information related to animation can be stored in a sequence chunk. The keyframe spacing is variable, and the method of interpolating between keyframes can also be specified individually.<br>The following eight types of image data pixel formats (color modes) are supported:  (R5,G6,B5), (R5,G5,B5,A1), (R4,G4,B4,A4), (R8,G8,B8,A8), 4-bit indexed color, 8-bit indexed color, 16-bit indexed color, and 32-bit indexed color.<br>For details about the GIM data format, see the "GIM_Format-Overview" document.<br>The GIM converter tool is used to generate data files in GIM format. In addition, the libgim library is provided for working with GIM-formatted data.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_4">
<h2>
 4 <!-- hp --><b>Graphics Libraries</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_4_1">
<h3>
<a href="#Heading3_4"> 4. </a>1 
<!-- hp1 --><b>Structure of the Graphics Libraries</b><br>
</a>
</h3>
<div style="margin-left:50px;">The structure of the graphics-related libraries is shown below. Model data is handled by libgmo_model and texture data is handled by libgim_picture. libgum, libgu, and geman are low-level libraries under libgmo_model and libgim_picture.<br><br></div>

<div align=center>
<p>
<img src="gif/Graphics-Overview-English003.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 3: Structure of the Graphics-Related Libraries</b><br>
</div>
<br>

<!-- sce_hd4 -->
<a name="Heading4_4_2">
<h3>
<a href="#Heading3_4"> 4. </a>2 
<!-- hp1 --><b>Overview of the Graphics Engine Manager (geman)</b><br>
</a>
</h3>
<div style="margin-left:50px;">The Graphics Engine manager (geman) is a service for controlling the Graphics Engine - i.e., the drawing engine of the PSP&trade;. It manages the display list queue, and handles transfers to the Graphics Engine.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_3">
<h3>
<a href="#Heading3_4"> 4. </a>3 
<!-- hp1 --><b>Overview of libgu</b><br>
</a>
</h3>
<div style="margin-left:50px;">libgu is a basic library that uses the Graphics Engine to draw graphics. It is primarily used to create display lists (sequences of drawing parameters and drawing commands) that are used by the Graphics Engine to perform the actual drawing. The library also provides functions for starting, interrupting, and synchronizing drawing operations.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_4">
<h3>
<a href="#Heading3_4"> 4. </a>4 
<!-- hp1 --><b>Overview of libgum</b><br>
</a>
</h3>
<div style="margin-left:50px;">libgum is a library which supports 3D calculations. It provides functions which perform matrix calculations for rotation, scaling, and perspective transformation. It also has the capability to reflect the matrices resulting from these calculations in the display lists created by libgu.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_5">
<h3>
<a href="#Heading3_4"> 4. </a>5 
<!-- hp1 --><b>Overview of libgmo</b><br>
</a>
</h3>
<div style="margin-left:50px;">libgmo is a library which handles 3D model data. It provides, firstly, the capability to parse GMO-format data images which have been read into memory and load them into model structures having subblocks such as bones, parts, and materials; secondly, the capability to perform animation (calculate variations over time) of the model structures; and thirdly, the capability to create, in conjunction with libgu, display lists based on the model structures. <br>In terms of output, libgmo only performs processing so as to pass drawing command sequences to libgu. To manage the display list and output graphics, the application should control libgu appropriately. <br>The source code of libgmo has been publicly released. Feel free to modify or functionally extend it as necessary.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_6">
<h3>
<a href="#Heading3_4"> 4. </a>6 
<!-- hp1 --><b>Overview of libgim</b><br>
</a>
</h3>
<div style="margin-left:50px;">libgim is a library which handles 2D graphics data used for textures. It provides, firstly, the capability to parse 2D graphics data files and load them into model structures having subblocks such as images and palettes; secondly, the capability to perform animation (calculate variations over time) of the model structures; and thirdly, the capability to create, in conjunction with libgu, display lists and set textures based on picture structures. In addition, it offers a dissolve feature for smoothly moving pictures with low frame rates, and an image cropping capability for making image data with indeterminate size easier to handle. <br>In terms of output, libgim_picture only performs processing so as to pass drawing command sequences for specifying textures to libgu. To manage the display list and output graphics, the application should control libgu appropriately, in accordance with the draw processing performed on the model. <br>The source code of libgim has been publicly released. Feel free to modify or functionally extend it as necessary.<br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2005 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
