<html lang="en">
<head>
<title>libgu-Overview</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
libgu Overview
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd3 -->
<a name="Heading3_1">
<h2>
 1 <!-- hp --><b>Library Overview</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_1_1">
<h3>
<a href="#Heading3_1"> 1. </a>1 
<!-- hp1 --><b>Features</b><br>
</a>
</h3>
<div style="margin-left:50px;">libgu is a basic library that uses the Graphics Engine to draw graphics. It is primarily used to create display lists (sequences of drawing parameters and drawing commands) that are used by the Graphics Engine to perform the actual drawing. The library also provides functions for starting, interrupting, and synchronizing drawing operations.<br></div>

<div align=center>
<p>
<img src="gif/libgu-Overview-English001.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 1 Location of libgu</b><br>
</div>
<br>

<!-- sce_hd4 -->
<a name="Heading4_1_2">
<h3>
<a href="#Heading3_1"> 1. </a>2 
<!-- hp1 --><b>Main Functions</b><br>
</a>
</h3>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_1"><h4>
(1)&nbsp;<b>Initialization and termination functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">Functions are provided for initializing and terminating the library.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_2"><h4>
(2)&nbsp;<b>Display list functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A group of functions is provided for starting and ending display list creation, transferring display lists to the Graphics Engine, waiting for the end of a transfer, controlling signal interrupts, and managing memory for display lists.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_3"><h4>
(3)&nbsp;<b>Mode functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A group of functions is provided for controlling the various types of drawing modes the Graphics Engine has and a function is provided for collectively saving and restoring drawing modes.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_4"><h4>
(4)&nbsp;<b>Primitive functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A group of functions is provided for inserting commands for drawing various types of primitives in a display list. Multiple primitives can be consecutively drawn for points, line segments, connected lines, triangles, connected triangles, fan-shape connected triangles, or rectangles. Spline drawing and Bezier drawing are supported for drawing, and the number of divisions and divided primitives can be specified.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_5"><h4>
(5)&nbsp;<b>Object culling functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A group of functions is provided for inserting a bounding box in a display list and controlling whether or not to draw a command sequence following it.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_6"><h4>
(6)&nbsp;<b>Bone and morphing functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A group of functions is provided that uses bones to make settings related to skinning and that uses weights to make settings for morphing.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_7"><h4>
(7)&nbsp;<b>Coordinate transformation functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A group of functions is provided for setting parameters related to coordinate transformations from projection matrix, view matrix, world matrix, texture matrix, or other model coordinates to drawing coordinates.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_8"><h4>
(8)&nbsp;<b>Color and lighting setting functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A group of functions is provided for making various types of settings related to the model color, light source, ambient light, and rendering.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_9"><h4>
(9)&nbsp;<b>Texture functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A group of functions is provided for making various types of settings related to texture mapping.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_10"><h4>
(10)&nbsp;<b>Buffer setting functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">Functions are provided for making settings related to the drawing buffer, display buffer, and depth buffer, and a function is provided for switching the drawing buffer and display buffer. Normally, the library keeps parameters for each buffer internally, and required commands are automatically inserted when the display list is created.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_11"><h4>
(11)&nbsp;<b>Fog function</b><br></h4>
</a></div>
<div style="margin-left:67px;">A function is provided for setting fog parameters.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_12"><h4>
(12)&nbsp;<b>Pixel operation functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A group of functions is provided for making settings related to pixel operations such as scissoring, alpha testing, depth testing, color testing, alpha blending, and stenciling.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_13"><h4>
(13)&nbsp;<b>Clear functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A group of functions is provided for clearing the drawing buffer, depth buffer, and stencil. There is a group of functions for setting clearing parameters and a function for entering commands that use those parameters to perform clearing into the display list.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_14"><h4>
(14)&nbsp;<b>Debugging functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A function is provided for displaying an arbitrary string at an arbitrary position on the screen for debugging. Although the string is normally displayed when the double buffer is switched, the string can also be displayed any time.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_2_15"><h4>
(15)&nbsp;<b>Other functions</b><br></h4>
</a></div>
<div style="margin-left:67px;">A function is provided for copying a rectangular area in the drawing buffer.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_3">
<h3>
<a href="#Heading3_1"> 1. </a>3 
<!-- hp1 --><b>Related Files</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following files are required to use libgu.<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Category</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Filename</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Header file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libgu.h &nbsp;&nbsp;<br>&nbsp;&nbsp;libgup.h&nbsp;&nbsp;<br>&nbsp;&nbsp;gecmd.h&nbsp;&nbsp;<br>&nbsp;&nbsp;geman.h&nbsp;&nbsp;<br>&nbsp;&nbsp;gevtx.h&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Library file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libgu.a&nbsp;&nbsp;<br>&nbsp;&nbsp;libgu_debug.a&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Stub library file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;display_stub.a&nbsp;&nbsp;<br>&nbsp;&nbsp;ge_user_stub.a&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">libgu_debug.a is a debugging library that uses assert() to check whether or not the arguments of libgu functions are correct. libgu_debug.a cannot be used with a master version.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_4">
<h3>
<a href="#Heading3_1"> 1. </a>4 
<!-- hp1 --><b>Reference Materials</b><br>
</a>
</h3>
<div style="margin-left:50px;">Graphics Engine Manager (geman)<br>Graphics Engine Users Manual<br>Graphics Engine Command Reference Manual<br>libgum<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_2">
<h2>
 2 <!-- hp --><b>Usage Procedure</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_2_1">
<h3>
<a href="#Heading3_2"> 2. </a>1 
<!-- hp1 --><b>Basic Usage Procedure</b><br>
</a>
</h3>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_1_1"><h4>
(1)&nbsp;<b>Initialization</b><br></h4>
</a></div>
<div style="margin-left:67px;">To use the library, first call <a href="../graphics/libgu-Reference-English.htm#sceGuInit">sceGuInit</a>() to perform initialization.<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3><a href="../graphics/libgu-Reference-English.htm#sceGuInit">sceGuInit</a>();					// Initializes libgu

</font></pre></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_1_2"><h4>
(2)&nbsp;<b>Set buffers</b><br></h4>
</a></div>
<div style="margin-left:67px;">Use <a href="../graphics/libgu-Reference-English.htm#sceGuDrawBuffer">sceGuDrawBuffer</a>(), <a href="../graphics/libgu-Reference-English.htm#sceGuDispBuffer">sceGuDispBuffer</a>(), and <a href="../graphics/libgu-Reference-English.htm#sceGuDepthBuffer">sceGuDepthBuffer</a>() to set the drawing buffer, display buffer, and depth buffer, respectively.<br></div>
        <div style="margin-left:80px;"><pre><font size=3>
<a href="../graphics/libgu-Reference-English.htm#sceGuDrawBuffer">sceGuDrawBuffer</a>( SCEGU_PF5551, SCEGU_VRAM_BP_0, 
	SCEGU_VRAM_WIDTH );			// Set drawing buffer
<a href="../graphics/libgu-Reference-English.htm#sceGuDispBuffer">sceGuDispBuffer</a>( SCEGU_SCR_WIDTH, SCEGU_SCR_HEIGHT, 
	SCEGU_VRAM_BP_1, SCEGU_VRAM_WIDTH);	// Set display buffer
<a href="../graphics/libgu-Reference-English.htm#sceGuDepthBuffer">sceGuDepthBuffer</a>(SCEGU_VRAM_BP_2, 
	SCEGU_VRAM_WIDTH);			// Set depth buffer
</font></pre></div>
<div style="margin-left:67px;"><br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_1_3"><h4>
(3)&nbsp;<b>Create display list</b><br></h4>
</a></div>
<div style="margin-left:67px;">Allocate an appropriate memory area for a display list and start creating a display list by calling <a href="../graphics/libgu-Reference-English.htm#sceGuStart">sceGuStart</a>() and specifying that area.<br>Next, create the display list by using primitive functions, texture functions, coordinate transformation functions, color and lighting functions, pixel operation functions, display list functions, etc. Each of these commands adds an appropriate drawing command sequence to the display list that is being created.<br>To end display list creation, use <a href="../graphics/libgu-Reference-English.htm#sceGuFinish">sceGuFinish</a>() or <a href="../graphics/libgu-Reference-English.htm#sceGuFinishId">sceGuFinishId</a>(). libgu does not check whether or not the display list that is being created fits in the specified memory area. Be sure to verify the remaining area by using the return value of <a href="../graphics/libgu-Reference-English.htm#sceGuFinish">sceGuFinish</a>() or <a href="../graphics/libgu-Reference-English.htm#sceGuFinishId">sceGuFinishId</a>() or by using <a href="../graphics/libgu-Reference-English.htm#sceGuCheckList">sceGuCheckList</a>() appropriately.<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>char	disp_list[MAX_LIST_SIZE] __attribute__((aligned(64)));
int	size;

<a href="../graphics/libgu-Reference-English.htm#sceGuStart">sceGuStart</a>(SCEGU_IMMEDIATE, disp_list, sizeof(disp_list));
	:
size = <a href="../graphics/libgu-Reference-English.htm#sceGuFinish">sceGuFinish</a>();
if (size &gt; MAX_LIST_SIZE) {
	printf(&quot;error: display list size\n&quot;);
}
<a href="../graphics/libgu-Reference-English.htm#sceGuSync">sceGuSync</a>(SCEGU_SYNC_FINISH, SCEGU_SYNC_WAIT);
</font></pre></div>
<div style="margin-left:67px;"><br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_1_4"><h4>
(4)&nbsp;<b>Draw display list</b><br></h4>
</a></div>
<div style="margin-left:67px;">There are two ways to draw the display list.<br>One way draws the display list at the same time it is being created, in parallel. If SCEGU_IMMEDIATE mode is specified when <a href="../graphics/libgu-Reference-English.htm#sceGuStart">sceGuStart</a>() is called to begin creating the display list, then whenever a command sequence is added to the display list by a function such as a primitive function, that command sequence is drawn at the same time. The second way of drawing the display list creates the display list in advance, saves it in memory, and draws it (adds it to the drawing queue) when necessary by calling <a href="../graphics/libgu-Reference-English.htm#sceGuSendList">sceGuSendList</a>(). To use this method, specify either SCEGU_LIST, or SCEGU_CALL, or SCEGU_LIST_CACHED, or SCEGU_CALL_CACHED mode when starting display list creation with <a href="../graphics/libgu-Reference-English.htm#sceGuStart">sceGuStart</a>().<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_2">
<h3>
<a href="#Heading3_2"> 2. </a>2 
<!-- hp1 --><b>Interrupting Drawing and Inserting a Display List</b><br>
</a>
</h3>
<div style="margin-left:50px;">Drawing can be interrupted or paused in the middle of a display list by using the <a href="../graphics/GE-Reference-English.htm#sceGeBreak">sceGeBreak</a>() function. <br>When drawing is paused, another display list can be inserted and drawn. To perform inserted drawing, specify SCEGU_QUEUE_HEAD mode when calling the <a href="../graphics/libgu-Reference-English.htm#sceGuSendList">sceGuSendList</a>() function. This will add the display list to the beginning of the drawing queue. Also, if a context save area is specified, the context will be automatically saved and restored before and after the inserted drawing.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_3">
<h3>
<a href="#Heading3_2"> 2. </a>3 
<!-- hp1 --><b>Synchronous Processing</b><br>
</a>
</h3>
<div style="margin-left:50px;">There are several methods of synchronizing display list drawing between the Graphics Engine and the application.<br>One method uses <a href="../graphics/libgu-Reference-English.htm#sceGuSync">sceGuSync</a>() to perform blocking or polling. This method can detect the end of drawing, a signal interrupt, the end of reading, the end of a display list transfer, and the end of drawing of a display list that was transferred by using <a href="../graphics/libgu-Reference-English.htm#sceGuSendList">sceGuSendList</a>().<br>Another method uses an interrupt callback. This method uses a finish interrupt that is generated when display list drawing ends and a signal interrupt that is generated when drawing advances to a pre-specified location. A callback function can be registered for each of these interrupts by using <a href="../graphics/libgu-Reference-English.htm#sceGuSetCallback">sceGuSetCallback</a>().<br>The location at which the signal interrupt is generated is specified by calling <a href="../graphics/libgu-Reference-English.htm#sceGuSignal">sceGuSignal</a>() during display list creation. Since the signal ID that is specified at this time is passed as an argument to the callback function, the callback function can find out the location to which drawing processing advanced. For a finish interrupt, if <a href="../graphics/libgu-Reference-English.htm#sceGuFinishId">sceGuFinishId</a>() is used to end display list creation, an ID is embedded and passed as an argument to the callback function.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_3">
<h2>
 3 <!-- hp --><b>Display List Creation</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_3_1">
<h3>
<a href="#Heading3_3"> 3. </a>1 
<!-- hp1 --><b>Display List Creation Mode</b><br>
</a>
</h3>
<div style="margin-left:50px;">When <a href="../graphics/libgu-Reference-English.htm#sceGuStart">sceGuStart</a>() is used to start creating a display list, any one of three creation modes can be selected.<br>When SCEGU_IMMEDIATE is specified as the mode, the display list command sequences are transferred to the Graphics Engine and drawn at the same time that the display list is being created.<br>When SCEGU_LIST or SCEGU_LIST_CACHED is specified, the display list is only created and no drawing is performed.<br>After display list creation is ended by the <a href="../graphics/libgu-Reference-English.htm#sceGuFinish">sceGuFinish</a>() function, drawing is performed at another time by using the <a href="../graphics/libgu-Reference-English.htm#sceGuSendList">sceGuSendList</a>() function.<br>When SCEGU_CALL or SCEGU_CALL_CACHED is specified, the display list is only created and no drawing is performed. In this case, a type of display list that is called as a subroutine is created. After display list creation is ended by the <a href="../graphics/libgu-Reference-English.htm#sceGuFinish">sceGuFinish</a>() function, be sure to set that the display list is to be called from another display list that will be its parent (by using <a href="../graphics/libgu-Reference-English.htm#sceGuCallList">sceGuCallList</a>()). This display list will be called and drawn when the parent display list is drawn.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_2">
<h3>
<a href="#Heading3_3"> 3. </a>2 
<!-- hp1 --><b>Display List Call</b><br>
</a>
</h3>
<div style="margin-left:50px;">Another display list can be called from a display list exactly like a subroutine.<br>The display list that is to be called should be created first. At this time, SCEGU_CALL or SCEGU_CALL_CACHED should be specified as the mode in the <a href="../graphics/libgu-Reference-English.htm#sceGuStart">sceGuStart</a>() function. Then, when the calling display list is created, <a href="../graphics/libgu-Reference-English.htm#sceGuCallList">sceGuCallList</a>() should be used to insert a command for calling the display list.<br>Display list calls normally are two levels deep. Calls up to 32 levels deep can be made by using <a href="../graphics/libgu-Reference-English.htm#sceGuCallMode">sceGuCallMode</a>() to set the call depth.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_3">
<h3>
<a href="#Heading3_3"> 3. </a>3 
<!-- hp1 --><b>Vertex Data Configuration</b><br>
</a>
</h3>
<div style="margin-left:50px;">The Graphics Engine has two drawing modes. Normal mode is for 3D drawing and through mode is for 2D drawing. Various formats of vertex data can be handled efficiently in each of these drawing modes.<br>Normal mode vertex data is created by using the following five parameters.<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Order</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Parameter</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Data Format</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Bone weights&nbsp;&nbsp;<br>&nbsp;&nbsp;(Wa, Wb, Wc, Wd, We, Wf, Wg, Wh)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unsigned 8-bit, unsigned 16-bit, or&nbsp;&nbsp;<br>&nbsp;&nbsp;single-precision floating point&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Texture coordinates (S, T)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unsigned 8-bit, unsigned 16-bit, or&nbsp;&nbsp;<br>&nbsp;&nbsp;single-precision floating point&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;3&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Color (C)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;5:6:5:0, 5:5:5:1, 4:4:4:4, or 8:8:8:8&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;4&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Normal vector (Nx, Ny, Nz)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Signed 8-bit, Signed 16-bit, or&nbsp;&nbsp;<br>&nbsp;&nbsp;single-precision floating point&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;5&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Model coordinates (Xm, Ym, Zm)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Signed 8-bit, Signed 16-bit, or&nbsp;&nbsp;<br>&nbsp;&nbsp;single-precision floating point&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">Although the parameters must appear in the order shown above, parameters other than the model coordinates can be omitted. From zero to eight bone weights can be specified. Also, the data format of each parameter can be selected from any of the formats shown above.<br><br>Through mode vertex data is created by using the following three parameters.<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Order</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Parameter</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Data Format</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Texel coordinates (U, V)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unsigned 16-bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Color (C)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;5:6:5:0, 5:5:5:1, 4:4:4:4, or 8:8:8:8&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;3&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Drawing coordinates (Xd, Yd, Zd)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Signed 16-bit (only Zd is unsigned) or&nbsp;&nbsp;<br>&nbsp;&nbsp;single-precision floating point&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">Although the parameters must appear in the order shown above, parameters other than the drawing coordinates can be omitted. The color data format can be selected from any of the formats shown above.<br><br>These various vertex data formats can be specified by using the <i>type</i> argument in the libgu primitive drawing functions.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_4">
<h3>
<a href="#Heading3_3"> 3. </a>4 
<!-- hp1 --><b>Vertex Array and Index Array</b><br>
</a>
</h3>
<div style="margin-left:50px;">When drawing primitives, multiple vertex data entries are provided as an array. Normally, drawing is performed sequentially from the beginning of the vertex array. However, an index array representing the drawing order can be provided separately to temporarily change the vertex order or to share vertex data entries.<br>For example, assume that there is an array of vertex data representing 8 vertices (A to H) as shown in the figure below. If the index array shown at the right side of the figure is specified, four walls can be drawn by drawing consecutive triangles in the order A - E - B - F - C - G - D - H - A - E without reordering the vertex array itself.<br></div>

<div align=center>
<p>
<img src="gif/libgu-Overview-English002.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 2 Vertex Array and Index Array</b><br>
</div>
<br>
<div style="margin-left:50px;">Since drawing speed decreases if an index array is used, be sure to take into consideration a tradeoff with processing for reordering the vertex array when using it.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_4">
<h2>
 4 <!-- hp --><b>Precautions</b>
<hr noshade>
</h2>


<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_4_1"><h4>
(1)&nbsp;<b>libgu Context</b><br></h4>
</a></div>
<div style="margin-left:67px;">Since libgu maintains a separate context for each display list creation mode, multiple display lists can be created simultaneously if the modes differ. For example, a separate display list can be created in SCEGU_LIST or SCEGU_CALL mode while a display list is being created and drawn in SCEGU_IMMEDIATE mode. The mode can be switched by using the <a href="../graphics/libgu-Reference-English.htm#sceGuStart">sceGuStart</a>()and <a href="../graphics/libgu-Reference-English.htm#sceGuFinish">sceGuFinish</a>() / <a href="../graphics/libgu-Reference-English.htm#sceGuFinishId">sceGuFinishId</a>() functions, and nested operation can be performed up to one time each for each mode.<br>Since a separate context is maintained for each display list mode, when a function that changes the context is called, it must be called in the relevant mode.<br>Functions that change the content of the context are shown below.<br><br></div>
<div style="margin-left:70px;"><ul>
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuScissor">sceGuScissor</a>()
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuEnable">sceGuEnable</a>(SCEGU_SCISSOR_TEST)
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuDisable">sceGuDisable</a>(SCEGU_SCISSOR_TEST)
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuEnable">sceGuEnable</a>(SCEGU_COLOR_DOUBLE)
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuDisable">sceGuDisable</a>(SCEGU_COLOR_DOUBLE)
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuDepthRange">sceGuDepthRange</a>()
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuDepthOffset">sceGuDepthOffset</a>()
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuSpriteMode">sceGuSpriteMode</a>()
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuClearColor">sceGuClearColor</a>()
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuClearStencil">sceGuClearStencil</a>()
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuClearDepth">sceGuClearDepth</a>()
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuTexMode">sceGuTexMode</a>()
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuTexFunc">sceGuTexFunc</a>()
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuTexMapMode">sceGuTexMapMode</a>()
<li> <a href="../graphics/libgu-Reference-English.htm#sceGuTexProjMapMode">sceGuTexProjMapMode</a>()
</ul></div>
<div style="margin-left:67px;"><br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_4_2"><h4>
(2)&nbsp;<b>D-Cache Writebacks</b><br></h4>
</a></div>
<div style="margin-left:67px;">Since the Graphics Engine runs as a bus master independently of ALLEGREX CPU, drawing cannot be performed correctly unless D cache coherency is guaranteed between the ALLEGREX CPU D-cache and memory. Since display lists, vertex buffers, vertex indexes, textures, and CLUTS are directly accessed from the Graphics Engine, when necessary, drawing should be started after explicitly writing back the ALLEGREX CPU D-cache.<br>Although a display list is created by an uncached access in SCEGU_IMMEDIATE mode, particular care is required concerning vertex buffers or indexes that are referenced from drawing functions such as <a href="../graphics/libgu-Reference-English.htm#sceGuDrawArray">sceGuDrawArray</a>(), <a href="../graphics/libgu-Reference-English.htm#sceGuDrawArrayN">sceGuDrawArrayN</a>(), <a href="../graphics/libgu-Reference-English.htm#sceGuDrawBezier">sceGuDrawBezier</a>(), and <a href="../graphics/libgu-Reference-English.htm#sceGuDrawSpline">sceGuDrawSpline</a>().<br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
