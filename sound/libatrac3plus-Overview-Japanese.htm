<html lang="jp">
<head>
<title>libatrac3plus-Overview</title>
<meta http-equiv="Content-Type" content= text/html; charset=Shift_JIS>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&reg; Programmer Tool Runtime Library Release 6.6.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
libatrac3plus
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd3 -->
<a name="Heading3_1">
<h2>
 1 <!-- hp --><b>概要</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_1_1">
<h3>
<a href="#Heading3_1"> 1. </a>1 
<!-- hp1 --><b>機能の概要と特徴</b><br>
</a>
</h3>
<div style="margin-left:50px;">ATRAC3plus&trade;ライブラリ(libatrac3plus)は、Media Engineにて動作するATRAC3&trade;/ATRAC3plus&trade;デコーダを制御するライブラリです。<br>専用ツールであるat3toolにより作成された、ATRAC3&trade;及びATRAC3plus&trade;形式で圧縮された音声データをリニアPCMへデコードすることができます。また、SAS(Software Audio Synthesizer)と連携することで、ATRAC3&trade;音源をシンセサイザの音素辺として使うことができるようになります。<br>以下のような特徴を持ちます。<br></div>

<!-- sce_hd6 -->
<a name="Heading6_1_1_1">
<div style="margin-left:63px;"><h4><b>特徴</b><br><br></h4></a></div>
<div style="margin-left:70px;"><ul>
<li> ATRAC3&trade;及びATRAC3plus&trade;の音声データをPCMにデコード可能
<li> ATRAC3&trade;(ステレオ)の対応ビットレートは66kbps/ 105kbps/ 132kbps
<li> ATRAC3&trade;(モノラル)の対応ビットレートは52kbps/ 66kbps
<li> ATRAC3plus&trade;(ステレオ)の対応ビットレートは48kbps/ 64kbps/ 96kbps/ 128kbps/ 160kbps/ 192kbps/ 256kbps/ 320kbps/ 352kbps
<li> ATRAC3plus&trade;(モノラル)の対応ビットレートは32kbps/ 48kbps/ 64kbps/ 96kbps/ 128kbps
<li> ATRAC3&trade;/ATRAC3plus&trade;データのループ再生機能
<li> ATRAC3&trade;/ATRAC3plus&trade;データのストリーミング再生機能
</ul></div>
<div style="margin-left:50px;"><br>なお、libatrac3plusは、ATRAC3&trade;/ATRAC3plus&trade;データからPCMデータへの変換(デコード)機能のみを提供します。デコードされたデータをオーディオ出力する場合には、libwaveなどと組み合わせて利用することになります。libwave及びその他サウンド機能については、サウンド概要に記載されていますので合わせて参照ください。<br>また、at3toolについて詳しくは「at3tool User's manual」を参照してください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_2">
<h3>
<a href="#Heading3_1"> 1. </a>2 
<!-- hp1 --><b>関連ファイル</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrac3plusを使用するために必要なファイルは、次のとおりです。<br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>カテゴリ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>ファイル名</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;ヘッダファイル&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libatrac3plus.h&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;スタブライブラリファイル&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libatrac3plus_stub.a&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;weakインポートスタブライブラリファイル&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libatrac3plus_stub_weak.a&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">また、libatrac3plusモジュールそのものをロードするために、utility機能を用いる必要があります。詳しくはutility概要をご覧ください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_3">
<h3>
<a href="#Heading3_1"> 1. </a>3 
<!-- hp1 --><b>サンプルプログラム</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrac3plusのサンプルプログラムとしては、以下のものがありますので参照してください。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_1"><h4>
(1)&nbsp;<b>devkit/sample/sound/stringsound/</b><br></h4>
</a></div>
<div style="margin-left:67px;">libatrac3plusの基本的な使いかたのサンプルです。<br>devkit/sample/graphic/string/をベースにlibatrac3plusを用いたBGMを追加しています。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_2"><h4>
(2)&nbsp;<b>devkit/sample/sound/starmix/</b><br></h4>
</a></div>
<div style="margin-left:67px;">libsas及びlibatrac3plusを同時に使ったサンプルです。<br>libatrac3plusを用いたBGM再生を行なうと同時に、ボタン操作に合わせたlibsasによる効果音再生が行なわれます。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_3"><h4>
(3)&nbsp;<b>devkit/sample/sound/at3doubleplay/</b><br></h4>
</a></div>
<div style="margin-left:67px;">ATRAC3&trade;/ATRAC3plus&trade;データを2曲同時に再生するサンプルです。<br>sample/graphics/stringにあるサンプルに、BGMとしてATRAC3&trade;/ATRAC3plus&trade;の音源二つをループ再生するようコードを追加しています。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_4"><h4>
(4)&nbsp;<b>devkit/sample/sound/at3streaming/</b><br></h4>
</a></div>
<div style="margin-left:67px;">ATRAC3&trade;/ATRAC3plus&trade;データの非同期読み込み、及びストリーミング再生のサンプルプログラムです。<br>sample/graphics/stringにあるサンプルコードにBGMとしてATRAC3&trade;/ATRAC3plus&trade;の音源をループ再生で追加しています。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_5"><h4>
(5)&nbsp;<b>devkit/sample/sound/at3mix/</b><br></h4>
</a></div>
<div style="margin-left:67px;">starmixと同様の、libsas及びlibatrac3plusを同時に使ったサンプルです。<br>ただし、starmixと比べて、よりCPU負荷の軽い方法でのサウンド出力を行なっています。負荷削減の参考にしてみてください。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_6"><h4>
(6)&nbsp;<b>devkit/sample/sound/at3mixEx/</b><br></h4>
</a></div>
<div style="margin-left:67px;">at3mixの効果音発音部分をlibsndpを使うようにしたサンプルです。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_7"><h4>
(7)&nbsp;<b>devkit/sample/sound/at3lowlevel/</b><br></h4>
</a></div>
<div style="margin-left:67px;">低レベル関数を使用したサンプルです。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_8"><h4>
(8)&nbsp;<b>devkit/sample/sound/sas-streaming/</b><br></h4>
</a></div>
<div style="margin-left:67px;">libatrac3plusをlibsasと連携させることにより、SAS経由でATRAC3&trade;音声をストリーミング再生させるサンプルです。<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_2">
<h2>
 2 <!-- hp --><b>動作解説</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_2_1">
<h3>
<a href="#Heading3_2"> 2. </a>1 
<!-- hp1 --><b>ATRAC3&trade;/ATRAC3plus&trade;データの概要</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrac3plusが利用するATRAC3&trade;/ATRAC3plus&trade;データは、主にゲームでの使用を考慮して、ループ再生情報などの情報を含んだデータ構造となっています。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_2">
<h3>
<a href="#Heading3_2"> 2. </a>2 
<!-- hp1 --><b>libatrac3plus使用方法概略</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrac3plusを用いてATRAC3&trade;/ATRAC3plus&trade;データをデコードする際には、まずATRAC&trade; IDとよばれる管理用ID(ハンドル)を取得します。<br>この後、入力用バッファとATRAC&trade; ATRAC&trade; IDを関連付けることにより、以後ATRAC&trade; IDを用いて対象のデータをデコード処理することが可能になります。<br>libatrac3plusを用いてデコード処理を行うまでの使用方法の概略は以下のようになります。<br><br></div>
</ol>
<div style="margin-left:55px;"><ol>
<li VALUE=1> 入力用バッファ及び、出力用バッファを用意します。</li>
<li VALUE=2> ATRAC&trade; IDを取得します。</li>
<li VALUE=3> ATRAC3&trade;/ATRAC3plus&trade;データを入力用バッファへ読み込みます。</li>
<li VALUE=4> ATRAC&trade; IDと入力用バッファを関連付けます。</li>
<li VALUE=5> ATRAC&trade; IDを用いて、出力用バッファへデコードされたデータを出力します。</li>
</ol></div>
<div style="margin-left:50px;"><br>なお、ATRAC&trade; IDはコーデック種類ごとに別のものを使う必要があります。また、同時に使用できるATRAC&trade; IDの数には制限があります(デフォルトでATRAC3plus&trade;用のATRAC&trade; IDが2つ、ATRAC3&trade;用のATRAC&trade; IDが2つ)。この数は<a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracReinit">sceAtracReinit</a>()関数を用いて変更可能です。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_3">
<h3>
<a href="#Heading3_2"> 2. </a>3 
<!-- hp1 --><b>オンメモリ再生とストリーミング再生について</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrc3plusは、入力バッファとATRAC&trade; IDを関連付けて再生処理を行います。入力バッファのサイズがATRAC3&trade;/ATRAC3plus&trade;データよりも大きければ、バッファとATRAC&trade; IDを関連付けた後にデータの読み込みをする必要はありません。このような方法をオンメモリ再生とよびます。逆に、入力バッファのサイズがATRAC3&trade;/ATRAC3plus&trade;データよりも小さい場合には、逐次データを継ぎ足す処理が必要になります。このような再生方法をストリーミング再生とよびます。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_4">
<h3>
<a href="#Heading3_2"> 2. </a>4 
<!-- hp1 --><b>ループ再生の動作解説</b><br>
</a>
</h3>
<div style="margin-left:50px;">図 1に示すようなある楽曲での特定箇所の複数回(無限回数も含む)のループ再生が実現できます。開始位置、終了位置の指定については、後述のat3toolを用いて1サンプル単位で設定することが可能です。libatrac3plusは上記ループ情報に基づき、該当箇所のループ再生を行います。<br><br></div>

<div align=center>
<p>
<img src="gif/libatrac3plus-Overview-Japanese001.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>図 1 ループ再生処理の概要</b><br>
</div>
<br>

<!-- sce_hd4 -->
<a name="Heading4_2_5">
<h3>
<a href="#Heading3_2"> 2. </a>5 
<!-- hp1 --><b>セカンドバッファについて</b><br>
</a>
</h3>
<div style="margin-left:50px;">ループ処理部以降にデータを持つATRAC3&trade;/ATRAC3plus&trade;データ(図 2におけるCの部分を持つデータ)をストリーミング再生するには、2つの入力用のバッファを用意する必要があります。<br>1つ目の入力バッファ(ファーストバッファ)はループ処理部分までのデータを格納するバッファとして、2つ目の入力バッファ(セカンドバッファ)はループ処理以降のデータを格納するバッファとして使用します(図 2下部参照)。<br><br></div>

<div align=center>
<p>
<img src="gif/libatrac3plus-Overview-Japanese002.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>図 2 ファーストバッファ及びセカンドバッファのバッファ制御</b><br>
</div>
<br>
<div style="margin-left:50px;">2つのバッファを用意することにより、ループ部分(B)を繰り返し再生する場合にも、再生位置を先に進める(BからCに移動する)場合にも、急なデータ読み込みを発生させることなく再生を続けることが可能になります(図 3参照)。<br><br></div>

<div align=center>
<p>
<img src="gif/libatrac3plus-Overview-Japanese003.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>図 3 ループ処理部Bの最終位置再生におけるバッファの状態</b><br>
</div>
<br>

<!-- sce_title -->
<a Name ="HeadingT_2_5_1">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:67px;">セカンドバッファが必要なデータの再生中、再生位置が(C)に移動した後には、ファーストバッファも(C)部分のデータを保持するのに使われます。<br>このため、セカンドバッファはそれほど大きくなくても、(C)部分をストリーミング再生する際のデータの読み込み頻度はそれほど増えることはありません。<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_3">
<h2>
 3 <!-- hp --><b>使用手順</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_3_1">
<h3>
<a href="#Heading3_3"> 3. </a>1 
<!-- hp1 --><b>ATRAC3&trade;/ATRAC3plus&trade;データの準備</b><br>
</a>
</h3>
<div style="margin-left:50px;">PCMデータ(.wavファイル)からATRAC3&trade;/ATRAC3plus&trade;データを作成します。必ず後述するat3toolで作成したデータを使用してください。専用ツール以外で作られたデータの動作保証はできません。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_2">
<h3>
<a href="#Heading3_3"> 3. </a>2 
<!-- hp1 --><b>初期化</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrac3plusを使用する前に、まずモジュールユーティリティを用いてモジュールをロードします。ロードすべきモジュールはavcodecとlibatrac3plusです。<br>続いて、次の手順で初期化を行います。<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracGetAtracID">sceAtracGetAtracID</a></b>()を呼び、ATRAC&trade; IDを取得します。ATRAC&trade; IDには同時に使える個数に制限があります。取得ができない場合には、使用していないATRAC&trade; IDを解放してください。</li>
<li VALUE=2> 入力バッファにATRAC3&trade;/ATRAC3plus&trade;データを準備します。入力バッファは、ある程度(数キロバイト)以上のサイズが必要です。データが読み込めたら、<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracSetData">sceAtracSetData</a></b>()などを呼び出し、ATRAC&trade; IDと入力バッファの関連付けを行います。<br>このとき引数として、<i>atracID</i>に1.で取得したATRAC&trade; ID、<i>pucBufferAddr</i>に入力バッファのアドレス、<i>uiBufferByte</i>に入力バッファのサイズを指定します。これにより、libatrac3plusは入力データの先頭部分に存在する曲の長さやループ情報などの情報を読み出し、ライブラリ内部の変数を初期化します。</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_3_3">
<h3>
<a href="#Heading3_3"> 3. </a>3 
<!-- hp1 --><b>セカンドバッファの準備</b><br>
</a>
</h3>
<div style="margin-left:50px;">セカンドバッファは、ループ処理部以降にデータを持つATRAC3&trade;/ATRAC3plus&trade;データをストリーミング再生する際に必要になります(2章参照)。<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracIsSecondBufferNeeded">sceAtracIsSecondBufferNeeded</a></b>()関数を用いて、セカンドバッファが必要かどうかを確認します。不要であれば、次節の「デコード処理」までのステップはスキップしてください。</li>
<li VALUE=2> 初期化処理で使用した入力バッファとは別のバッファをセカンドバッファとして用意します。セカンドバッファについても、ある程度(数キロバイト)以上のサイズが必要です。</li>
<li VALUE=3> <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracGetSecondBufferInfo">sceAtracGetSecondBufferInfo</a></b>()を用いて、セカンドバッファに読み込むデータについての情報を取得します。同関数を呼び出すと<i>*puiPosition</i>にATRAC3&trade;/ATRAC3plus&trade;データの先頭からのループ処理部以降のデータまでのオフセット、*<i>puiDataByte</i>に<i>*puiPosition</i>からファイルの最後までのバイト数が格納されます。</li>
<li VALUE=4> 上記情報を元にセカンドバッファにデータを読み込みます。</li>
<li VALUE=5> データが読み込めたら<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracSetSecondBuffer">sceAtracSetSecondBuffer</a></b>()を呼び出し、ATRAC&trade; IDとセカンドバッファの関連付けを行いライブラリに登録します。</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_3_4">
<h3>
<a href="#Heading3_3"> 3. </a>4 
<!-- hp1 --><b>デコード処理</b><br>
</a>
</h3>
<div style="margin-left:50px;">ライブラリ初期化のあと、次のような手順でデコードを行います。<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> 出力用バッファを用意します。出力バッファは、64バイトアラインメントがとれた64バイトの倍数領域として確保されなければなりません。次回のデコード時に得られるサンプル数及びチャネル数は、<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracGetNextSample">sceAtracGetNextSample</a></b>()及び<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracGetOutputChannel">sceAtracGetOutputChannel</a></b>()を使用することにより得られます。したがって、それらの積の2倍(2バイト=16ビット、デコード結果の1サンプルあたりのデータサイズ)以上の大きさのバッファが必要です。なお、一度のデコードで得られるサンプル数の最大値は、<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracGetMaxSample">sceAtracGetMaxSample</a></b>()により取得できます。</li>
<li VALUE=2> 上記のバッファを<i>psOutAddr</i>に設定し、<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracDecodeData">sceAtracDecodeData</a></b>()を呼びます。</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_3_5">
<h3>
<a href="#Heading3_3"> 3. </a>5 
<!-- hp1 --><b>ストリーミング再生処理</b><br>
</a>
</h3>
<div style="margin-left:50px;">ストリーミング再生処理の手順は以下のようになります。<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracGetRemainFrame">sceAtracGetRemainFrame</a></b>()呼び出し後の*<i>piRemainframe</i>をチェックし、<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracDecodeData">sceAtracDecodeData</a></b>()をあと何回呼び出し可能かをチェックし、継ぎ足し処理を行う必要があるかの判断をします。</li>
<li VALUE=2> <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracGetStreamDataInfo">sceAtracGetStreamDataInfo</a></b>()を用いて、入力バッファのうち、すでにデコードが終了し、不要となった部分に関する情報を取得します。同関数を呼び出すと、<i>*ppucWritePointer</i> に入力バッファのうち不要領域の先頭アドレス、*<i>puiWritableByte</i>に不要領域のサイズ(バイト数)、*<i>puiReadPosition</i>に読み込むべきATRAC3&trade;/ATRAC3plus&trade;データの先頭からのオフセットが格納されます。</li>
<li VALUE=3> 上記情報を元に入力バッファへデータを追加します。この時、追加するデータのサイズは*<i>puiWritableByte</i>より少なければいくつでも構いませんが、読み込む先は<i>*ppucWritePointer</i>からでなければなりません。</li>
<li VALUE=4> 上記で追加したデータサイズを<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracAddStreamData">sceAtracAddStreamData</a></b>()を用いて、libatrac3plusに通知します。</li>
</ol></div>

<!-- sce_title -->
<a Name ="HeadingT_3_5_2">
<div style="margin-left:40px;"><h4><b>補足1</b><br><br></h4></div></a>

<div style="margin-left:67px;">(1)における、データ継ぎ足しの有無の判定方法としてはいろいろな戦略が考えられますが、最も単純な方法としては、入力バッファを二分割し、片方を使用し終わったところで、追加のデータを読み込むというのがあります。<br>このような方法を用いる場合、以下のような方法で読み込みタイミングを調整することが可能です。<br>まず、初期状態における「デコード可能回数(<i>N</i>)」を求めます。この値は入力バッファすべてにデータを読み込んだ状態で<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracGetRemainFrame">sceAtracGetRemainFrame</a></b>()を呼び出し、その後に*<i>piRemainframe</i>の値を確認することで求めることができます。あるいは、以下の式に従って計算することでも可能です。<br></div>
<div style="margin-left:80px;"></div>

<div style="margin-left:67px;">
<p>
<img src="gif/libatrac3plus-Overview-Japanese004.gif">
</div>
<div style="margin-left:80px;"><br></div>
<div style="margin-left:67px;">ここで、<i>Bufsize</i>は入力バッファサイズ(単位バイト)、<i>bps</i>はATRAC3&trade;/ATRAC3plus&trade;データのビットレート(単位kbps)、<i>M</i>は一度のデコードで出力される最大サンプル数で、ATRAC3&trade;のときに1024、ATRAC3plus&trade;の時に2048となります。<br>また、データ読み込みによって処理がとまるといったことがないよう、データ読み込みには非同期読み込み、あるいは優先順位を下げた別スレッドにて行うことを推奨します。<br>ただ、他スレッドの負荷状況などによっては、読み込みが追いつかずに音が途切れてしまう可能性もあります。そのような場合はバッファを大きくしたり、バッファの分割数を増やすなどの方法をとるなどの工夫が必要になります。<br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_5_3">
<div style="margin-left:40px;"><h4><b>補足2</b><br><br></h4></div></a>

<div style="margin-left:67px;">UMD&reg;/DVD経由でストリーミング再生を行う場合には、5章「注意事項」のUMD&reg;/DVD経由のストリーミング再生を参照してください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_6">
<h3>
<a href="#Heading3_3"> 3. </a>6 
<!-- hp1 --><b>再生位置再設定処理</b><br>
</a>
</h3>
<div style="margin-left:50px;">再生位置再設定処理の手順は以下のようになります。<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> 再生位置として設定したい<i>uiSample</i>を指定して<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracGetBufferInfoForResetting">sceAtracGetBufferInfoForResetting</a></b>()を呼び出します。</li>
<li VALUE=2> 上記関数呼び出し後、*<i>puBufferInfo</i>をチェックし、ファーストバッファとセカンドバッファについて以下の情報を取得します。</li>
</ol></div>
<div style="margin-left:70px;"><ul>
<li> バッファへの書き込み開始アドレス
<li> バッファへの書き込み可能な最大バイト数
<li> バッファへの書き込み必要な最小バイト数
<li> バッファへ書き込みを行うデータの読み出し位置
</ol></div>
<div style="margin-left:55px;"><ol>
<li VALUE=3> 上記情報を元にファーストバッファ及び、セカンドバッファへデータの設定を行います。書き込みを行うバイト数は、必要バイト数以上でかつ最大バイト数以下でなければなりません。</li>
<li VALUE=4> 上記で再設定したデータサイズと再生位置<i>uiSample</i>を<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracResetPlayPosition">sceAtracResetPlayPosition</a></b>()を用いて、libatrac3plusに通知します。</li>
</ul>
</ol></div>

<!-- sce_title -->
<a Name ="HeadingT_3_6_4">
<div style="margin-left:40px;"><h4><b>補足</b><br><br></h4></div></a>

<div style="margin-left:67px;">オンメモリ再生の場合には、上記の再生位置再設定処理のうち(1)〜(3)のバッファ制御処理は必要ありません。<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracResetPlayPosition">sceAtracResetPlayPosition</a></b>()の<i>uiWriteByteFirstBuf</i>及び、<i>uiWriteByteSecondBuf</i>には0を設定してください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_7">
<h3>
<a href="#Heading3_3"> 3. </a>7 
<!-- hp1 --><b>終了処理</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrac3plusの終了処理としては、初期化時に確保したATRAC&trade; IDの解放処理があります。ATRAC&trade; IDは限られた個数しか使えませんので、使用しない時には解放処理を行っておく必要があります。ATRAC&trade; IDの解放は、<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracReleaseAtracID">sceAtracReleaseAtracID</a></b>()を使用することにより可能です。<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_4">
<h2>
 4 <!-- hp --><b>エンコードツール</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_4_1">
<h3>
<a href="#Heading3_4"> 4. </a>1 
<!-- hp1 --><b>エンコードツールの概要</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrac3plus専用ATRAC3&trade;/ATRAC3plus&trade;データを作成するために、at3toolが用意されています。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_2">
<h3>
<a href="#Heading3_4"> 4. </a>2 
<!-- hp1 --><b>at3tool</b><br>
</a>
</h3>
<div style="margin-left:50px;">at3toolは、libatrac3plusで用いるATRAC3&trade;/ATRAC3plus&trade;データを作成および確認するために、エンコーダ、デコーダをひとつにまとめたものです。本ツールでエンコード、デコードすることにより、圧縮データの音質や容量を確かめることができ、目的にあった圧縮レートでデータを作成することが可能になります。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_3">
<h3>
<a href="#Heading3_4"> 4. </a>3 
<!-- hp1 --><b>動作環境</b><br>
</a>
</h3>
<div style="margin-left:50px;">at3toolの動作推奨環境は以下のとおりです。<br>詳細については、「at3tool User's manual」をご確認ください。<br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> Windows XP Service Pack 3 (日本語版、及び英語版)
<li> Windows Vista Service Pack 1 (日本語版、及び英語版)
<li> Linux
</ul></div>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd3 -->
<a name="Heading3_5">
<h2>
 5 <!-- hp --><b>注意事項</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_5_1">
<h3>
<a href="#Heading3_5"> 5. </a>1 
<!-- hp1 --><b>取り扱えるストリームデータ</b><br>
</a>
</h3>
<div style="margin-left:50px;">at3toolで作成したデータおよびAA3ファイル出力をサポートしたツールを使用してください。これらのツール以外で作られたデータはlibatrac3plusでの動作保証はできません。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_2">
<h3>
<a href="#Heading3_5"> 5. </a>2 
<!-- hp1 --><b>AA3ファイルについて</b><br>
</a>
</h3>
<div style="margin-left:50px;">ATRAC&trade; Audio with ID3v2 tagの略称で、著作権保護のない非暗号化ATRAC&trade;ファイルです。ID3v2タグと同様のMetadata Part、コーデック情報が書かれたAudio Header Part、エンコードされたATRAC&trade;データのAudio Data Partと3つのブロックから構成されます。<br>libatrac3plusは単純なファイル再生のみをサポートし、ID3v2タグの解釈はサポートしていません。<br>AA3ファイルが作成できるツールとして2006年4月現在、Sony Media Software社から販売されているACID Pro 6があります。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_3">
<h3>
<a href="#Heading3_5"> 5. </a>3 
<!-- hp1 --><b>モノラルデータの出力について</b><br>
</a>
</h3>
<div style="margin-left:50px;">モノラルのデータをデコードする際には、デコード結果としてモノラルもしくはステレオ(左右の両チャンネルに同一のデータを出力する)が選択可能です。詳しくは、libatrac3plusリファレンスの初期化関数に関する記述をご確認ください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_4">
<h3>
<a href="#Heading3_5"> 5. </a>4 
<!-- hp1 --><b>UMD&reg;/DVD経由でストリーミング再生を行う場合について</b><br>
</a>
</h3>
<div style="margin-left:50px;">UMD&reg;/DVD経由でストリーミング再生を行う場合には、<b>sceIoRead</b>()の第2引数である<i>*buf</i>ポインタが4バイトのアラインメントに合致している必要があります。<br>libatrac3plusでストリーミング再生を行う際には、<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracGetStreamDataInfo">sceAtracGetStreamDataInfo</a></b>()の第2引数<i>*ppucWritePointer</i>に次のデータを読む際のアドレスが指定されます。<br>この<i>*ppucWritePoitner</i>を常に4バイトアラインメントに合致したアドレスにするには、以下の条件を満たす必要があります。<br></div>
</ul>
<div style="margin-left:55px;"><ol>
<li VALUE=1> 初期化関数(<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracSetData">sceAtracSetData</a></b>(), <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracSetHalfwayBuffer">sceAtracSetHalfwayBuffer</a></b>(), <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracSetDataAndGetID">sceAtracSetDataAndGetID</a></b>(), <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracSetHalfwayBufferAndGetID">sceAtracSetHalfwayBufferAndGetID</a></b>())で設定するバッファが、4バイトアラインメントに合致しており、かつ4バイトの倍数サイズの領域である。</li>
<li VALUE=2> <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracSetHalfwayBuffer">sceAtracSetHalfwayBuffer</a></b>(), <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracSetHalfwayBufferAndGetID">sceAtracSetHalfwayBufferAndGetID</a></b>()で設定する<i>uiReadByte</i>(バッファの先頭から読み込んだ有効バイト数)が、4バイトの倍数である。</li>
<li VALUE=3> <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracSetSecondBuffer">sceAtracSetSecondBuffer</a></b>()関数で設定するバッファが、4バイトアラインメントに合致しており、かつ4バイトの倍数サイズの領域である。</li>
<li VALUE=4> <b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracAddStreamData">sceAtracAddStreamData</a></b>()関数で設定する<i>uiAddByte</i>のバイト数が4の倍数である。</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_5_5">
<h3>
<a href="#Heading3_5"> 5. </a>5 
<!-- hp1 --><b>ソフトウェアオーディオシンセサイザ(SAS)との同時使用について</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrac3plusのコアとなる部分(ATRAC3&trade;/ATRAC3plus&trade;デコーダ)はMedia Engine上で動作しています。またlibsasも同様にMedia Engine上で動作するSASを呼び出しています。このため、両者を同時に使用すると、Media Engine側の計算機資源を取り合うことになり、最悪SASの音が途切れてしまう場合があります。libsasとlibatrac3plusを同時に利用した際の負荷に関する参考情報を、libsas概要(libsas-Overview)に記載してありますので参考にしてください。なお、libatrac3plusのループ再生処理機能を使用する場合には、ループデータの戻り箇所の前後において一時的に処理負荷が高くなることがあります。したがって、libatrac3plusのループ再生機能とSASを同時に使用する場合には、ループデータの戻り箇所の前後において、SASの音切れが発生しないか特に注意して確認してください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_6">
<h3>
<a href="#Heading3_5"> 5. </a>6 
<!-- hp1 --><b>スレッドのスタックサイズについて</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrac3plusで最も多くスタックを使用する関数は<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracDecodeData">sceAtracDecodeData</a></b>()であり、約10kByteスタック領域を使用します。したがって、libatrac3plusを用いるスレッドには、通常より大きめのスタックサイズを指定する必要があります。<br>詳細なスタックサイズを調べてぎりぎりまでスタックサイズを削減したい場合には、thread.hにて定義されている<b><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetThreadStackFreeSize">sceKernelGetThreadStackFreeSize</a></b>()などを用いてください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_7">
<h3>
<a href="#Heading3_5"> 5. </a>7 
<!-- hp1 --><b>セカンドバッファを用いる場合の注意</b><br>
</a>
</h3>
<div style="margin-left:50px;">セカンドバッファが必要になるデータ(2章参考)をストリーミング再生する場合、現在デコードしている箇所によって、読み込みが必要になるデータの位置が変化します。<br>ループ部分以前の箇所をA、ループより後ろの部分をBとすると、デコード中の箇所とデータの読み込み位置は以下のようになります。<br><br><b>現在デコードが行われている箇所がAの場合：</b><br>現在読み込み済みの箇所に続くAの部分を読み込みます。<br>現在設定されているループ回数分のデータがバッファにすべて読み込まれている場合であっても、回数が変更された場合に対応する為に、ループ再生処理が続くものとしてAの部分を読み込みます。<br><br><b>現在デコードが行われている箇所がBの場合：</b><br>現在読み込み済みの箇所に続くBの部分を読み込みます。<br><br>したがって、セカンドバッファを用いかつ非同期読み込みをする場合には、読み込み開始時点と読み込み終了時点でデコードが行われてしまい、想定される読み込みデータが異なってしまう問題が発生します。<br><br>この問題を回避する方法としては、以下の2つの方法があります。<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> セカンドバッファを使用する場合には、非同期読み込みを行わない。</li>
<li VALUE=2> セカンドバッファを用いて非同期読み込みを行う場合には、非同期読み込みを行う前後でループの再生状態が変更されていないかを<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracGetLoopStatus">sceAtracGetLoopStatus</a></b>()を用いてチェックします。そして、ループ再生状態の変更がない場合のみ、<b><a href="../sound/libatrac3plus-Reference-Japanese.htm#sceAtracAddStreamData">sceAtracAddStreamData</a></b>()を用いてデータの追加を通知します。</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_5_8">
<h3>
<a href="#Heading3_5"> 5. </a>8 
<!-- hp1 --><b>終了処理について</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrac3plusでは、内部的にMedia Engine側CPUの機能を呼び出しており、その際Media Engine内部資源の排他処理のためにセマフォなどを用いています。<br>その為libatrac3plusの関数を実行中にlibatrac3plusを呼び出しているスレッドを<b><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateThread">sceKernelTerminateThread</a></b>()およびスレッドがDORMANT状態になる以前に<b><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateDeleteThread">sceKernelTerminateDeleteThread</a></b>()を使って強制的に削除すると、タイミングによっては内部資源を握った状態でスレッドが削除されてしまうことがあります。この結果libatrac3plusの他Media Engine側CPUの機能を用いる他のライブラリが正しく動作しなくなったりする危険性があります。<br><br>スレッドを停止させる場合は<br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> スレッド停止を命じる側からスレッドに対して共有変数、イベントフラグなどを用いて終了を伝達する。
<li> 停止させられるスレッド側は、上記フラグなどを定期的に監視しておき、停止命令が出ていないかを確認する。出ていた時は現在libatrac3plusが動作していないことを確認した上で<b><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitThread">sceKernelExitThread</a></b>()を呼び出し、自スレッドを停止させる。
</ul></div>
<div style="margin-left:50px;">ようにして下さい(libatrac3plusを用いた各種サンプルもこのような作りになっています)。<br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
