<html lang="en">
<head>
<title>libsndp-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
libsndp Reference
</h1></center>
</a>
<!-- sce_hd1 -->
<div style="margin-left:50px;"><br></div>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceSsSndpCtx"></a>
<table width="100%"><td width="70%"><font size=6>SceSsSndpCtx<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>sndp environment<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct{
	char <i>system</i>[SCE_SNDP_SNDP_CTX_SIZE];
} <b>SceSsSndpCtx</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>system</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Used internally by libsndp.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This structure should be provided for each set of sound data (phd, pbd).<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#sceSsBindSoundData">sceSsBindSoundData</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceSsSmfCtx"></a>
<table width="100%"><td width="70%"><font size=6>SceSsSmfCtx<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>smf environment<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct{
	char <i>system</i>[SCE_SNDP_SMF_CTX_SIZE];
} <b>SceSsSmfCtx</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>system</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Used internally by libsndp.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This structure should be provided for each SMF to be used.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#sceSsSMFBind">sceSsSMFBind</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceSsKeyOnParam"></a>
<table width="100%"><td width="70%"><font size=6>SceSsKeyOnParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Key on parameters<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct {
	unsigned char <i>vel</i>;
	unsigned char <i>pan</i>;
	unsigned char <i>sendVel</i>;
	unsigned char<i> sendPan</i>;
	int <i>addPitch</i>;
} <b>SceSsKeyOnParam</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vel</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Velocity (0 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pan</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Panpot (0 - 64 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sendVel</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Effect send velocity (0 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sendPan</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Effect send panpot (0 - 64 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>addPitch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Added pitch&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This structure is used for setting the velocity and added pitch when starting the production of sound specified by key on and note on.<br>The values of the members are modified based on the tone parameter settings.<br>If the results when the values are modified exceed the upper or lower limit for the respective values, the result is clamped to the upper or lower limit, respectively.<br>For the panpot or effect send panpot, 0 corresponds to the leftmost position, 64 to the middle, and 127 to the rightmost position.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#sceSsNoteOnByTone">sceSsNoteOnByTone</a>(), <a href="../sound/libsndp-Reference-English.htm#sceSsKeyOnByTone">sceSsKeyOnByTone</a>(), <a href="../sound/libsndp-Reference-English.htm#sceSsVoiceNoteOnByTone">sceSsVoiceNoteOnByTone</a>()<br><a href="../sound/libsndp-Reference-English.htm#sceSsVoiceKeyOnByTone">sceSsVoiceKeyOnByTone</a>(), <a href="../sound/libsndp-Reference-English.htm#sceSsNoteOn">sceSsNoteOn</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceSsEffectParam"></a>
<table width="100%"><td width="70%"><font size=6>SceSsEffectParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Effect parameters<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct{
	unsigned int <i>setMask</i>;
	unsigned int <i>type</i>;
	unsigned int <i>delayTime;</i>
	unsigned int <i>feedBack</i>;
	unsigned int <i>effectVolume_l</i>;
	unsigned int <i>effectVolume_r</i>;
	unsigned int <i>drySwitch;</i>
	unsigned int <i>wetSwitch</i>;
} <b>SceSsEffectParam</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>setMask</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Bitwise OR of the desired parameters that are set (see below).&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>type</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Effect type&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>delayTime</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Delay time (0 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>feedBack</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Feedback (0 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>effectVolume_l</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Left channel (Lch) effect volume (0 - 4096)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>effectVolume_r</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Right channel (Rch) effect volume (0 - 4096)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>drySwitch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Dry-side sound ON/OFF switch&nbsp;&nbsp;<br>&nbsp;&nbsp;(SCE_SNDP_OFF=OFF, SCE_SNDP_ON=ON)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>wetSwitch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Wet-side (sound with effect applied) sound ON/OFF switch&nbsp;&nbsp;<br>&nbsp;&nbsp;(SCE_SNDP_OFF=OFF, SCE_SNDP_ON=ON)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">setMask contains the bitwise OR of the following parameter types.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Meaning</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SNDP_FX_PARAM_ALL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Set all parameters&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SNDP_FX_PARAM_TYPE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Set the effect type&nbsp;&nbsp;<br>&nbsp;&nbsp;(set the specified value for type)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SNDP_FX_PARAM_PARAM&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Set the effect parameters&nbsp;&nbsp;<br>&nbsp;&nbsp;(set the specified values for delayTime and feedBack)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SNDP_FX_PARAM_EFFECTVOLUME&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Set the effect volume&nbsp;&nbsp;<br>&nbsp;&nbsp;(set the specified values for effectVolume_l and effectVolume_r)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SNDP_FX_PARAM_SWITCH&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Set the effect switches&nbsp;&nbsp;<br>&nbsp;&nbsp;(set the specified values for drySwitch and wetSwitch)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;"><i>type</i> specifies the effect type. The following constants are provided.<br>SCE_SNDP_FX_TYPE_OFF<br>SCE_SNDP_FX_TYPE_ROOM<br>SCE_SNDP_FX_TYPE_STUDIOA<br>SCE_SNDP_FX_TYPE_STUDIOB<br>SCE_SNDP_FX_TYPE_STUDIOC<br>SCE_SNDP_FX_TYPE_HALL<br>SCE_SNDP_FX_TYPE_SPACE<br>SCE_SNDP_FX_TYPE_ECHO<br>SCE_SNDP_FX_TYPE_DELAY<br>SCE_SNDP_FX_TYPE_PIPE<br><br><i>delayTime</i> specifies the delay time.<br><i>feedBack</i> specifies the amount of feedback.<br><i>effectVolume_l</i> and <i>effectVolume_r</i> specify the left and right effect volumes.<br><i>drySwitch</i> specifies the dry-side switch, and <i>wetSwitch</i> specifies the wet-side switch.<br>For details about effect settings, refer to the SAS documentation.<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsInit"></a>
<table width="100%"><td width="70%"><font size=6>sceSsInit<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Initialization processing<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsInit</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>maxVoice</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>maxVoice</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of voices to be used (1- 32)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the list of libsndp error codes and the list of libsas error codes.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function initializes libsndp's voice management system, the SMF sequencer, and SAS.<br>To use libsndp, this function or <a href="../sound/libsndp-Reference-English.htm#sceSsInitWithGrain">sceSsInitWithGrain</a>() must be called first.<br>Since this function performs SAS initialization, when you use libsndp, do not try to initialize SAS by calling the SAS initialization function.<br><br>Calling this function sets the time for one unit of granularity to 256 samples.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int   result;
	unsigned int   useVoice = 32; /* Number of voices to be used */

	result = sceSsInit(useVoice);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsInitWithGrain"></a>
<table width="100%"><td width="70%"><font size=6>sceSsInitWithGrain<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Initialization processing (with granularity specification)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsInitWithGrain</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>maxVoice,</i>
<i>	</i><a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> grain</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>maxVoice</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of voices to use (1 - 32)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>grain</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Granularity (valid range is 64 to 2048 in multiples of 32; i.e., 64, 96, 128, ..., 2016, 2048)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it means that an error occurred.<br><br>(For details, see the List of libsndp Error Codes and the List of libsas Error Codes.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function initializes the voice management system within libsndp, the SMF sequencer, and SAS.<br>To use libsndp, this function or <a href="../sound/libsndp-Reference-English.htm#sceSsInit">sceSsInit</a>() must be called first.<br>Since this function also performs SAS initialization, do not use a SAS function to initialize SAS if you are also using libsndp.<br>As the value of <i>grain</i> decreases, sound production changes can be expressed in a shorter granularity time, but the CPU processing load will increase.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int   result;
	unsigned int   useVoice = 32; /* Number of voices to use */
          unsigned int   Grain = 1024; /* Granularity */

	result = sceSsInitWithGrain(useVoice, Grain);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsExit"></a>
<table width="100%"><td width="70%"><font size=6>sceSsExit<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Termination processing<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsExit</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the list of libsndp error codes and the list of libsas error codes.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs libsndp termination processing and SAS termination processing.<br>Always execute this function when exiting an application that has been using libsndp.<br>Since this function performs SAS termination processing, do not execute the SAS termination function.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int   result;

	result = sceSsExit();

	return 0;
}

</font></pre></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSynthesis"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSynthesis<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>libsndp periodic processing<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSynthesis</b>(
	short *<i>pOut</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe for key on, key off, note on, and note off functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pOut</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to waveform output buffer&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Calling this function causes SMF sequence processing and voice processing to be performed for one unit of granularity. Note that this function also calls <a href="../sound/libsas-Reference-English.htm#sceSasCore">sceSasCore</a>() internally. After processing is completed, the voice states are updated so that voice processing can continue the next time the function is called.<br><br>Since <a href="../sound/libsas-Reference-English.htm#sceSasCore">sceSasCore</a>() is called internally by this function, do not call <a href="../sound/libsas-Reference-English.htm#sceSasCoreWithMix">sceSasCoreWithMix</a>() or <a href="../sound/libsas-Reference-English.htm#sceSasCore">sceSasCore</a>().<br>Operations that cause a change in voice state (such as note on, note off, key on, and key off) can be performed by another thread while this function is executing.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int   result;
	short *pOut;

	result = sceSsSynthesis(pOut);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSynthesisWithMix"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSynthesisWithMix<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>libsndp periodic processing (with external PCM mixing function)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSynthesisWithMix</b>(
	short *<i>pInOut,</i>
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a><i> lVol,</i>
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a><i> rVol</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe for key on, key off, note on, and note off functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pInOut</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to waveform output buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>lVol</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Volume value for left channel of external PCM input&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>rVol</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Volume value for right channel of external PCM input&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it means that an error occurred.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Calling this function causes SMF sequence processing and voice processing for one unit of granularity to be performed. This function also calls <a href="../sound/libsas-Reference-English.htm#sceSasCoreWithMix">sceSasCoreWithMix</a>() internally. Consequently, PCM data in a specified area is mixed to produce the resultant output. Then, the voice states are updated to prepare for voice processing until the next time this function is called.<br><i>pInOut</i> must have 64-byte alignment.<br>During mixing, the volume of the input PCM can be changed. The following shows the valid range for the volume.<br><br>	0 &lt;= lVol, rVol &lt;= SCE_SNDP_VOLUME_MAX<br><br>Since <a href="../sound/libsas-Reference-English.htm#sceSasCoreWithMix">sceSasCoreWithMix</a>() is called internally by this function, be sure not to use <a href="../sound/libsas-Reference-English.htm#sceSasCore">sceSasCore</a>() or <a href="../sound/libsas-Reference-English.htm#sceSasCoreWithMix">sceSasCoreWithMix</a>().<br>Operations that cause a change in voice state (such as note on, note off, key on, and key off) can be performed by another thread while this function is executing.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int   result;
	short *pInOut;
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> lVol = SCE_SNDP_VOLUME_MAX;
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> rVol = SCE_SNDP_VOLUME_MAX;

	/*
		After lVol and rVol processing are performed for the sound in the
                 pInOut buffer (such as background music), the sound is mixed with
                 the sound generated by SAS.
	*/
	result = sceSsSynthesisWithMix(pInOut,lVol,rVol);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceSetReserveMode"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceSetReserveMode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set a voice to be managed by libsndp<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceSetReserveMode</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>reserveMode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>voiceNum</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;Voice&nbsp;number&nbsp;for&nbsp;which&nbsp;the&nbsp;management&nbsp;status&nbsp;is&nbsp;to&nbsp;be&nbsp;set&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;<i>reserveMode</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;Status&nbsp;to&nbsp;be&nbsp;set&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_SNDP_ON&nbsp;</td>
<td valign="top">&nbsp;Place&nbsp;voice&nbsp;under&nbsp;sndp&nbsp;management&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_SNDP_OFF&nbsp;</td>
<td valign="top">&nbsp;Remove&nbsp;voice&nbsp;from&nbsp;sndp&nbsp;management&nbsp;</td>
</tr></table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function turns ON/OFF the management state of libsndp for voices reserved by <a href="../sound/libsndp-Reference-English.htm#sceSsInit">sceSsInit</a>().<br>It returns an error if a voice is specified that has not been reserved by <a href="../sound/libsndp-Reference-English.htm#sceSsInit">sceSsInit</a>().<br>The default voice management status is SCE_SNDP_ON.<br>libsndp will not use voices that were removed from management.<br>A voice that was removed from libsndp management can be used by libsas.<br>To set the management status of a voice, execute this function after stopping sound production for that voice.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int   result;

	/* Remove voice 0 from libsndp management */
	result = sceSsVoiceSetReserveMode(0, SCE_SNDP_OFF);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsBindSoundData"></a>
<table width="100%"><td width="70%"><font size=6>sceSsBindSoundData<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Register sound data<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsBindSoundData</b>(
	<a href="../sound/libsndp-Reference-English.htm#SceSsSndpCtx">SceSsSndpCtx</a> <i>*sndpCtx,</i>
	void <i>*phd</i>,
	void <i>*pbd</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sndpCtx</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to sndp environment structure&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>phd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to phd data&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pbd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to pbd data&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The allocated phd ID is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function registers one set of sound data (phd, pbd) in libsndp.<br>Be sure to prepare an sndp environment structure for each set of sound data.<br>Sound data is accessed using the phd ID returned by this function.<br>Up to 128 sets of sound data can be registered.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int phdID;
	<a href="../sound/libsndp-Reference-English.htm#SceSsSndpCtx">SceSsSndpCtx</a> sndpCtx;
	unsigned char *phd, *pbd;


	phdID = sceSsBindSoundData(&amp;sndpCtx, phd, pbd);

	return 0;
}

</font></pre></div>

<!-- Notes -->
<div style="margin-left:10px;"><b>Notes</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The sndpCtx structure in the argument does not need to be initialized. Be sure to allocate memory and pass it as a work area. <br>For details about sound data (phd, pbd), refer to the document entitled, "PHD/PBD Formats."<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#SceSsSndpCtx">SceSsSndpCtx</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsUnbindSoundData"></a>
<table width="100%"><td width="70%"><font size=6>sceSsUnbindSoundData<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cancel registered sound data<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsUnbindSoundData</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>phdID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>phdID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;phd ID for which registered sound data is to be canceled&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function cancels sound data (phd, pbd) that has been registered.<br>After the sound data corresponding to the phd ID is canceled by this function, that sound data can no longer be used.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsUnbindSoundData(0);

	return 0;
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#sceSsBindSoundData">sceSsBindSoundData</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsNoteOnByTone"></a>
<table width="100%"><td width="70%"><font size=6>sceSsNoteOnByTone<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Note on by tone<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsNoteOnByTone</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> phdID,</i>
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>toneIndex</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>note</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>keyOnID</i>,
	<a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> <i>*keyOnParam</i>
)

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>phdID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;phd ID that contains tone for which note on is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>toneIndex</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Tone index for which note on is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>note</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Note number (0 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>keyOnID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Key on ID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>keyOnParam</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to <a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> structure&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The voice number for which note on was performed is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function produces sound using the pitch specified by <i>note</i> and based on the tone parameters within the phd indicated by <i>toneIndex </i>(index of structure toneParamCtx of tone attribute data). Although the voice to be used is allocated automatically, sound may not actually be produced, depending on the priority that was set in the tone parameters. (Please refer to the &quot;PHD/PBD Formats&quot; document for details on the format of tone data.)<br>Also, when the corresponding voice is paused, <a href="../sound/libsndp-Reference-English.htm#SCE_SNDP_ERROR_PAUSEVOICE">SCE_SNDP_ERROR_PAUSEVOICE</a> is returned.<br>The actual note for which sound is produced is determined from the note number that is set in the argument and the center note in the tone parameter. For example, if note on is performed for the same note as the center note in the tone parameter, the pitch of the fundamental tone is used to generate sound for its waveform.<br>(The center detune and detune values are also taken into consideration for the actual pitch.)<br><br>Actual sound generation starts after <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() is called. However, if sound generation is stopped or another sound is generated for the allocated voice before <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() is called, no sound is actually generated.<br><br>The volume and added pitch are set in the <a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> structure.<br><br>The key on ID is an identifier used for generating sound .<br>Note that since the key on IDs 0x80000000 to 0xFFFFFFFF are reserved by libsndp, they should not be used.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int voiceNum;
	<a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> keyOnParam;

	keyOnParam.vel = 127;
	keyOnParam.pan = 64;
	keyOnParam.sendVel = 127;
	keyOnParam.sendPan = 64;
	keyOnParam.addPitch = 0;

	/* Generate sound for phdID = 0, tone index = 0, note = 64, and */
	/* key on Id = 0 */
	voiceNum = sceSsNoteOnByTone(0, 0, 64, 0, &amp;keyOnParam);

	return 0;
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsKeyOnByTone"></a>
<table width="100%"><td width="70%"><font size=6>sceSsKeyOnByTone<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Key on by tone<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsKeyOnByTone</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>phdID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>toneIndex</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>pitch,</i>
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>keyOnID,</i>
	<a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> *<i>keyOnParam</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>phdID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;phd ID that includes the tone for which key on is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>toneIndex</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Tone index for which key on is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pitch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pitch (0x0001 - 0x4000)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>keyOnID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Key on ID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>keyOnParam</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to <a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> structure&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The voice number for which note on was performed is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function produces sound using the pitch specified by <i>pitch</i> and based on the tone parameters within the phd indicated by <i>toneIndex</i>. Although the voice to be used is allocated automatically, sound may not actually be produced, depending on the priority that was set in the tone parameters.<br>Also, when the corresponding voice is paused, <a href="../sound/libsndp-Reference-English.htm#SCE_SNDP_ERROR_PAUSEVOICE">SCE_SNDP_ERROR_PAUSEVOICE</a> is returned.<br><br>The actual note for which sound is produced is determined from the note number that is set in the argument and the center note in the tone parameter. For example, if note on is performed for the same note as the center note in the tone parameter, the pitch of the fundamental tone is used to generate sound for its waveform.<br>(The center detune and detune values are also taken into consideration for the actual pitch.)<br><br>Actual sound generation starts after <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() is called. However, if sound generation is stopped or another sound is generated for the allocated voice before <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() is called, no sound is actually generated.<br><br>The volume and added pitch are set in the <a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> structure.<br><br>The key on ID is an identifier used for generating sound .<br>Note that since the key on IDs 0x80000000 to 0xFFFFFFFF are reserved by libsndp, they should not be used.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int voiceNum;
	<a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> keyOnParam;

	keyOnParam.vel = 127;
	keyOnParam.pan = 64;
	keyOnParam.sendVel = 127;
	keyOnParam.sendPan = 64;
	keyOnParam.addPitch = 0;

	/* Generate sound for phdID = 0, tone index = 0, pitch = 0x1000, */
	/* and key on Id = 0 */
	voiceNum = sceSsKeyOnByTone(0, 0, 0x1000, 0, &amp;keyOnParam);

	return 0;
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceNoteOnByTone"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceNoteOnByTone<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Note on by tone (specifying voice)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceNoteOnByTone</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>phdID</i>, 
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> toneIndex</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>note</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>keyOnID</i>, 
	<a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> <i>*keyOnParam</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>phdID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;phd ID that includes the tone for which note on is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice number for which note on is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>toneIndex</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Tone index for which note on is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>note</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Note number (0 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>keyOnID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Key on ID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>keyOnParam</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to <a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> structure&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The voice number for which note on was performed is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function produces sound using the pitch specified by <i>note</i> and based on the tone parameters within the phd indicated by <i>toneIndex</i>. Sound is forcibly produced by the specified voice.<br><br>The actual note for which sound is produced is determined from the note number that is set in the argument and the center note in the tone parameter. For example, if note on is performed for the same note as the center note in the tone parameter, the pitch of the fundamental tone is used to generate sound for its waveform.<br>(The center detune and detune values are also taken into consideration for the actual pitch.)<br><br>Actual sound generation starts after <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() is called. However, if sound generation is stopped or another sound is generated for the voice that is set before <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() is called, no sound is actually generated.<br>Also, when the corresponding voice is paused, <a href="../sound/libsndp-Reference-English.htm#SCE_SNDP_ERROR_PAUSEVOICE">SCE_SNDP_ERROR_PAUSEVOICE</a> is returned.<br><br>The volume and added pitch are set in the <a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> structure.<br><br>Voices that can be specified in the <i>voiceNum</i> argument can only be voices that were previously registered using <a href="../sound/libsndp-Reference-English.htm#sceSsInit">sceSsInit</a>().<br><br>The key on ID is an identifier used for generating sound .<br>Note that since the key on IDs 0x80000000 to 0xFFFFFFFF are reserved by libsndp, they should not be used.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int voiceNum;
	<a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> keyOnParam;

	keyOnParam.vel = 127;
	keyOnParam.pan = 64;
	keyOnParam.sendVel = 127;
	keyOnParam.sendPan = 64;
	keyOnParam.addPitch = 0;

	/* Generate sound for phdID = 0, tone index = 0, note = 64, */
	/* and key on Id = 0 */
	voiceNum = sceSsVoiceNoteOnByTone(0, 0, 0, 64, 0, &amp;keyOnParam);

	return 0;
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceKeyOnByTone"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceKeyOnByTone<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Key on by tone (voice specification)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceKeyOnByTone</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>phdID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>toneIndex</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> pitch</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>keyOnID</i>,
	<a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> *<i>keyOnParam</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>phdID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;phd ID that includes the tone for which key on is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice number for which key on is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>toneIndex</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Tone index for which key on is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pitch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pitch (0x0001 - 0x4000)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>keyOnID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Key on ID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>keyOnParam</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to <a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> structure&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The voice number for which key on was performed is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function produces sound using the pitch specified by <i>pitch</i> and based on the tone parameters within the <i>phd</i> indicated by <i>toneIndex</i>. Sound is forcibly produced by the specified voice.<br><br>The actual note for which sound is produced is determined from the note number that is set in the argument and the center note in the tone parameter. For example, if note on is performed for the same note as the center note in the tone parameter, the pitch of the fundamental tone is used to generate sound for its waveform.<br>(The center detune and detune values are also taken into consideration for the actual pitch.)<br><br>Actual sound generation starts after <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() is called. However, if sound generation is stopped or another sound is generated for the voice that is set before <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() is called, no sound is actually generated. <br>Also, when the corresponding voice is paused, <a href="../sound/libsndp-Reference-English.htm#SCE_SNDP_ERROR_PAUSEVOICE">SCE_SNDP_ERROR_PAUSEVOICE</a> is returned.<br><br>The volume and added pitch are set in the <a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> structure.<br><br>The key on ID is an identifier used for generating sound .<br>Note that since the key on IDs 0x80000000 to 0xFFFFFFFF are reserved by libsndp, they should not be used.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int voiceNum;
	<a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> keyOnParam;

	keyOnParam.vel = 127;
	keyOnParam.pan = 64;
	keyOnParam.sendVel = 127;
	keyOnParam.sendPan = 64;
	keyOnParam.addPitch = 0;

	/* Generate sound for phdID = 0, tone index = 0, pitch = 0x1000, */
	/* and key on Id = 0 */
	voiceNum = sceSsVoiceKeyOnByTone(0, 0, 0, 0x1000, 0, &amp;keyOnParam);

	return 0;
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceSetSustainHold"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceSetSustainHold<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set sustain hold state for a voice<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceSetSustainHold</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>sustainHold</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>voiceNum</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;Voice&nbsp;number&nbsp;for&nbsp;which&nbsp;sustain&nbsp;hold&nbsp;state&nbsp;is&nbsp;to&nbsp;be&nbsp;set&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;<i>sustainHold</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;Sustain&nbsp;hold&nbsp;state&nbsp;to&nbsp;be&nbsp;set&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_SNDP_OFF&nbsp;</td>
<td valign="top">&nbsp;Sustain&nbsp;hold&nbsp;off&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_SNDP_ON&nbsp;</td>
<td valign="top">&nbsp;Sustain&nbsp;hold&nbsp;on&nbsp;</td>
</tr></table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the sustain state for a voice. If an operation is performed to stop sound generation for a voice that has sustain hold on, and if the sound being generated is a loop waveform, sound generation will not be stopped and the voice will transition to sustain state. To stop sound generation for a voice in sustain state, sustain hold must be switched off.<br>Also, when the corresponding voice is paused, <a href="../sound/libsndp-Reference-English.htm#SCE_SNDP_ERROR_PAUSEVOICE">SCE_SNDP_ERROR_PAUSEVOICE</a> is returned.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int result;


	result = sceSsVoiceSetSustainHold(0, SCE_SNDP_ON);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceKeyoff"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceKeyoff<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Voice key off<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceKeyoff</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice for which key off is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br> (For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs key off for the specified voice. The voice will transition to sustain state when sustain hold is on. The actual key off is performed when sustain hold is turned off.<br>Also, when the corresponding voice is paused, <a href="../sound/libsndp-Reference-English.htm#SCE_SNDP_ERROR_PAUSEVOICE">SCE_SNDP_ERROR_PAUSEVOICE</a> is returned.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	/* Perform key off for voice 0 */
	result = sceSsVoiceKeyoff(0);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceSoundOff"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceSoundOff<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Voice sound off<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceSoundOff</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice for which sound off is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function quickly ends sound production for the specified voice. It turns sustain hold off, performs key off, and sets the shortest possible ADSR release time. It is useful when you want to quickly end sound production for a voice while calling <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() successively. Also, when the corresponding voice is paused, <a href="../sound/libsndp-Reference-English.htm#SCE_SNDP_ERROR_PAUSEVOICE">SCE_SNDP_ERROR_PAUSEVOICE</a> is returned.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>This example performs sound off for the voice of the specified MIDI channel.

#include &lt;libsndp.h&gt;

/*
 Arguments
   midich : MIDI channel
   id : Key-on ID
 */
int main(int midich, int id)
{
	int result;
	int vnum;
	unsigned int vbit;

	/* Get bit pattern of voice which is generating sound for the specified
                       MIDI channel  */
	vbit = <a href="../sound/libsndp-Reference-English.htm#sceSsGetVoice">sceSsGetVoice</a>(midich, id);

	for(vnum=0; (vnum&lt;SCE_SAS_VOICE_MAX) || (vbit!=0); vnum++){
		if(vbit &amp; 0x0001){ /* If ON voice */
			/* Turn sound off for voice vnum */
			result = sceSsVoiceSoundOff(vnum);
			if(result &lt; 0) return result; /* End if error occurs */
			}
		vbit &gt;&gt;= 1;
	}
	return result;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceSetPitch"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceSetPitch<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Add pitch to a voice producing sound<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceSetPitch</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>,
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a><i> addPitch</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Target voice number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>addPitch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Added pitch to be set&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function adds the pitch to the specified voice. If a negative value was set for the added pitch, the pitch is reduced. A negative number can also be specified for <i>addPitch</i>.<br>If the added pitch falls below 0x1 or exceeds 0x4000, it is clamped to 0x1 or 0x4000, respectively.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	/* Add pitch 0x200 to voice 0 */
	result = sceSsVoiceSetPitch(0, 0x200);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceSetVelocity"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceSetVelocity<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set voice velocity<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceSetVelocity</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>velocity</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Target voice number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>velocity</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Velocity to be set (0 - 127)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the velocity of a voice. The velocity is a value that is relative to the volume that was set in the tone parameters in the PHD.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	/* Set velocity 127 for voice 0 */
	result = sceSsVoiceSetVelocity(0, 127);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceSetPanpot"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceSetPanpot<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set voice panpot<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceSetPanpot</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum,</i> 
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>panpot</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Target voice number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>panpot</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Panpot to be set (0 - 64 - 127)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the panpot of a voice. The value 0 corresponds to the leftmost position, 127 to the rightmost position, and 64 to the middle.<br>This value is added to the actual panpot that was set for the tone parameters in the PHD. If the result falls below 0 or exceeds 127, it is clamped to 0 or 127, respectively.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	/* Set panpot 127 for voice 0 */
	result = sceSsVoiceSetPanpot(0, 127);

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceSetPitchBend"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceSetPitchBend<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set pitch bend of voice<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceSetPitchBend</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum,</i> 
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>bendValue</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice number for which pitch bend is to be set&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bendValue</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pitch bend value to be set&nbsp;&nbsp;<br>&nbsp;&nbsp;0 to 8191 (Bend Down)&nbsp;&nbsp;<br>&nbsp;&nbsp;8192 (Center)&nbsp;&nbsp;<br>&nbsp;&nbsp;8193 to 16383 (Bend Up)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing completes normally, SCE_OK is returned.<br>If an error occurs, the return value is negative (&lt; 0).<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the pitch bend of a voice.<br>The pitch varies within the range that was set by the bend range of the tone parameter in the PHD.<br><i>bendValue</i> is a range that matches the MIDI pitch bend value.<br><i>bendValue</i> and pitch vary linearly relative to the musical scale (cents).<br>The pitch bend effect is effective only for a voice for which sound is being produced according to a specified note (<a href="../sound/libsndp-Reference-English.htm#sceSsNoteOnByTone">sceSsNoteOnByTone</a>, <a href="../sound/libsndp-Reference-English.htm#sceSsVoiceNoteOnByTone">sceSsVoiceNoteOnByTone</a>, or <a href="../sound/libsndp-Reference-English.htm#sceSsNoteOn">sceSsNoteOn</a>).<br>Since the bend range width is ambiguous for a voice for which sound is produced by directly specifying the pitch, the pitch bend effect is not effective in those cases (it is not effective for <a href="../sound/libsndp-Reference-English.htm#sceSsKeyOnByTone">sceSsKeyOnByTone</a> or <a href="../sound/libsndp-Reference-English.htm#sceSsVoiceKeyOnByTone">sceSsVoiceKeyOnByTone</a>).<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	/* Set a maximum pitch bend of 16383 for voice 0 */
	result = sceSsVoiceSetPitchBend(0, 16383);

	return 0;
}



</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceSetSendVelocity"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceSetSendVelocity<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set effect send velocity of a voice<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceSetSendVelocity</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>sendVelocity</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice number that is set&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sendVelocity</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Effect send velocity that is set (0 - 127)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the velocity of a voice. The velocity is a value that is relative to the volume that was set in the tone parameters in the PHD.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	/* Set effect send velocity 127 for voice 0 */
	result = sceSsVoiceSetSendVelocity(0, 127);

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceSetSendPanpot"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceSetSendPanpot<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set effect send panpot of a voice<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceSetSendPanpot</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>sendPanpot</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Target voice number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sendPanpot</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Effect send panpot to be set (0 - 64 - 127)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the effect send panpot of a voice. The value 0 corresponds to the leftmost position, 127 to the rightmost position, and 64 to the middle.<br>This value is added to the actual effect send panpot that was set for the tone parameters in the PHD. If the result falls below 0 or exceeds 127, it is clamped to 0 or 127, respectively.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	/* Set effect send panpot 127 for voice 0 */
	result = sceSsVoiceSetSendPanpot(0, 127);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceAllKeyOff"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceAllKeyOff<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>All key off<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceAllKeyOff</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br>If voices are included that have errors, the error code of the last voice that caused an error is returned.<br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function keys off all voices that are being managed by libsndp (performs key off and puts ADSR in release state).<br>Sound production is stopped after turning sustain hold state off for any voice for which sustain hold has been set.<br>Also, when the corresponding voice is paused, <a href="../sound/libsndp-Reference-English.htm#SCE_SNDP_ERROR_PAUSEVOICE">SCE_SNDP_ERROR_PAUSEVOICE</a> is returned.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	/* Stop sound production of all voices */
	result = sceSsVoiceAllKeyOff();

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceAllSoundOff"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceAllSoundOff<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>All sound off<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceAllSoundOff</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br>If voices are included that have errors, the error code of the last voice that caused an error is returned. <br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function quickly ends sound production for all voices under libsndp management. It turns sustain hold off, performs key off and sets the shortest possible ADSR release time. It is useful when you want to quickly end sound production for all voices while calling <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() successively.<br>When <a href="../sound/libsndp-Reference-English.htm#sceSsVoiceAllKeyOff">sceSsVoiceAllKeyOff</a>() is used, the ADSR release time of the voices which were keyed off is long and it will take time before the voices stop producing sound. By comparison, the voices will take less time to finish when sceSsVoiceAllSoundOff() is used. However, note that reverberation will not stop. Also, when any one of the voices is paused, <a href="../sound/libsndp-Reference-English.htm#SCE_SNDP_ERROR_PAUSEVOICE">SCE_SNDP_ERROR_PAUSEVOICE</a> is returned.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	/* Stop sound production for all voices */
	result = sceSsVoiceAllSoundOff();

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceSetPause"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceSetPause<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Pause voice playback<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceSetPause</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum,</i>
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>mode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice number to be paused or for which pause is to be canceled (0 to 31)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pause state (1: Set pause; 0: Cancel pause)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, SCE_OK is returned.<br>When an error occurs, a negative value (&lt; 0) is returned.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets or cancels pause state for the voice having the specified number. <br>If <a href="../sound/libsndp-Reference-English.htm#sceSsVoiceGetStatus">sceSsVoiceGetStatus</a>() is executed for the voice during a pause, the value in effect immediately before the pause is returned.<br>If a reserved pause is specified, an error (<a href="../sound/libsndp-Reference-English.htm#SCE_SNDP_ERROR_RESERVEDVOICE">SCE_SNDP_ERROR_RESERVEDVOICE</a>) is returned.<br>If a note on or note off is performed for a paused voice, it will be ignored by the voice. An error (<a href="../sound/libsndp-Reference-English.htm#SCE_SNDP_ERROR_PAUSEVOICE">SCE_SNDP_ERROR_PAUSEVOICE</a>) may be returned, depending on the function.<br><br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceGetEndFlag"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceGetEndFlag<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get sound production end flag for a voice<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceGetEndFlag</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice number for which end flag is to be obtained&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The sound production end flag status is returned.<br>0:  The end of sound production has not been reached<br>1:  The end of sound production has been reached<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the sound production end flag for a voice.<br>If envelope processing has ended and sound production has ended, the end flag is 1. If sound is being produced, the end flag is 0. All end flags will be set to 1 immediately after initialization (<a href="../sound/libsndp-Reference-English.htm#sceSsInit">sceSsInit</a>).<br><br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	/* Get the sound production end flag status of voice 0 */
	result = sceSsVoiceGetEndFlag(0);

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceGetEnvelope"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceGetEnvelope<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get envelope value of a voice<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceGetEnvelope</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> voiceNum</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice number for which envelope value is to be obtained&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the list of libsndp error codes and the list of libsas error codes.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function returns the value of the envelope wave height that was obtained.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	/* Get envelope value of voice 0 */
	result = sceSsVoiceGetEnvelope(0);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceGetStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceGetStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get voice state<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceGetStatus</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>voiceNum</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice number for which voice state is to be obtained&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The state of the specified voice is returned.<br>SCE_SNDP_VOICESTATUS_RESERVED<br>SCE_SNDP_VOICESTATUS_IDLE<br>SCE_SNDP_VOICESTATUS_BUSY<br>SCE_SNDP_VOICESTATUS_RELEASE<br>SCE_SNDP_VOICESTATUS_SUSTAIN<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the state of a voice.<br>SCE_SNDP_VOICESTATUS_RESERVED corresponds to a voice that was removed from libsndp management.<br>(To remove a voice from libsndp management, use <a href="../sound/libsndp-Reference-English.htm#sceSsVoiceSetReserveMode">sceSsVoiceSetReserveMode</a>().<br><br>SCE_SNDP_VOICESTATUS_IDLE corresponds to a voice that is first used as a result of a note on event that immediately follows libsndp initialization, or a voice that has finished vocalization.<br><br>SCE_SNDP_VOICESTATUS_RELEASE corresponds to a voice when ADSR is being released by a vocalization stop (note off) event, or a voice when ADSR is released by the next <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() call.<br><br>SCE_SNDP_VOICESTATUS_SUSTAIN corresponds to a voice for which the vocalization stop (note off) event occurred but hold is being sustained by the <a href="../sound/libsndp-Reference-English.htm#sceSsVoiceSetSustainHold">sceSsVoiceSetSustainHold</a>() function.<br><br>SCE_SNDP_VOICESTATUS_BUSY corresponds to a voice that is vocalized by the next <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() call or a voice for which vocalization is being sustained by a vocalization start (note on) event.<br><br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsVoiceGetStatus(0);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceGetLevel"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceGetLevel<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get voice level setting<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceGetLevel</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> voiceNum,</i>
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a><i> *lVol,</i>
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a><i> *rVol</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice number for which level is to be obtained&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>lVol</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer for returning the left volume value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>rVol</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer for returning the right volume value&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it means that an error occurred.<br><br>(For details, see the List of libsndp Error Codes and the List of libsas Error Codes.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the volume of a voice.<br>Specifically, it gets the setting of the <a href="../sound/libsas-Reference-English.htm#sceSasSetVolume">sceSasSetVolume</a>() function that is called internally by libsndp.<br>The range of volume values is as follows.<br><br></div>
<div style="margin-left:70px;">-SCE_SNDP_VOLUME_MAX &lt;= <i>lVol</i>, <i>rVol</i>  &lt;=SCE_SNDP_VOLUME_MAX<br></div>
<div style="margin-left:50px;"><br>A negative value inverts the phase.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
          int result;
	int nvoice;
          int VolumeL, VolumeR;

	/* Get the voice envelope value */
          nvoice = 0;  /*  Voice 0  */
	result = sceSsVoiceGetLevel(nvoice, &amp;VolumeL, &amp;VolumeR);
	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsVoiceGetSendLevel"></a>
<table width="100%"><td width="70%"><font size=6>sceSsVoiceGetSendLevel<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get effect send level setting of voice<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsVoiceGetSendLevel</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> voiceNum,</i>
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a><i> *lVol,</i>
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a><i> *rVol</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>voiceNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice number for which level is to be obtained&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>lVol</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer for returning the left effect send volume value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>rVol</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer for returning the right effect send volume value&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it means that an error occurred.<br><br>(For details, see the List of libsndp Error Codes and the List of libsas Error Codes.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the effect send volume of a voice.<br>Specifically it gets the setting of the <a href="../sound/libsas-Reference-English.htm#sceSasSetVolume">sceSasSetVolume</a>() function that is called internally by libsndp.<br>The range of volume values is as follows.<br><br></div>
<div style="margin-left:70px;">-SCE_SNDP_VOLUME_MAX &lt;= <i>Vol</i>, <i>rVol</i>  &lt;= SCE_SNDP_VOLUME_MAX<br></div>
<div style="margin-left:50px;"><br>A negative value inverts the phase.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
          int result;
	int nvoice;
          int VolumeL, VolumeR;

	/* Get the voice envelope value */
          nvoice = 0;  /*  Voice 0  */
	result = sceSsVoiceGetSendLevel(nvoice, &amp;VolumeL, &amp;VolumeR);
	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsKeyOffByID"></a>
<table width="100%"><td width="70%"><font size=6>sceSsKeyOffByID<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Key off a voice producing sound by its key on ID<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <b>sceSsKeyOffByID</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> ID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>ID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Key on ID for which key off is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The bit pattern of the voice for which key off was performed is returned.<br>If the return value is zero, it means key off was not performed for any voice.<br><br>The relationship between the bit No. and voice No. is shown below.<br><br></div>

<div style="margin-left:50px;">
<p>
<img src="gif/libsndp-Reference-English001.gif">
</div>
<div style="margin-left:50px;"><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs key off for a voice that is producing sound by using its key on ID.<br>However, a voice for which the sustain hold state was set to on switches to sustain state, and key off is performed when the sustain hold state is turned off.<br>Also, when the corresponding voices include a paused voice, the operation for the paused voice is ignored.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	unsigned int result;

	/* Stop sound production of voice with key on ID = 0 */
	result = sceSsKeyOffByID(0);

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsGetVoice"></a>
<table width="100%"><td width="70%"><font size=6>sceSsGetVoice<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get sound-producing voice using MIDI channel and key on ID<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <b>sceSsGetVoice</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>midiChannel</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>ID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>midiChannel</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;MIDI channel for which voice is to be obtained&nbsp;&nbsp;<br>&nbsp;&nbsp;(0 to 15 = MIDI channels 1 to 16)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>ID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Key on ID for which voice is to be obtained&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The bit pattern of the voice that was obtained is returned.<br>If the return value is zero, it means that no voice was obtained.<br><br>The relationship between the bit No. and voice No. is shown below.<br><br></div>

<div style="margin-left:50px;">
<p>
<img src="gif/libsndp-Reference-English002.gif">
</div>
<div style="margin-left:50px;"><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the voice producing sound from its MIDI channel and key on ID.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	unsigned int result;

	/* Get voice with key on MIDI channel = 1 and key on ID = 0 */
	result = sceSsGetVoice(0, 0);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsGetPause"></a>
<table width="100%"><td width="70%"><font size=6>sceSsGetPause<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get pause states of voices<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <b>sceSsGetPause</b>(
<i>	void</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">A bit pattern indicating the pause states of the voices that were obtained is returned.<br>A 1 indicates that the voice is paused, and a 0 indicates that the pause was canceled.<br><br>The relationship between the bit No. and voice No. is as follows.<br><br></div>

<div style="margin-left:50px;">
<p>
<img src="gif/libsndp-Reference-English003.gif">
</div>
<div style="margin-left:50px;"><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the pause state of each voice.<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsNoteOn"></a>
<table width="100%"><td width="70%"><font size=6>sceSsNoteOn<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Note on<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>
<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <b>sceSsNoteOn</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>phdID,</i>
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>midiChannel,</i>
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>midiProgram</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> midiNote</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>sustain,</i> 
	<a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> <i>*keyOnParam</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>keyOnID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>phdID</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;phd&nbsp;ID&nbsp;that&nbsp;contains&nbsp;the&nbsp;program&nbsp;for&nbsp;which&nbsp;note&nbsp;on&nbsp;is&nbsp;to&nbsp;be&nbsp;performed&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>midiChannel</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;MIDI&nbsp;channel&nbsp;for&nbsp;which&nbsp;note&nbsp;on&nbsp;is&nbsp;to&nbsp;be&nbsp;performed&nbsp;&nbsp;<br>&nbsp;(0&nbsp;to&nbsp;15&nbsp;=&nbsp;MIDI&nbsp;channels&nbsp;1&nbsp;to&nbsp;16)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>midiProgram</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;MIDI&nbsp;program&nbsp;number&nbsp;for&nbsp;which&nbsp;note&nbsp;on&nbsp;is&nbsp;to&nbsp;be&nbsp;performed&nbsp;(0&nbsp;-&nbsp;127)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>midiNote</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;Note&nbsp;number&nbsp;for&nbsp;which&nbsp;note&nbsp;on&nbsp;is&nbsp;to&nbsp;be&nbsp;performed&nbsp;(0&nbsp;-&nbsp;127)&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;<i>sustain</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;Sustain&nbsp;hold&nbsp;state&nbsp;when&nbsp;note&nbsp;on&nbsp;is&nbsp;performed&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_SNDP_ON&nbsp;</td>
<td valign="top">&nbsp;Sustain&nbsp;hold&nbsp;on&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_SNDP_OFF&nbsp;</td>
<td valign="top">&nbsp;Sustain&nbsp;hold&nbsp;off&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>keyOnParam</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;Pointer&nbsp;to&nbsp;<a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a>&nbsp;structure&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>keyOnID</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;Key&nbsp;on&nbsp;ID&nbsp;</td>
</tr></table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The bit pattern of the voice for which note on was performed is returned.<br>If the return value is zero, it means that sound was not produced for any voice.<br><br>The relationship between the bit No. and voice No. is shown below.<br></div>

<div style="margin-left:50px;">
<p>
<img src="gif/libsndp-Reference-English004.gif">
</div>
<div style="margin-left:50px;"><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs note on for <i>midiChannel</i> using the tone parameters corresponding to the MIDI program number and note number. If there are multiple corresponding MIDI program numbers and note numbers, sound is produced for all the matching entries.<br>If no relevant program exists or if the note is outside of the tone parameter range, sound is not produced. Also, when the corresponding voices include a paused voice, the operation for the paused voice is ignored.<br><br>The actual note for which sound is produced is determined from the note number that is set in the argument and the center note in the tone parameter. For example, if note on is performed for the same note as the center note in the tone parameter, the pitch of the fundamental tone is used to generate sound for its waveform.<br>(The center detune and detune values are also taken into consideration for the actual pitch.)<br><br>Actual sound generation starts after <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() is called. However, if sound generation is stopped or another sound is generated for the voice that generated sound before <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() is called, no sound is actually generated.<br><br>The volume and added pitch are set in the <a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> structure.<br><br>The key on ID is an identifier used for generating sound .<br>Note that since the key on IDs 0x80000000 to 0xFFFFFFFF are reserved by libsndp, they should not be used.<br><br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	unsigned int result;
	<a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a> keyOnParam;

	keyOnParam.vel = 127;
	keyOnParam.pan = 64;
	keyOnParam.sendVel = 127;
	keyOnParam.sendPan = 64;
	keyOnParam.addPitch = 0;

	/* Generate sound using phdID = 0, MIDI channel = 1, */
	/* program number = 0, note = 64, sustain state = off, and key on Id = 0 */
	result= sceSsNoteOn(0, 0, 0, 64, SCE_SNDP_OFF, &amp;keyOnParam, 0);

	return 0;
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#SceSsKeyOnParam">SceSsKeyOnParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsNoteOff"></a>
<table width="100%"><td width="70%"><font size=6>sceSsNoteOff<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Note off<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <b>sceSsNoteOff</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>midiChannel</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> midiNote</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>ID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>midiChannel</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;MIDI channel for which note off is to be performed &nbsp;&nbsp;<br>&nbsp;&nbsp;(0 to 15 = MIDI channels 1 to 16)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>midiNote</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Note number for which note off is to be performed (0 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>ID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Key on ID for which note off is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The bit pattern of the voice for which note off was performed is returned.<br>If the return value is zero, note off is not performed for any voice.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs note off for the sound-producing voice corresponding to <i>midiChannel</i>, <i>midiNote</i>, and <i>ID</i>.<br>However, if the voice has its sustain hold state set to on, it will transition to sustain state and note off will be performed when the sustain hold state is turned off.<br>Also, when the corresponding voices include a paused voice, the operation for the paused voice is ignored<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	unsigned int result;

	/* Stop the sound-producing voice with MIDI channel = 1, note = 64, */
	/* and key on ID = 0 */
	result= sceSsNoteOff(0, 64, 0);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSetSustainHold"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSetSustainHold<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set sustain hold state of voice by specifying MIDI channel and key on ID<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <b>sceSsSetSustainHold</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>midiChannel</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> sustainHold</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> ID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe for the <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesisWithMix">sceSsSynthesisWithMix</a>() and <a href="../sound/libsndp-Reference-English.htm#sceSsSynthesis">sceSsSynthesis</a>() functions<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>midiChannel</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;MIDI&nbsp;channel&nbsp;for&nbsp;which&nbsp;sustain&nbsp;hold&nbsp;state&nbsp;is&nbsp;to&nbsp;be&nbsp;set&nbsp;<br>&nbsp;(0&nbsp;to&nbsp;15&nbsp;=&nbsp;MIDI&nbsp;channels&nbsp;1&nbsp;to&nbsp;16)&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;<i>sustainHold</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;Sustain&nbsp;hold&nbsp;state&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_SNDP_ON&nbsp;&nbsp;</td>
<td valign="top">&nbsp;Sustain&nbsp;hold&nbsp;on&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_SNDP_OFF&nbsp;&nbsp;</td>
<td valign="top">&nbsp;Sustain&nbsp;hold&nbsp;off&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>ID</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;Key&nbsp;on&nbsp;ID&nbsp;for&nbsp;which&nbsp;sustain&nbsp;hold&nbsp;state&nbsp;is&nbsp;to&nbsp;be&nbsp;set&nbsp;</td>
</tr></table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The bit pattern of the voice for which sustain hold state was set is returned.<br>If the return value is zero, it means that sustain hold state was not set for any voice.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the sustain state for a voice with the specified MIDI channel and key on ID.. If an operation is performed to stop sound generation for a voice that has sustain hold on, and if the sound being generated is a loop waveform, sound generation will not be stopped and the voice will transition to sustain state. To stop sound generation for a voice in sustain state, sustain hold must be switched off.<br>Also, when the corresponding voices include a paused voice, the operation for the paused voice is ignored.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	unsigned int result;

	/* Set sustain state to on for the voice with MIDI channel = 1 and */
	/* key on ID = 0 */
	result= sceSsSetSustainHold(0, SCE_SNDP_ON, 0);

	return 0;
}

</font></pre></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSetEffectParam"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSetEffectParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set effect contents<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSetEffectParam</b>(
	<a href="../sound/libsndp-Reference-English.htm#SceSsEffectParam">SceSsEffectParam</a> <i>*effectParam</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>effectParam</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to <a href="../sound/libsndp-Reference-English.htm#SceSsEffectParam">SceSsEffectParam</a> structure&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the list of libsndp error codes and the list of libsas error codes.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets parameters for the effects you wish to perform in the members of the <a href="../sound/libsndp-Reference-English.htm#SceSsEffectParam">SceSsEffectParam</a> structure.<br>The bitwise OR of the types of parameters to be set is specified for setMask, which is a member of the <a href="../sound/libsndp-Reference-English.htm#SceSsEffectParam">SceSsEffectParam</a> structure. For example, if SCE_SNDP_FX_PARAM_TYPE is specified for setMask, the type parameter, which is a member of the <a href="../sound/libsndp-Reference-English.htm#SceSsEffectParam">SceSsEffectParam</a> structure, is set.<br>Also, if SCE_SNDP_FX_PARAM_ALL is specified for setMask, all parameters are set.<br><br>For details about the settings, refer to the SAS documentation.<br><br>The following parameters can be specified for type.<br>SCE_SNDP_FX_TYPE_OFF<br>SCE_SNDP_FX_TYPE_ROOM<br>SCE_SNDP_FX_TYPE_STUDIOA<br>SCE_SNDP_FX_TYPE_STUDIOB<br>SCE_SNDP_FX_TYPE_STUDIOC<br>SCE_SNDP_FX_TYPE_HALL<br>SCE_SNDP_FX_TYPE_SPACE<br>SCE_SNDP_FX_TYPE_ECHO<br>SCE_SNDP_FX_TYPE_DELAY<br>SCE_SNDP_FX_TYPE_PIPE<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;
	<a href="../sound/libsndp-Reference-English.htm#SceSsEffectParam">SceSsEffectParam</a> effectParam;

	/* Set SCE_SNDP_FX_TYPE_STUDIOC for the effect type, 
	4096 for the left and right effect volume, and set the effect
	switch on for both the dry and wet sides */

	effectParam.setMask = SCE_SNDP_FX_PARAM_TYPE |
			SCE_SNDP_FX_PARAM_EFFECTVOLUME |
			SCE_SNDP_FX_PARAM_SWITCH;
	effectParam.type = SCE_SNDP_FX_TYPE_STUDIOC;
	effectParam.effectVolume_l = 4096;
	effectParam.effectVolume_r = 4096;
	effectParam.drySwitch = SCE_SNDP_ON;
	effectParam.wetSwitch = SCE_SNDP_ON;

	result= sceSsSetEffectParam(&amp;effectParam);

	return 0;
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#SceSsEffectParam">SceSsEffectParam</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsNote2Pitch"></a>
<table width="100%"><td width="70%"><font size=6>sceSsNote2Pitch<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert note value to pitch value<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceUShort16">SceUShort16</a> <b>sceSsNote2Pitch</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUShort16">SceUShort16</a> <i>center_note</i>,
	<a href="../kernel/Types-Reference-English.htm#SceShort16">SceShort16</a><i> center_fine</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUShort16">SceUShort16</a> <i>note</i>,
	<a href="../kernel/Types-Reference-English.htm#SceShort16">SceShort16</a> <i>fine</i>);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>center_note</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Base note during sampling&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>center_fine</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Fine for the base note during sampling (semitone is 128)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>note</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Note number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fine</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Fine for note (semitone is 128)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The pitch is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function calculates the pitch from the center note and sound-producing note.<br>Since the return value may exceed 0x4000, verify that the upper bound is not exceeded.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	unsigned short pitch;

	pitch= sceSsNote2Pitch(64, 0, 64, 0);

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsPitch2Note"></a>
<table width="100%"><td width="70%"><font size=6>sceSsPitch2Note<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Convert pitch to note<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceUShort16">SceUShort16</a> <b>sceSsPitch2Note</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUShort16">SceUShort16</a><i> center_note</i>,
	<a href="../kernel/Types-Reference-English.htm#SceShort16">SceShort16</a> <i>center_fine</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUShort16">SceUShort16</a> <i>pitch</i>);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>center_note</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Base note during sampling  &nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>center_fine</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Fine for base note during sampling &nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pitch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pitch&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The note value (upper 8 bits are the note and lower 8 bits are the fine) is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function calculates the sound-producing note from the center note and sound-producing pitch.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	unsigned short note;

	note = sceSsPitch2Note(64, 0, 64, 0x1000);

	return 0;
}

</font></pre></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFBind"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFBind<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Register SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFBind</b>(
	<a href="../sound/libsndp-Reference-English.htm#SceSsSmfCtx">SceSsSmfCtx</a> <i>*smfCtx,</i>
	void <i>*smf</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>phdID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfCtx</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to smf environment structure&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to smf data&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>phdID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;phd ID for which binding is to be performed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The smf ID that was assigned is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">An <a href="../sound/libsndp-Reference-English.htm#SceSsSmfCtx">SceSsSmfCtx</a> must be prepared for each set of data.<br>Note that separate <a href="../sound/libsndp-Reference-English.htm#SceSsSmfCtx">SceSsSmfCtx</a> structures must be prepared for different playback environments, even if the data is the same.<br>The smfCtx structure in the arguments does not need to be initialized. Be sure to allocate memory for it and pass it as a work area.<br>This function associates an SMF (Standard MIDI Format) with a PHD and returns the smf ID.<br>Up to 127 associations can be made.<br><br>If registration fails, it means that there may be a problem with the SMF format.<br>The SMF that can be used is only type 0.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;
	<a href="../sound/libsndp-Reference-English.htm#SceSsSmfCtx">SceSsSmfCtx</a> smfCtx;
	char *smf;

	result = sceSsSMFBind(&amp;smfCtx, smf, 0);

	return 0;
}

</font></pre></div>

<!-- Notes -->
<div style="margin-left:10px;"><b>Notes</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the tempo is 60, the SMF processing resolution is 1/172 for a quarter note. As a result, MIDI events that are generated with a lower resolution are quantized according to this resolution.<br>If a large number of MIDI events occur during the same unit of granularity, playback may get delayed. Therefore, either disperse the event timings or reduce the number of MIDI events to the minimum that are required.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#SceSsSmfCtx">SceSsSmfCtx</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFUnbind"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFUnbind<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cancel SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFUnbind</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or disabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smfID to cancel&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The smfID that was assigned is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br><br>(For details, refer to the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function cancels the association of the data with the registered smfID.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFUnbind(&amp;smfCtx, smf, 0);

	return 0;
}

</font></pre></div>

<!-- Notes -->
<div style="margin-left:10px;"><b>Notes</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Since operations can no longer be performed for a canceled smfID, first stop playback for the smfID if it is being played before using this function.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFPlay"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFPlay<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Start performance of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>
<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFPlay</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>playVelocity</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>playPan</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>playSendVelocity</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>playSendPan</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>playCount</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance is to be started&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>playVelocity</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance velocity (0 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>playPan</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance panpot (0 - 64 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>playSendVelocity</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance send velocity (0 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>playSendPan</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance send panpot (0 - 64 - 127)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>playCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of performances (&gt;= 1; set SCE_SNDP_INFINITY for continuous looping)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function starts the performance of an SMF.<br><i>playVelocity</i> is a relative value of volume for the entire performance.<br><i>playPan</i> is the orientation for the entire performance.<br><i>playSendVelocity</i> is the a relative value of the effect send volume for the entire performance.<br><i>playSendPan</i> is the orientation for the effect for the entire performance.<br><i>playCount</i> is the total number of performances. If SCE_SNDP_INFINITY is specified, playback will loop continuously.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;
	char *smf;

	result = sceSsSMFPlay(0, 127, 64, 127, 64, SCE_SNDP_INFINITY);

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFPause"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFPause<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Pause performance of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFPause</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance is to be paused&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function pauses the performance of an SMF that is being performed.<br>It turns off the suspend hold state of all sound-producing voices in the SMF to forcibly stop sound production.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFPause(0);

	return 0;
}


</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libsndp-Reference-English.htm#sceSsSMFResume">sceSsSMFResume</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFResume"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFResume<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Resume performance of paused SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFResume</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance is to be resumed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function resumes the performance of the SMF from the point where it was paused by <a href="../sound/libsndp-Reference-English.htm#sceSsSMFPause">sceSsSMFPause</a>().<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFResume(0);

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFStop"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFStop<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Stop performance of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFStop</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance is to be stopped&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function stops the performance of an SMF and returns its playback position to the beginning of the sequence data.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFStop(0);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFAddTempo"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFAddTempo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Add tempo to performance of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFAddTempo</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <i>addTempo</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which tempo is to be added to performance &nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>addTempo</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Microseconds per quarter note to be added&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function adds tempo to the performance of an SMF. <i>addTempo</i> is the number of microseconds per quarter note to be added to the current tempo. If it is positive, playback slows down. If it is negative, playback speeds up.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFAddTempo(0, 10000);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFGetTempo"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFGetTempo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get performance tempo of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFGetTempo</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which tempo is to be obtained&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The number of microseconds per quarter note is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the tempo of the performance. The return value is the number of microseconds per quarter note.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFGetTempo(0);

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFSetPlayVelocity"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFSetPlayVelocity<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set performance velocity of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFSetPlayVelocity</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>playVelocity</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance velocity is to be set&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>playVelocity</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance velocity (0 - 127)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the velocity for the entire SMF performance.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFSetPlayVelocity(0, 127);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFGetPlayVelocity"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFGetPlayVelocity<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get performance velocity of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFGetPlayVelocity</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> smfID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance velocity is to be obtained&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The performance velocity is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the performance velocity.<br>Returns value set by <a href="../sound/libsndp-Reference-English.htm#sceSsSMFSetPlayVelocity">sceSsSMFSetPlayVelocity</a>().<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
int main(void)
{
	int result;

	result = sceSsSMFGetPlayVelocity(0);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFSetPlaySendVelocity"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFSetPlaySendVelocity<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set performance effect send velocity of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>
<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFSetPlaySendVelocity</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>playSendVelocity</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance velocity is to be set&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>playSendVelocity</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance velocity (0 - 127)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the effect send velocity for the entire SMF performance.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFSetPlaySendVelocity(0, 127);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFGetPlaySendVelocity"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFGetPlaySendVelocity<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get performance effect send velocity of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFGetPlaySendVelocity</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance effect send velocity is to be obtained&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The performance effect send velocity is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the performance velocity.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFGetPlaySendVelocity(0);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFSetPlayPanpot"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFSetPlayPanpot<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set performance panpot of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFSetPlayPanpot</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>playPanpot</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance panpot is to be set&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>playPanpot</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance panpot (0 - 64 - 127)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the orientation for the entire performance of the SMF.<br>0 corresponds to the leftmost position, 64 to the middle, and 127 to the rightmost position.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFSetPlayPanpot(0, 127);

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFGetPlayPanpot"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFGetPlayPanpot<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get performance panpot of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFGetPlayPanpot</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance panpot is to be obtained&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The performance panpot is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the performance panpot.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFGetPlayPanpot(0);

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFSetPlaySendPanpot"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFSetPlaySendPanpot<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set performance effect send panpot of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFSetPlaySendPanpot</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>playSendPanpot</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which the performance effect send panpot is to be set&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>playSendPanpot</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance effect send panpot (0 - 64 - 127)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the effect send orientation for the entire performance of the SMF.<br>0 corresponds to the leftmost position, 64 to the middle, and 127 to the rightmost position.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFSetPlaySendPanpot(0, 127);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFGetPlaySendPanpot"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFGetPlaySendPanpot<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get performance effect send panpot of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFGetPlaySendPanpot</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance effect send panpot is to be obtained&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The performance panpot is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the performance effect send panpot.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFGetPlaySendPanpot(0);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFGetPlayStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFGetPlayStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get performance status of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFGetPlayStatus</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which performance status is to be obtained&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The performance status is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SNDP_PLAYSTATUS_READY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance can be started&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SNDP_PLAYSTATUS_PLAY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance is in progress&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SNDP_PLAYSTATUS_STOP&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance is stopped&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SNDP_PLAYSTATUS_ERROR&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Performance cannot take place&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the performance status of an SMF.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFGetPlayStatus(0);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFSetChannelMute"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFSetChannelMute<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set channel mute of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFSetChannelMute</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>midiChannel</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which channel mute is to be set&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>midiChannel</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;MIDI channel to be muted &nbsp;&nbsp;<br>&nbsp;&nbsp;(0 to 15 = MIDI channels 1 to 16)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function mutes the performance of the MIDI channel specified by the SMF. <br>If sound is currently being produced, this function internally performs a key off, and then subsequently prohibits any key on from being performed.<br><br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFSetChannelMute(0, 0);

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFResetChannelMute"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFResetChannelMute<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cancel channel mute of SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFResetChannelMute</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a><i> smfID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which channel mute is to be canceled&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function cancels all channel muting.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>
#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFResetChannelMute(0);

	return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFSetPlayChannel"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFSetPlayChannel<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Simultaneously set muting for all channels of an SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFSetPlayChannel</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>playChannelBit</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which channel muting is to be set&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>playChannelBit</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sets mute ON or OFF for all MIDI channels&nbsp;&nbsp;<br>&nbsp;&nbsp;bits 0 to 15 = MIDI channels 1 to 16;  &nbsp;&nbsp;<br>&nbsp;&nbsp;bit value 0 = Mute_ON, 1 = Mute_OFF&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the mute state of all MIDI channels of an SMF.<br>The bits of <i>playChannelBit</i> correspond to each of the MIDI channels, and the value of each bit indicates whether muting should be set ON or OFF for the respective channel.<br>If sound is being produced, the function internally performs a key off, then disables key on.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

int main(void)
{
	int result;

	result = sceSsSMFSetPlayChannel(0, 0xFFFF); /* Cancel all muting */

	return 0;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFGetPlayChannel"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFGetPlayChannel<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get the mute states for all channels of an SMF<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFGetPlayChannel</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> *<i>playChannelBit</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID for which channel muting is to be obtained&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>playChannelBit</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer for storing mute states of all MIDI channels&nbsp;&nbsp;<br>&nbsp;&nbsp;bits 0 to 15 = MIDI channels 1 to 16;  bit value 0 = Mute_ON, 1 = Mute_OFF&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it indicates an error.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the mute states of all MIDI channels of an SMF.<br>The bits of <i>playChannelBit</i> correspond to each of the MIDI channels, and the value of each bit indicates whether muting is turned ON or OFF for the respective channel.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

/* Return mute states of each MIDI channel in MuteBit */
int func(unsigned int *MuteBit)
{
	int result;

	result = sceSsSMFGetPlayChannel(0, MuteBit);
	return result;
}


</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceSsSMFGetKeyOnID"></a>
<table width="100%"><td width="70%"><font size=6>sceSsSMFGetKeyOnID<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get key on ID during an SMF performance<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <b>sceSsSMFGetKeyOnID</b>(
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>smfID</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>midich,</i>
		<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> *<i>keyonID</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>smfID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smfID that was obtained by <a href="../sound/libsndp-Reference-English.htm#sceSsSMFBind">sceSsSMFBind</a>()&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>midich</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;MIDI channel&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>*keyonID</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ID value return value&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, SCE_OK is returned.<br>If the return value is negative (&lt; 0), it means that an error occurred.<br><br>(For details, see the <a href="../sound/libsndp-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the key on ID value for an arbitrary <i>midich</i> during the performance of an SMF indicated by <i>smfID</i>.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libsndp.h&gt;

/* Get key on ID of the SMF midich channel during a performance by smfID */
int GetSMFKeyOnVoiceBit(unsigned int smfID, unsigned int midich)
{
    int result;
    unsigned int keyonID;

result = sceSsSMFGetKeyOnID (smfID, midich, &amp;keyonID);
    return result;
}
</font></pre></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="List of Error Codes"></a>
<table width="100%"><td width="70%"><font size=6>List of Error Codes<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Error Codes]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Error codes returned by libsndp <br></div><br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_NOTINIT">SCE_SNDP_ERROR_NOTINIT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450001&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Initialization has not been performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_PHDID">SCE_SNDP_ERROR_PHDID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450002&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;phd ID is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_SMF">SCE_SNDP_ERROR_SMF</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450003&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to SMF data is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_SMFCTX">SCE_SNDP_ERROR_SMFCTX</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450004&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to SMF environment structure is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_FORMAT">SCE_SNDP_ERROR_FORMAT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450005&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SMF format is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_SMFFULL">SCE_SNDP_ERROR_SMFFULL</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450006&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Upper bound of SMF registrations was exceeded&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_SMFID">SCE_SNDP_ERROR_SMFID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450007&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;smf ID is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_PLAYCOUNT">SCE_SNDP_ERROR_PLAYCOUNT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450008&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Specified performance count is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_NOTREADY">SCE_SNDP_ERROR_NOTREADY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450009&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Status is such that performance cannot be started&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_PARAM">SCE_SNDP_ERROR_PARAM</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8045000a&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Parameter is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_NOTPLAY">SCE_SNDP_ERROR_NOTPLAY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8045000b&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Not being performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_NOTPAUSE">SCE_SNDP_ERROR_NOTPAUSE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8045000c&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Not paused&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_DONTSTOP">SCE_SNDP_ERROR_DONTSTOP</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8045000d&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Status is such that performance cannot be stopped&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_ALREADY">SCE_SNDP_ERROR_ALREADY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8045000e&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Status has already been set&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_SOUNDDATAFULL">SCE_SNDP_ERROR_SOUNDDATAFULL</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8045000f&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Max. number of sound data registrations was exceeded&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_CANTALLOCATEVOICE">SCE_SNDP_ERROR_CANTALLOCATEVOICE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450010&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice cannot be allocated&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_VOICENUM">SCE_SNDP_ERROR_VOICENUM</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450011&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice number is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_RESERVEDVOICE">SCE_SNDP_ERROR_RESERVEDVOICE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450012&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Voice is not being managed by libsndp&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_SNDP_ERROR_PAUSEVOICE">SCE_SNDP_ERROR_PAUSEVOICE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80450013&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;A paused voice is included&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
