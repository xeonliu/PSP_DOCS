<html lang="en">
<head>
<title>libmp3-Overview</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
libmp3 Overview
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd3 -->
<a name="Heading3_1">
<h2>
 1 <!-- hp --><b>Library Overview</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_1_1">
<h3>
<a href="#Heading3_1"> 1. </a>1 
<!-- hp1 --><b>Functions and Features</b><br>
</a>
</h3>
<div style="margin-left:50px;">The MP3 library (libmp3) is a library for controlling the MP3 decoder, which runs on the Media Engine. Audio data compressed with the MP3 format (referred to as MP3 data), can be decoded as linear PCM data.<br>libmp3 has the following functions.<br></div>
<div style="margin-left:40px;"><ul>
<li> Decoding MP3 data to linear PCM
<li> Streaming playback of MP3 data
<li> Loop playback of MP3 data
<li> Cuing MP3 data playback position
</ul></div>
<div style="margin-left:50px;"><br>The supported MP3 data formats that can be played have the following specifications.<br></div>
<div style="margin-left:40px;"><ul>
<li> Supported codecs are MPEG1/ 2/ 2.5 Layer3 
<li> Sampling frequencies of 32000/ 44100/ 48000Hz(MPEG1 Layer3), 16000/ 22050/
<li>    24000Hz(MPEG2 Layer3), 8000/ 11025/ 12000Hz(MPEG2.5 Layer3)
<li> MP3 data bit rates (monaural or stereo) of 32/ 40/ 48/ 56/ 64/ 80/ 96/ 112/ 128/ 160/ 192/ 224/ 256/ 320 kbps(MPEG1 Layer3), 8/ 16/ 24/ 32/ 40/ 48/ 56/ 64/ 80/ 96/ 112/ 128/ 144/ 160kbps(MPEG2/2.5 Layer3) and VBR(Variable Bit Rate)
</ul></div>
<div style="margin-left:50px;"><br>The only PCM data format that can be output is stereo with a bit depth of 16 bits. Even if the input is monaural MP3 data, the output will still be stereo, with left and right channels being the same. Also, libmp3 does not provide any function to perform audio output of decoded PCM data. To send PCM data to the audio output, vaudio must be used together with libmp3. Since libwave and simple audio only handle 44100Hz PCM data, you should always use vaudio. For information about how to do this, refer to the &quot;Sound Overview&quot; document as necessary.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_2">
<h3>
<a href="#Heading3_1"> 1. </a>2 
<!-- hp1 --><b>Related Files</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following files are required to use libmp3.<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Category</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Filename</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Header file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libmp3.h&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Stub library file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libmp3_stub.a&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;weak import stub library file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libmp3_stub_weak.a&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">Also, to load the libmp3 module itself, you must use the module utility at the same time. For details, refer to the &quot;Utility Services&quot; documentation.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_3">
<h3>
<a href="#Heading3_1"> 1. </a>3 
<!-- hp1 --><b>Sample Programs</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following are provided as libmp3 sample programs. Refer to them for required functions.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_1_3_1">
<div style="margin-left:40px;"><h4><b>devkit/sample/sound/mp3play/</b><br><br></h4></div></a>

<div style="margin-left:67px;">This sample program shows the basic method of using libmp3. It is based on the graphics sample program devkit/sample/graphic/star and shows how to use an MP3 file to play background music. Use it as a reference for loop playback, stopping playback, pausing playback, and skipping ID3 tags. The sample program gets its principal music information (track name, artist name, etc.) by parsing ID3 tags.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_1_3_2">
<div style="margin-left:40px;"><h4><b>devkit/sample/sound/at3mp3play/</b><br><br></h4></div></a>

<div style="margin-left:67px;">This sample program shows how to use libmp3 and libatrac3plus to simultaneously play background music from an MP3 file and an ATRAC3plus&trade; file. The basic functions are the same as those of devkit/sample/sound/mp3play.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_1_3_3">
<div style="margin-left:40px;"><h4><b>devkit/sample/sound/mp3lowlevel/</b><br><br></h4></div></a>

<div style="margin-left:67px;">This sample shows how to use the libmp3 low-level APIs to perform on-memory playback of BGM from an MP3 file.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_2">
<h2>
 2 <!-- hp --><b>Explanation of Operation</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_2_1">
<h3>
<a href="#Heading3_2"> 2. </a>1 
<!-- hp1 --><b>Processing Flow Up to Decoding</b><br>
</a>
</h3>
<div style="margin-left:50px;">The required procedure up to decoding is shown below.<br><br></div>
</ul>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Allocate computational resources required for libmp3</li>
<li VALUE=2> Allocate input/output buffers</li>
<li VALUE=3> Get MP3 handle and set initial values related to the input/output buffers</li>
<li VALUE=4> Read MP3 data into the input buffer</li>
<li VALUE=5> Initialize MP3 data that was read </li>
<li VALUE=6> Decode MP3 data and output result to the output buffer</li>
</ol></div>
<div style="margin-left:50px;"><br>First, before using libmp3, allocate the required computational resources for the library. libmp3 can use these computational resources to execute multiple instances of decoding in parallel. The computational resources required for an individual instance of decoding are referred to as <b>decoding resources</b>.<br>Next, get a decoding resource management ID, which is known as an <b>MP3 handle</b>. There is a one-to-one correspondence between the MP3 handle and the decoding resources. Decoding resources can be initialized by associating the MP3 handle that was obtained with a set of initial values. There are two main sets of initial values required for initialization. One set relates to the input/output buffers, which are set in step (3), and the other set relates to the Mpeg/Audio frame header of the MP3 data that is read into the input buffer in step (4). After initialization processing is executed, the MP3 handle can be used to decode MP3 data. Note that the number of MP3 handles that can be used at the same time is restricted.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_2">
<h3>
<a href="#Heading3_2"> 2. </a>2 
<!-- hp1 --><b>Skipping Tags</b><br>
</a>
</h3>
<div style="margin-left:50px;">Music information called a <b>tag</b> is often added to an MP3 file. Information such as the artist's name or album name can be recorded in a tag. There are various types of tags, and the amount of information that can be maintained differs according to the type.<br>libmp3 is not able to skip tags. Therefore, in step (4), <b>MP3 data without the tags must be read into the input buffer</b>. This section presents an overview of how to skip one kind of tag, in this case the ID3 tag. Since this method is implemented in the sample program <b>devkit/sample/sound/mp3play/</b>, refer to that program when reading this overview.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_3">
<h3>
<a href="#Heading3_2"> 2. </a>3 
<!-- hp1 --><b>ID3 Tag ver.1.0/1.1</b><br>
</a>
</h3>
<div style="margin-left:50px;">The ID3 tag ver.1.0/1.1 (hereafter referred to as ID3 tag v1.x) is appended at the end of an MP3 file. The tag size is fixed at 128 bytes. Figure 1 shows the ID3 tag v1.x specifications.<br><br> <br></div>

<div align=center>
<p>
<img src="gif/libmp3-Overview-English001.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 1  ID3 Tag v1.x Specifications</b><br>
</div>
<br>
<div style="margin-left:50px;">The string &quot;TAG&quot; is always embedded at the beginning of the ID3 tag v1.x. Therefore, to determine whether or not this tag is appended, read the first 3 bytes of data from the last 128 bytes at the end of the MP3 file and check to see if the data that was read matches the string &quot;TAG.&quot; If the tag is present, make sure that the 128 bytes at the end of the MP3 file are not read into the input buffer. To accomplish this, set the following value in the argument of the MP3 handle acquisition function, where the MP3 file size is assumed to be <i>filesize</i> bytes.<br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> When the ID3 tag v1.x is present, set (<i>filesize</i> - 128)
<li> When no ID3 tag v1.x is present, set <i>filesize</i>
</ul></div>
<div style="margin-left:50px;">However, since the ID3 tag v1.x is at the end of the data, even if this tag is present in the data, only an error will be returned after the MP3 data is decoded to the end, and no particular problem will occur as long as loop playback is not being performed. When seeking cannot be performed or when the data is on a media for which seeking is slow such as when streaming data over the network, a means can also be selected that does not take ID3 tag v1.x into consideration.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_4">
<h3>
<a href="#Heading3_2"> 2. </a>4 
<!-- hp1 --><b>ID3 Tag ver.2.2/2.3/2.4</b><br>
</a>
</h3>
<div style="margin-left:50px;"></div>

<div align=center>
<p>
<img src="gif/libmp3-Overview-English002.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 2  ID3 Tag v2.x Specifications</b><br>
</div>
<br>
<div style="margin-left:50px;">ID3 tag ver.2.2/2.3/2.4 (hereafter referred to as ID3 tag v2.x) is appended at the beginning of MP3 data. The tag size is variable. However, the first 10 bytes from the beginning of the file have a fixed format. Figure 2 shows the ID3 tag v2.x specifications.<br>The string &quot;ID3&quot; is always embedded at the beginning of the tag. Therefore, to determine whether or not ID3 tag v2.x is appended, read the first 3 bytes of data from the beginning of the MP3 file and check to see if the data that was read matches the string &quot;ID3.&quot;<br>If the tag is present, check its size so it can be skipped. The tag size is obtained by converting the Size Field Data shown in Figure 2 or, in other words, the 4 bytes of data following the 6 bytes from the beginning of the MP3 file. The data conversion process is shown below.<br><br></div>

<div align=center>
<p>
<img src="gif/libmp3-Overview-English003.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 3  Deriving the Tag Size (Excluding Tag Header Size) for ID3 Tag v2.x</b><br>
</div>
<br>
<div style="margin-left:50px;">According to the specifications, the valid value is in the low-order 7 bits of each byte, so the first step is to pack the bits together. Note that the data arrangement is big endian. The packed data should be considered as a 4-byte integer. However, since the PSP&trade; processor reads <a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> as little endian, the data will turn into an invalid value. To read the data correctly, a bit shift should be used to convert the data to big endian format.<br>Assume that the tag size that was obtained by the above data conversion is <i>tagSize</i> bytes. Note that <i>tagSize</i> does not include the 10 bytes of data in the fixed format at the beginning of the tag. Therefore, the size of an ID3 tag v2.x will be (<i>tagSize</i>+10) bytes. If a tag is present, make sure that (<i>tagSize</i>+10) bytes from the beginning of the MP3 file is not read into the input buffer. To accomplish this, set the following value in the argument of the MP3 handle acquisition function.<br></div>
<div style="margin-left:40px;"><ul>
<li> When the ID3 tag v2.x is present, set (<i>tagSize</i>+10)
<li> When no ID3 tag v2.x is present, set 0
</ul></div>

<!-- sce_hd4 -->
<a name="Heading4_2_5">
<h3>
<a href="#Heading3_2"> 2. </a>5 
<!-- hp1 --><b>On-Memory Playback and Streaming Playback</b><br>
</a>
</h3>
<div style="margin-left:50px;">If the input buffer is sufficiently larger than the size of the MP3 data, no additional MP3 data need be read into the input buffer after step (4). This playback method is called <b>on-memory playback</b>. On the other hand, if the input buffer is smaller than the size of the MP3 data, processing for reading additional data successively must be performed. This playback method is called <b>streaming playback</b>.<br>The procedure required for streaming playback is shown below.<br><br></div>
</ul>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Allocate computational resources required for libmp3</li>
<li VALUE=2> Allocate the input buffer</li>
<li VALUE=3> Get an MP3 handle and set initial values related to the input/output buffers</li>
<li VALUE=4> Read MP3 data into the input buffer</li>
<li VALUE=5> Initialize the MP3 data that was read</li>
<li VALUE=6> Decode the MP3 data and output the result to the output buffer</li>
<li VALUE=7> Send the decoded PCM data to the audio output</li>
<li VALUE=8> Check if necessary to read additional input data</li>
<li VALUE=9> If additional data is required, go to step (10); otherwise, jump to step (6)</li>
<li VALUE=10> Get the seek position in the MP3 file for additional data and get the destination address and size </li>
<li VALUE=11> Read additional MP3 data into the input buffer</li>
<li VALUE=12> Report the size of added MP3 data to libmp3</li>
<li VALUE=13> Jump to step (6)</li>
</ol></div>
<div style="margin-left:50px;"><br>Streaming playback can be executed by repeatedly performing the above procedure.<br>When the MP3 file is played to the end, if the remaining loop playback count is 0, playback will be stopped. For information regarding the loop playback count setting, see &quot;Loop Playback&quot; in Chapter 3. While playback is stopped, decoding in step (7) is skipped, and silent PCM data is output. Also, the request for additional data in step (9) is not reported from libmp3.<br>Streaming can be restarted from the beginning of the file by sending a signal for restarting playback to the library while playback is stopped. Also, if the remaining loop playback count is at least 1 or infinity (a negative number has been set), then even if the MP3 file has been played to the end, the playback position is automatically returned to the beginning of the file by repeating steps (6) through (13).<br>After initialization, always repeat steps (6) through (13) based on the above libmp3 behavior. This not only simplifies playback control, but also guarantees normal streaming playback. The above streaming playback procedure is summarized as a schematic diagram in Figure 4 for reference.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_6">
<h3>
<a href="#Heading3_2"> 2. </a>6 
<!-- hp1 --><b>Loop Playback</b><br>
</a>
</h3>
<div style="margin-left:50px;">libmp3 provides a loop playback function. The loop starting position and ending position are boundaries between the MP3 file starting and ending tags and MP3 data as shown in Figure 4. Other positions cannot be set for the loop playback starting and ending positions. Once initialization has completed, the loop playback count can be set at any arbitrary time. The loop playback count is managed independently for each MP3 handle. Any number from 1 to the maximum value permitted for a signed integer can be set. Also, a loop can be played an infinite number of times by setting a negative number for the loop playback count.<br><br></div>

<div align=center>
<p>
<img src="gif/libmp3-Overview-English004.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 4  Streaming Playback</b><br>
</div>
<br>

<!-- sce_hd3 -->
<a name="Heading3_3">
<h2>
 3 <!-- hp --><b>Using the Library</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_3_1">
<h3>
<a href="#Heading3_3"> 3. </a>1 
<!-- hp1 --><b>Preparing MP3 Data</b><br>
</a>
</h3>
<div style="margin-left:50px;">MP3 data is encoded from PCM data (wav file), however, SCEI does not provide a tool to perform this encoding. Also, there are restrictions regarding the format of MP3 data that can be decoded by libmp3. For details, see Chapter 4, &quot;MP3 Data That Can be Decoded.&quot; <br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_2">
<h3>
<a href="#Heading3_3"> 3. </a>2 
<!-- hp1 --><b>Getting Information for Skipping Tags</b><br>
</a>
</h3>
<div style="margin-left:50px;">libmp3 cannot skip tags such as the ID3 tag. Therefore, information for skipping tags must be obtained before libmp3 initialization is performed. For a description of how to do this, see "Skipping Tags" in Chapter 2 and refer to the <b>devkit/sample/sound/mp3play/ </b>sample program.<br>This information is set in the members of <b><a href="../sound/libmp3-Reference-English.htm#SceMp3InitArg">SceMp3InitArg</a></b>, which is a set of initial values that are provided to <b><a href="../sound/libmp3-Reference-English.htm#sceMp3ReserveMp3Handle">sceMp3ReserveMp3Handle</a></b>(). The boundary position between the tags at the beginning of the file and the MP3 data is set for <i>mp3HeadPos</i>. The boundary position between the tags at the end of the file and the MP3 data is set for <i>mp3TailPos</i>.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_3">
<h3>
<a href="#Heading3_3"> 3. </a>3 
<!-- hp1 --><b>Initialization</b><br>
</a>
</h3>
<div style="margin-left:50px;">Call the module utility function <b><a href="../utility/Utility-Reference-English.htm#sceUtilityLoadModule">sceUtilityLoadModule</a></b>() to load the avcodec module and the libmp3 module.<br>Next, perform libmp3 initialization. The following procedure shows how to implement the steps described in Chapter 2, "On-Memory Playback and Streaming Playback" in a program.<br><br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Call <b><a href="../sound/libmp3-Reference-English.htm#sceMp3InitResource">sceMp3InitResource</a></b>() to allocate computational resources required for all of libmp3</li>
<li VALUE=2> Allocate input/output buffers that satisfy the memory alignment and size constraints</li>
<li VALUE=3> Call <b><a href="../sound/libmp3-Reference-English.htm#sceMp3ReserveMp3Handle">sceMp3ReserveMp3Handle</a></b>() and provide information in the argument about input/output buffers and information for skipping tags. This function will return an MP3 handle with those initial values set</li>
<li VALUE=4> Use the MP3 handle that was obtained to read MP3 data into the input buffer</li>
<li VALUE=5> Call <b><a href="../sound/libmp3-Reference-English.htm#sceMp3Init">sceMp3Init</a></b>() to initialize the decoding resources of the specified MP3 handle</li>
</ol></div>
<div style="margin-left:50px;"><br>In step (2), there are constraints related to input/output buffer memory alignment and size because MP3 data is decoded on the Media Engine. For details, see the section in Chapter 4, "Input/Output Buffer Memory Alignment and Size."<br>In step (3), set the starting addresses and sizes of the input/output buffers and the boundary position in the MP3 file between the tags and the MP3 data for the members of the <b><a href="../sound/libmp3-Reference-English.htm#SceMp3InitArg">SceMp3InitArg</a> </b>structure. This structure consists of a set of initial values. Then, call <b><a href="../sound/libmp3-Reference-English.htm#sceMp3ReserveMp3Handle">sceMp3ReserveMp3Handle</a></b>() and provide this <b><a href="../sound/libmp3-Reference-English.htm#SceMp3InitArg">SceMp3InitArg</a></b> structure as the argument to get an MP3 handle with those initial values set.<br>At this time, the number of MP3 handles that can be used simultaneously is restricted, and if an MP3 handle cannot be obtained, an error will be returned. In this case, call <b><a href="../sound/libmp3-Reference-English.htm#sceMp3ReleaseMp3Handle">sceMp3ReleaseMp3Handle</a></b>() to return any MP3 handle that is not being used to libmp3. For information on the maximum number of MP3 handles, see the section in Chapter 4, "Number of MP3 Handles That Can be Used Simultaneously."<br>In Step (4), use the MP3 handle that was obtained to read MP3 data, using a similar procedure as that described in steps (3) through (5) under "Streaming Playback".<br>The initialization processing performed by <b><a href="../sound/libmp3-Reference-English.htm#sceMp3Init">sceMp3Init</a></b>() in step (5) parses audio information such as the sampling frequency from the Mpeg/Audio frame header in the MP3 data that was read into the input buffer.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_4">
<h3>
<a href="#Heading3_3"> 3. </a>4 
<!-- hp1 --><b>Decoding</b><br>
</a>
</h3>
<div style="margin-left:50px;">Next, decode the MP3 data that was read into the input buffer. The following procedure shows how to implement the steps described in Chapter 2, "On-Memory Playback and Streaming Playback" in a program.<br><br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Call <b><a href="../sound/libmp3-Reference-English.htm#sceMp3Decode">sceMp3Decode</a></b>() to decode the MP3 data</li>
<li VALUE=2> Send PCM data that was decoded by vaudio to the audio output</li>
</ol></div>
<div style="margin-left:50px;"><br>Call <b><a href="../sound/libmp3-Reference-English.htm#sceMp3Decode">sceMp3Decode</a></b>() to write decoded PCM data to the output buffer. Also, the following information can be obtained through the arguments and return value of <b><a href="../sound/libmp3-Reference-English.htm#sceMp3Decode">sceMp3Decode</a></b>().<br><br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> Read source address of PCM data in the output buffer
<li> Read size of PCM data in the output buffer
</ul></div>
<div style="margin-left:50px;"><br>In step (2), use these values to perform audio output. The output data in step (1) is valid until the next time <b><a href="../sound/libmp3-Reference-English.htm#sceMp3Decode">sceMp3Decode</a></b>() is executed.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_5">
<h3>
<a href="#Heading3_3"> 3. </a>5 
<!-- hp1 --><b>Streaming Playback</b><br>
</a>
</h3>
<div style="margin-left:50px;">Next, control the streaming playback operation. The following procedure shows how to implement the steps described in Chapter 2, "On-Memory Playback and Streaming Playback" in a program.<br><br></div>
</ul>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Call <b><a href="../sound/libmp3-Reference-English.htm#sceMp3CheckStreamDataNeeded">sceMp3CheckStreamDataNeeded</a></b>() to check the need to read additional input data</li>
<li VALUE=2> If additional data is required, go to step (3); otherwise, jump to step (1) in "Decoding".</li>
<li VALUE=3> Call <b><a href="../sound/libmp3-Reference-English.htm#sceMp3GetInfoToAddStreamData">sceMp3GetInfoToAddStreamData</a></b>() to get information for adding input data</li>
<li VALUE=4> Read additional data from the MP3 file into the input buffer based on the information that was obtained in step (3)</li>
<li VALUE=5> Call <b><a href="../sound/libmp3-Reference-English.htm#sceMp3NotifyAddStreamData">sceMp3NotifyAddStreamData</a></b>() to report the size of the added MP3 data to libmp3</li>
<li VALUE=6> Jump to step (1) in "Decoding"</li>
</ol></div>
<div style="margin-left:50px;"><br>In step (3), the following information can be obtained through the arguments of <b><a href="../sound/libmp3-Reference-English.htm#sceMp3GetInfoToAddStreamData">sceMp3GetInfoToAddStreamData</a></b>().<br><br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> Read source seek position of additional data in the MP3 file
<li> Write destination address of additional data in the input buffer
<li> Write size of additional data in the input buffer
</ul></div>

<!-- sce_hd4 -->
<a name="Heading4_3_6">
<h3>
<a href="#Heading3_3"> 3. </a>6 
<!-- hp1 --><b>Loop Playback</b><br>
</a>
</h3>
<div style="margin-left:50px;">Use <b><a href="../sound/libmp3-Reference-English.htm#sceMp3SetLoopNum">sceMp3SetLoopNum</a></b>() to set the loop playback count. For information about the overall specifications, see Chapter 2, "Loop Playback." To cue the playback position during MP3 playback or to restart playback from a stop caused by the loop playback count running out, call <b><a href="../sound/libmp3-Reference-English.htm#sceMp3ResetPlayPosition">sceMp3ResetPlayPosition</a></b>(). However, <b><a href="../sound/libmp3-Reference-English.htm#sceMp3ResetPlayPosition">sceMp3ResetPlayPosition</a></b>() must be executed after step (1) in "Decoding" and before step (1) in "Streaming Playback". If this condition is not satisfied, <b><a href="../sound/libmp3-Reference-English.htm#sceMp3Decode">sceMp3Decode</a></b>() will be executed when data has not been replenished in the input buffer. Since this will cause no sound to be output, make sure that this function is executed at the proper time.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_7">
<h3>
<a href="#Heading3_3"> 3. </a>7 
<!-- hp1 --><b>Termination</b><br>
</a>
</h3>
<div style="margin-left:50px;">When the application no longer needs to play MP3 data, call<b> <a href="../sound/libmp3-Reference-English.htm#sceMp3TermResource">sceMp3TermResource</a></b>() to perform libmp3 termination processing. When this function is executed, the MP3 handles that were obtained during initialization are forcibly returned to libmp3, and all computational resources that were allocated for libmp3 are released.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_4">
<h2>
 4 <!-- hp --><b>Precautions</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_4_1">
<h3>
<a href="#Heading3_4"> 4. </a>1 
<!-- hp1 --><b>MP3 Data That Can be Decoded</b><br>
</a>
</h3>
<div style="margin-left:50px;">libmp3 can only play MP3 data that satisfies the following specifications.<br><br></div>
<div style="margin-left:40px;"><ul>
<li> Supported codecs are MPEG1/ 2/ 2.5 Layer3
</ul></div>
<div style="margin-left:50px;"><br>If an attempt is made to play an unsupported MP3 file, initialization processing will fail and an error will be returned. Since libwave and simple audio only handle 44100Hz PCM data, you should always use vaudio.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_2">
<h3>
<a href="#Heading3_4"> 4. </a>2 
<!-- hp1 --><b>Input/Output Buffer Memory Alignment and Size</b><br>
</a>
</h3>
<div style="margin-left:50px;">When decoding is performed by the Media Engine, an identical data cache is generated between the Media Engine and the System Controller. To guarantee coherency between the caches, the input and output buffers must be aligned on a <b>64-byte boundary</b>. In addition, the required sizes of the input and output buffers is related to the frame size to be decoded as follows.<br><br></div>
<div style="margin-left:40px;"><ul>
<li> Input (MP3) buffer size<br><b>A multiple of 64 bytes that is at least 8192 bytes</b>
<li> Output (PCM) buffer size<br><b>9216 bytes</b> (Maximum 1152 samples x 2 bytes x 2 channels x 2 buffers)
</ul></div>
<div style="margin-left:50px;"><br>When allocating the input and output buffers, be sure to use the memory alignment and buffer sizes shown above.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_3">
<h3>
<a href="#Heading3_4"> 4. </a>3 
<!-- hp1 --><b>Number of MP3 Handles That Can be Used Simultaneously</b><br>
</a>
</h3>
<div style="margin-left:50px;">The number of MP3 handles that can be used simultaneously is <b>2</b>. This number cannot be changed.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_4">
<h3>
<a href="#Heading3_4"> 4. </a>4 
<!-- hp1 --><b>PCM Data That Can be Output</b><br>
</a>
</h3>
<div style="margin-left:50px;">The only PCM data format that can be output is stereo with a bit depth of 16 bits. Monaural PCM data output is not supported. When monaural MP3 data is decoded, stereo PCM is output having identical left and right channels.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_5">
<h3>
<a href="#Heading3_4"> 4. </a>5 
<!-- hp1 --><b>Playback of MP3 Data on a UMD&trade;/DVD</b><br>
</a>
</h3>
<div style="margin-left:50px;">When <b>sceIoRead</b>() is used to read an MP3 file from a UMD&trade;/DVD into the input buffer, the second argument <i>*buf</i>, which indicates the write destination address, must be 4-byte aligned. The MP3 data write destination address can be obtained from the second argument <i>*mp3DstPtr</i> of <b><a href="../sound/libmp3-Reference-English.htm#sceMp3GetInfoToAddStreamData">sceMp3GetInfoToAddStreamData</a></b>(). At this time, if the input/output buffers are allocated according to the conditions described in "Input/Output Buffer Memory Alignment and Size," the address returned in <i>*mp3DstPtr</i> will always be 4-byte aligned. Based on the above, always use <b><a href="../sound/libmp3-Reference-English.htm#sceMp3GetInfoToAddStreamData">sceMp3GetInfoToAddStreamData</a></b>() to get the write destination address of the MP3 data in the input buffer.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_6">
<h3>
<a href="#Heading3_4"> 4. </a>6 
<!-- hp1 --><b>Simultaneous Use of libmp3 and libsas </b><br>
</a>
</h3>
<div style="margin-left:50px;">The MP3 decoder, which is the core of libmp3, runs on the Media Engine. Similarly, the SAS (Software Audio Synthesizer), which is the core of libsas, also runs on the Media Engine. Therefore, when they are both used simultaneously, they may compete for computational resources on the Media Engine, and in the worst case, the output audio from the SAS may become intermittent. In particular, when decoding is repeatedly performed across multiple frames, the computational load may increase temporarily at locations where the MP3 data is corrupted until decoding has successfully completed. Therefore, be careful to verify operation at locations where MP3 data is corrupted.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_7">
<h3>
<a href="#Heading3_4"> 4. </a>7 
<!-- hp1 --><b>Stack Size of Threads That Use libmp3</b><br>
</a>
</h3>
<div style="margin-left:50px;">To reduce the stack size of threads that use libmp3 to the minimum required size, use <b><a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelGetThreadStackFreeSize">sceKernelGetThreadStackFreeSize</a></b>() to verify the required stack size, which is defined in thread.h.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_8">
<h3>
<a href="#Heading3_4"> 4. </a>8 
<!-- hp1 --><b>Termination Processing for Threads That Use libmp3</b><br>
</a>
</h3>
<div style="margin-left:50px;">libmp3, which uses CPU functions on the Media Engine, uses semaphores to manage computational resources on the Media Engine. Therefore, if <b><a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelTerminateThread">sceKernelTerminateThread</a></b>() and <b><a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelTerminateDeleteThread">sceKernelTerminateDeleteThread</a></b>() are used to forcibly delete a thread that is calling libmp3 while a libmp3 function is being executed, then, depending on the timing, the thread may end up getting deleted while computational resources on the Media Engine remain allocated. As a result, there is a risk that other libraries that use the CPU on the Media Engine, not just libmp3, will no longer operate properly. To stop a thread, design your program using the following method of thread management.<br></div>
<div style="margin-left:40px;"><ul>
<li> Side issuing instruction for stopping thread <br>Use an event flag to report the termination request to the thread.
<li> Side receiving stop instruction <br>Routinely monitor the event flags to check for the presence of a stop instruction. If a stop instruction is detected, verify that libmp3 is not running, and then use <b><a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelExitThread">sceKernelExitThread</a></b>() to stop the thread itself.
</ul></div>
<div style="margin-left:50px;"><br>For an example of how to implement the processing needed to terminate a thread, refer to the libmp3 sample program.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_9">
<h3>
<a href="#Heading3_4"> 4. </a>9 
<!-- hp1 --><b>libmp3 low-level APIs</b><br>
</a>
</h3>
<div style="margin-left:50px;">An application is free to implement file streaming using libmp3 low-level APIs. However, note that the available libmp3 APIs are greatly restricted. For information about restrictions on the available APIs, refer to the "libmp3 Reference" document.<br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
