<html lang="en">
<head>
<title>libatrac3plus-Overview</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
libatrac3plus Overview
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd3 -->
<a name="Heading3_1">
<h2>
 1 <!-- hp --><b>Overview</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_1_1">
<h3>
<a href="#Heading3_1"> 1. </a>1 
<!-- hp1 --><b>Functional Overview and Features</b><br>
</a>
</h3>
<div style="margin-left:67px;">The ATRAC3plus&trade; library (libatrac3plus) is used for controlling the ATRAC3&trade;/ATRAC3plus&trade; decoder that runs on the Media Engine. The library enables ATRAC3&trade;/ATRAC3plus&trade; compressed audio data that was generated using the proprietary at3tool, to be decoded to linear PCM. Also, by linking libatrac3plus with SAS (Software Audio Synthesizer), an ATRAC3&trade; sound source can be used as the synthesizer's phoneme region.<br>The following are the features of libatrac3plus.<br></div>

<!-- sce_hd6 -->
<a name="Heading6_1_1_1">
<div style="margin-left:63px;"><h4><b>Features</b><br><br></h4></a></div>
<div style="margin-left:70px;"><ul>
<li> Can decode ATRAC3&trade; and ATRAC3plus&trade; audio data to PCM.
<li> Supports 66 kbps, 105 kbps, and 132 kbps bit rates for ATRAC3&trade; (stereo). 
<li> Supports 52 kbps and 66 kbps bit rates for ATRAC3&trade; (monaural). 
<li> Supports 48 kbps, 64 kbps, 96 kbps, 128 kbps, 160 kbps, 192 kbps, 256 kbps, <br>320 kbps and 352 kbps bit rates for ATRAC3plus&trade; (stereo).
<li> Supports 32 kbps, 48 kbps, 64 kbps, 96 kbps and 128 kbps bit rates for ATRAC3plus&trade; (monaural).
<li> Provides loop playback function for ATRAC3&trade; and ATRAC3plus&trade; data.
<li> Provides streaming playback function for ATRAC3&trade; and ATRAC3plus&trade; data.
</ul></div>
<div style="margin-left:67px;"><br>Note that libatrac3plus only provides a conversion (decoding) function for decoding from ATRAC3&trade;/ATRAC3plus&trade; data to PCM data. To output decoded data to the audio output, libatrac3plus should be used together with a library such as libwave. libwave and the other sound libraries are described in the Sound Overview document. Please refer to that document for more information.<br>For information about at3tool, refer to the at3tool User's Manual.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_2">
<h3>
<a href="#Heading3_1"> 1. </a>2 
<!-- hp1 --><b>Related Files</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following files are required to use libatrac3plus.<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Category</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Filename</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Header file &nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libatrac3plus.h&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Stub library file &nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libatrac3plus_stub.a&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;weak import stub library file &nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libatrac3plus_stub_weak.a&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
Also, a utility function must be used to load the libatrac3plus module itself. For details, refer to the Utility Overview.<br>

<!-- sce_hd4 -->
<a name="Heading4_1_3">
<h3>
<a href="#Heading3_1"> 1. </a>3 
<!-- hp1 --><b>Sample Programs</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following libatrac3plus sample programs are provided for reference.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_1"><h4>
(1)&nbsp;<b>devkit/sample/sound/stringsound/</b><br></h4>
</a></div>
<div style="margin-left:67px;">This sample program shows the basic method of using libatrac3plus.<br>It basically uses libatrac3plus to add background music to devkit/sample/graphic/string/ using libatrac3plus.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_2"><h4>
(2)&nbsp;<b>devkit/sample/sound/starmix/</b><br></h4>
</a></div>
<div style="margin-left:67px;">This sample program shows the concurrent use of libsas and libatrac3plus.<br>Background music is played using libatrac3plus, and at the same time, sound effects are played by libsas according to button operations.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_3"><h4>
(3)&nbsp;<b>devkit/sample/sound/at3doubleplay/</b><br></h4>
</a></div>
<div style="margin-left:67px;">This sample program plays two songs of ATRAC3&trade;/ATRAC3plus&trade; data concurrently.<br>The code is added to the samples that are placed in sample/graphics/string, to play two sound sources of ATRAC3&trade;/ATRAC3plus&trade; in a loop as BGM.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_4"><h4>
(4)&nbsp;<b>devkit/sample/sound/at3streaming/</b><br></h4>
</a></div>
<div style="margin-left:67px;">This sample program performs asynchronous read and streaming playback of ATRAC3&trade;/ATRAC3plus&trade; data.<br>The code is added to the samples that are placed in sample/graphics/string, to play sound sources of ATRAC3&trade;/ATRAC3plus&trade; in a loop as BGM.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_5"><h4>
(5)&nbsp;<b>devkit/sample/sound/at3mix/</b><br></h4>
</a></div>
<div style="margin-left:67px;">This sample program uses libsas and libatrac3plus concurrently, just like starmix.<br>However, sound is output using a method that has a lighter CPU load than starmix. Check the load reduction.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_6"><h4>
(6)&nbsp;<b>devkit/sample/sound/at3mixEx/</b><br></h4>
</a></div>
<div style="margin-left:67px;">This sample program uses libsndp to generate sound for at3mix sound effects.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_7"><h4>
(7)&nbsp;<b>devkit/sample/sound/at3lowlevel/</b><br></h4>
</a></div>
<div style="margin-left:67px;">This sample program uses low-level functions.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_3_8"><h4>
(8)&nbsp;<b>devkit/sample/sound/sas-streaming/</b><br></h4>
</a></div>
<div style="margin-left:67px;">This sample program links libatrac3plus with libsas to cause streaming playback of ATRAC3&trade; audio via SAS.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_2">
<h2>
 2 <!-- hp --><b>Description of Operation</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_2_1">
<h3>
<a href="#Heading3_2"> 2. </a>1 
<!-- hp1 --><b>Overview of ATRAC3&trade;/ATRAC3plus&trade; Data</b><br>
</a>
</h3>
<div style="margin-left:50px;">The ATRAC3&trade;/ATRAC3plus&trade; data used by libatrac3plus is mainly intended for game applications. As such, the data includes additional information such as that required for playing back loops.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_2">
<h3>
<a href="#Heading3_2"> 2. </a>2 
<!-- hp1 --><b>Overview of the libatrac3plus Usage Procedure</b><br>
</a>
</h3>
<div style="margin-left:50px;">When libatrac3plus is used to decode ATRAC3&trade;/ATRAC3plus&trade; data, a management ID (handle) known as an ATRAC&trade; ID is first obtained. <br>After that, an input buffer is associated with the ATRAC&trade; ID. The ATRAC&trade; ID can then be used to control the decoding of the desired data. <br>The following is a summary of the procedure for using libatrac3plus to perform processing up to the point of decoding.<br></div>
</ol>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Prepare the input and output buffers.</li>
<li VALUE=2> Obtain an ATRAC&trade; ID.</li>
<li VALUE=3> Read the ATRAC3&trade;/ATRAC3plus&trade; data into the input buffer.</li>
<li VALUE=4> Associate the input buffer with the ATRAC&trade; ID.</li>
<li VALUE=5> Using the ATRAC&trade; ID, output the decoded data to the output buffer.</li>
</ol></div>
<div style="margin-left:50px;">Note that a separate ATRAC&trade; ID must be used for each type of codec. Also, the number of ATRAC&trade; IDs that can be used simultaneously is limited (by default, there are two ATRAC&trade; IDs for ATRAC3plus&trade; and two for ATRAC3&trade;). This number can be changed by using the <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracReinit">sceAtracReinit</a></b>() function.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_3">
<h3>
<a href="#Heading3_2"> 2. </a>3 
<!-- hp1 --><b>About On-Memory Playback and Streaming Playback</b><br>
</a>
</h3>
<div style="margin-left:50px;">In libatrac3plus, an input buffer and an ATRAC&trade; ID are associated together to perform playback processing. If the size of the input buffer is greater than the size of the ATRAC3&trade;/ATRAC3plus&trade; data, it is not necessary to read in the data after associating the buffer and ATRAC&trade; ID. This type of data playback method is known as on-memory playback. Conversely, if the size of the input buffer is less than the size of the ATRAC3&trade;/ATRAC3plus&trade; data, processing will need to be performed to supply follow-on data. This type of playback method is known as streaming playback.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_4">
<h3>
<a href="#Heading3_2"> 2. </a>4 
<!-- hp1 --><b>Loop Playback </b><br>
</a>
</h3>
<div style="margin-left:50px;">As shown in Figure 1, particular sections of a tune can be played back multiple times (or endlessly) in a loop. at3tool, which is described later, can be used to set the starting and ending positions of the loop. The positions can be set by specifying individual samples. libatrac3plus will play back the loop based on this information.<br><br></div>

<div align=center>
<p>
<img src="gif/libatrac3plus-Overview-English001.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 1 Overview of Loop Playback Processing</b><br>
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_5">
<h3>
<a href="#Heading3_2"> 2. </a>5 
<!-- hp1 --><b>Second Buffer</b><br>
</a>
</h3>
<div style="margin-left:50px;">Two input buffers must be prepared when performing a streaming playback of ATRAC3&trade;/ATRAC3plus&trade; data that has data (C in Figure 2) after a loop processing section.<br>The first input buffer (first buffer) is the buffer for storing the data up to and including the loop processing section, and the second input buffer (second buffer) is the buffer for storing the data after the loop processing section (see the lower section of Figure 2).<br><br></div>

<div align=center>
<p>
<img src="gif/libatrac3plus-Overview-English002.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 2 Buffer Control of the First Buffer and the Second Buffer</b><br>
</div>
<br>
<div style="margin-left:50px;"><br>By preparing two buffers, the following will become possible (see Figure 3). <br>Playback can continue without causing data to be read suddenly regardless of whether the loop (B) is repeatedly played or the playback position is advanced (moved from B to C).<br><br></div>

<div align=center>
<p>
<img src="gif/libatrac3plus-Overview-English003.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 3 State of the Buffer when playing the Last Part of the Loop Processing Section B</b><br>
</div>
<br>

<!-- sce_title -->
<a Name ="HeadingT_2_5_1">
<div style="margin-left:40px;"><h4><b>Note</b><br><br></h4></div></a>

<div style="margin-left:67px;">While the second buffer is playing the required data, after the playback position is moved to (C), the first buffer is still used to maintain the data in part (C).<br>As a result, even if the second buffer is not that large, the data read frequency does not have to increase by very much when streaming playback is being performed for the data in part (C).<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_3">
<h2>
 3 <!-- hp --><b>Usage Procedure</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_3_1">
<h3>
<a href="#Heading3_3"> 3. </a>1 
<!-- hp1 --><b>Preparing ATRAC3&trade;/ATRAC3plus&trade; Data</b><br>
</a>
</h3>
<div style="margin-left:50px;">Use at3tool (described later) to generate ATRAC3&trade;/ATRAC3plus&trade; data from PCM data (.wav file). Proper operation is not guaranteed if data generated by some other tool is used with libatrac3plus.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_2">
<h3>
<a href="#Heading3_3"> 3. </a>2 
<!-- hp1 --><b>Initialization</b><br>
</a>
</h3>
<div style="margin-left:50px;">Before using libatrac3plus, use the module utility to load the modules.<br>The modules that must be loaded are avcodec and libatrac3plus.<br>Then, perform initialization by using the following procedure.<br><br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Call <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracGetAtracID">sceAtracGetAtracID</a></b>() and obtain an ATRAC&trade; ID. The number of ATRAC&trade; IDs that can be used simultaneously is limited. If an ID cannot be obtained, release an ATRAC&trade; ID which is not being used.</li>
<li VALUE=2> Read the ATRAC3&trade;/ATRAC3plus&trade; data into the input buffer. The input buffer must be at least a certain size (several kilobytes). If the data was successfully read in, call a function such as <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracSetData">sceAtracSetData</a></b>() to associate the ATRAC&trade; ID and the input buffer. For the arguments when performing this call, specify the ATRAC&trade; ID obtained in step (1) in <i>atracID</i>, the address of the input buffer in <i>pucBufferAddr</i>, and the size of the input buffer in <i>uiBufferByte</i>. Doing this will cause libatrac3plus to read in the information residing in the initial portion of the input data, such as the music length and the loop information, and to initialize the variables in the library.</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_3_3">
<h3>
<a href="#Heading3_3"> 3. </a>3 
<!-- hp1 --><b>Preparing Second Buffer</b><br>
</a>
</h3>
<div style="margin-left:50px;">The second buffer is needed when performing a streaming playback of ATRAC3&trade;/ATRAC3plus&trade; data that has data after a loop processing section (see Chapter 2).<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Call the <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracIsSecondBufferNeeded">sceAtracIsSecondBufferNeeded</a></b>() function to determine whether the second buffer is needed. If it is not needed, skip to "Decoding" in the next section.</li>
<li VALUE=2> Prepare a buffer different from the input buffer used in the initialization processing as a second buffer. The second buffer must also be at least a certain size (several kilobytes).</li>
<li VALUE=3> Get information about the data to be read into the second buffer using <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracGetSecondBufferInfo">sceAtracGetSecondBufferInfo</a></b>()<b>.</b> When this function is called, the offset from the beginning of ATRAC3&trade;/ATRAC3plus&trade; data to the data after the loop processing section is stored in *<i>puiPosition</i>, and the number of bytes from *<i>puiPositio</i>n to the end of the file is stored in *<i>puiDataByte</i>.</li>
<li VALUE=4> Based on the above information, read the data into the second buffer.</li>
<li VALUE=5> After the data has been read in, call <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracSetSecondBuffer">sceAtracSetSecondBuffer</a></b>(), associate the second buffer with the ATRAC&trade; ID, and register the second buffer in the library.</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_3_4">
<h3>
<a href="#Heading3_3"> 3. </a>4 
<!-- hp1 --><b>Decoding</b><br>
</a>
</h3>
<div style="margin-left:50px;">After the library has been initialized, use the following procedure to perform decoding.<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Prepare an output buffer. The size of the output buffer must be a multiple of 64 bytes, and it must be allocated on a 64-byte boundary with 64-byte alignment. The number of samples and number of channels that are obtained when decoding the next frame can be found by calling <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracGetNextSample">sceAtracGetNextSample</a></b>() and <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracGetOutputChannel">sceAtracGetOutputChannel</a></b>(). The buffer size must be at least twice the product of those values (the decoded data size of each sample is 2 bytes, or 16 bits). The maximum number of samples that can be obtained in a single decoding can be found by calling <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracGetMaxSample">sceAtracGetMaxSample</a></b>().</li>
<li VALUE=2> Call <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracDecodeData">sceAtracDecodeData</a></b>() with the buffer from step (1) passed in <i>psOutAddr</i>.</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_3_5">
<h3>
<a href="#Heading3_3"> 3. </a>5 
<!-- hp1 --><b>Streaming Playback</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following procedure should be used to perform streaming playback.<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> After calling <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracGetRemainFrame">sceAtracGetRemainFrame</a></b>(), check *<i>piRemainframe</i> to determine how many more times <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracDecodeData">sceAtracDecodeData</a></b>() can be called and whether additional processing is needed.</li>
<li VALUE=2> Call <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracGetStreamDataInfo">sceAtracGetStreamDataInfo</a></b>() to find out what part of the input buffer has already been decoded and can be overwritten. Specifically, this function stores the starting address of the available area in the input buffer in *<i>ppucWritePointer</i>, its size (in bytes) in *<i>puiWritableByte</i>, and the offset from the beginning of the file containing the ATRAC3&trade;/ATRAC3plus&trade; data where reading should continue in *<i>puiReadPosition</i>.</li>
<li VALUE=3> Add data to the input buffer based on the information described in (2). The amount of data that is added can be less than *<i>puiWritableByte</i>, however, data must be written to the input buffer beginning at *<i>ppucWritePointer</i>.</li>
<li VALUE=4> Call <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracAddStreamData">sceAtracAddStreamData</a></b>() to report the size of the added data to libatrac3plus.</li>
</ol></div>

<!-- sce_title -->
<a Name ="HeadingT_3_5_2">
<div style="margin-left:40px;"><h4><b>Additional Information 1</b><br><br></h4></div></a>

<div style="margin-left:67px;">There are many ways to determine whether additional data is needed in (1) or not. The simplest way is to divide the input buffer into two, use one of them until the end, and read additional data.<br>When such a method is used, it will be possible to adjust the timing for reading with the following method. <br>First, obtain the "number of times decoding can be performed (<i>N</i>)" in the initial state. This value can be obtained by verifying the value of *<i>piRemainframe</i> after calling <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracGetRemainFrame">sceAtracGetRemainFrame</a></b>() in a state where data has been read into the entire input buffer.<br>It can also be obtained by calculating according to the following equation.<br><br>	<img src="gif/libatrac3plus-Overview-English004.gif"></div>
<div style="margin-left:67px;"><br>In this equation, <i>Bufsize</i> is the input buffer size (in units of byte), <i>bps</i> is the bit rate of ATRAC3&trade;/ATRAC3plus&trade; data (in units of kbps), and <i>M</i> is the maximum number of samples to be output in a single decoding (1024 for ATRAC3&trade; and 2048 for ATRAC3plus&trade;).<br>It is recommended to read data asynchronously or in a separate thread which has lower priority so that the processing will not be stopped by reading data. <br>However, due to load situations of other threads or the like, there is a possibility that the reading is not fast enough and the sound is interrupted. In such a case, it will be necessary to manage, for example, by using a bigger buffer or increasing the number of buffers to divide a buffer into.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_5_3">
<div style="margin-left:40px;"><h4><b>Additional Information 2</b><br><br></h4></div></a>

<div style="margin-left:67px;">When performing streaming playback, refer to &quot;Streaming playback via UMD&trade;/DVD in Chapter 5 "Precautions". <br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_6">
<h3>
<a href="#Heading3_3"> 3. </a>6 
<!-- hp1 --><b>Resetting of the Playback Position</b><br>
</a>
</h3>
<div style="margin-left:50px;">The procedure to reset the playback position is as follows.<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Call <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracGetBufferInfoForResetting">sceAtracGetBufferInfoForResetting</a></b>() and use <i>uiSample</i> to specify the desired playback position.</li>
<li VALUE=2> After calling the above function, check *<i>puBufferInfo</i> and obtain the following information about the first buffer and second buffer.</li>
</ol></div>
<div style="margin-left:70px;"><ul>
<li> Start address for writing to buffer
<li> Maximum number of bytes which can be written to buffer
<li> Minimum number of bytes which must be written to buffer
<li> Position for reading data to be written to buffer
</ol></div>
<div style="margin-left:55px;"><ol>
<li VALUE=3> Set the data to the first buffer and second buffer based on the above information. The number of bytes to write must be greater than or equal to the number of bytes required and less than or equal to the maximum number of bytes.</li>
<li VALUE=4> Using <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracResetPlayPosition">sceAtracResetPlayPosition</a></b>(), inform libatrac3plus of the data size which was reset above and the <i>uiSample</i> playback position.</li>
</ul>
</ol></div>

<!-- sce_title -->
<a Name ="HeadingT_3_6_4">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:67px;">For on-memory playback, the buffer control processing performed in steps (1) to (3) above is not necessary. Set uiWriteByteFirstBuf and uiWriteByteSecondBuf of <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracResetPlayPosition">sceAtracResetPlayPosition</a></b>() to 0 instead.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_7">
<h3>
<a href="#Heading3_3"> 3. </a>7 
<!-- hp1 --><b>Termination</b><br>
</a>
</h3>
<div style="margin-left:50px;">During libatrac3plus termination processing, the ATRAC&trade; IDs that were allocated during initialization are released. Since only a limited number of ATRAC&trade; IDs can be used, be sure to release any IDs when they are not being used. The <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracReleaseAtracID">sceAtracReleaseAtracID</a></b>() function can be used to perform this function.<br><br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_4">
<h2>
 4 <!-- hp --><b>Encoding Tool</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_4_1">
<h3>
<a href="#Heading3_4"> 4. </a>1 
<!-- hp1 --><b>Overview</b><br>
</a>
</h3>
<div style="margin-left:50px;">at3tool is a tool that can be used to generate ATRAC3&trade;/ATRAC3plus&trade; data specifically for libatrac3plus.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_2">
<h3>
<a href="#Heading3_4"> 4. </a>2 
<!-- hp1 --><b>at3tool</b><br>
</a>
</h3>
<div style="margin-left:50px;">at3tool combines an encoder/decoder for generating and verifying ATRAC3&trade;/ATRAC3plus&trade; data that is used by libatrac3plus. Using at3tool to perform encoding and decoding enables the sound quality and size of the compressed data to be known in advance, and data to be generated according to a desired compression rate.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_3">
<h3>
<a href="#Heading3_4"> 4. </a>3 
<!-- hp1 --><b>Operating Environment</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following is the recommended operating environment for at3tool.<br>For details, refer to the at3tool User's Manual.<br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> Windows XP Service Pack 3 (Japanese version and English version)
<li> Windows Vista Service Pack 1 (Japanese version and English version)
<li> Linux
</ul></div>
<div style="margin-left:50px;"><br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_5">
<h2>
 5 <!-- hp --><b>Precautions</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_5_1">
<h3>
<a href="#Heading3_5"> 5. </a>1 
<!-- hp1 --><b>Supported Stream Data</b><br>
</a>
</h3>
<div style="margin-left:50px;">Be sure to use data that was generated by at3tool and a tool that supports AA3 file output. Proper operation is not guaranteed if data generated by other tools is used with libatrac3plus.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_2">
<h3>
<a href="#Heading3_5"> 5. </a>2 
<!-- hp1 --><b>AA3 Files</b><br>
</a>
</h3>
<div style="margin-left:50px;">AA3 is an acronym for ATRAC&trade; Audio with ID3v2 tag. An AA3 file is an unencoded ATRAC&trade; file with no copyright protection. It consists of three blocks: a metadata block which is similar to the ID3v2 tag, an audio header block, in which codec information is written, and an audio data block containing encoded ATRAC&trade; data.<br>libatrac3plus supports only simple file playback and cannot parse the ID3v2 tag.<br>A tool that can generate AA3 files as of April 2006 is the ACID Pro 6, which is sold by Sony Media Software.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_3">
<h3>
<a href="#Heading3_5"> 5. </a>3 
<!-- hp1 --><b>Output of Monaural Data</b><br>
</a>
</h3>
<div style="margin-left:50px;">When monaural data is decoded, either monaural or stereo can be selected as the decoding result (the same data is output to both the left and right channels). You can find details on this in the section on initialization functions in the libatrac3plus reference.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_4">
<h3>
<a href="#Heading3_5"> 5. </a>4 
<!-- hp1 --><b>Streaming Playback via UMD&trade;/DVD  </b><br>
</a>
</h3>
<div style="margin-left:50px;">When performing streaming playback via UMD&trade;/DVD, the <i>*buf</i>  pointer, the second argument of <b>sceIoRead</b>(), should conform to 4-byte alignment.  <br>When performing streaming playback with libatrac3plus, the address for the next data is specified in <i>*ppucWritePointer, </i>the second argument of <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracGetStreamDataInfo">sceAtracGetStreamDataInfo</a></b>(). In order for the <i>*ppucWritePointer </i>to have an address that always conforms to 4-byte alignment, the following conditions must be satisfied:<br><br></div>
</ul>
<div style="margin-left:55px;"><ol>
<li VALUE=1> The buffer set by the initialization function, such as <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracSetData">sceAtracSetData</a></b>(), <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracSetHalfwayBuffer">sceAtracSetHalfwayBuffer</a></b>(), <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracSetDataAndGetID">sceAtracSetDataAndGetID</a></b>(), or <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracSetHalfwayBufferAndGetID">sceAtracSetHalfwayBufferAndGetID</a></b>(), conforms with 4-byte alignment and in an area of multiples of 4-byte. </li>
<li VALUE=2> <i>uiReadByte</i> (number of valid bytes that were read from the beginning of the buffer) set by <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracSetHalfwayBuffer">sceAtracSetHalfwayBuffer</a></b>() or <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracSetHalfwayBufferAndGetID">sceAtracSetHalfwayBufferAndGetID</a></b>()<b> </b>is mupltiples of 4-byte.  </li>
<li VALUE=3> The buffer set by <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracSetSecondBuffer">sceAtracSetSecondBuffer</a></b>() function conforms with 4-byte alignment and in an area of multiples of 4-byte.  </li>
<li VALUE=4> (4)  The number of bytes specified in <i>uiAddByte</i> for the <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracAddStreamData">sceAtracAddStreamData</a></b>() function is a multiple of four.</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_5_5">
<h3>
<a href="#Heading3_5"> 5. </a>5 
<!-- hp1 --><b>Using libatrac3plus and the Software Audio Synthesizer (SAS) Simultaneously</b><br>
</a>
</h3>
<div style="margin-left:50px;">The core part of libatrac3plus (the ATRAC3&trade;/ATRAC3plus&trade; decoder) runs on the Media Engine. Furthermore, libsas calls SAS, which also runs on the Media Engine. As a result, when both libatrac3plus and libsas are used at the same time, there may be contention for Media Engine resources. In the worst case, SAS sound may get cut off. Please see the libsas overview (libsas-Overview) document for information on processing load when libsas and libatrac3plus are used at the same time.<br>Moreover, using the libatrac3plus loop-playback function may temporarily increase the load around the point where the loop returns. Therefore when using the libatrac3plus loop-playback function together with SAS, make sure that SAS output does not get cut off around the point where the loop returns.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_6">
<h3>
<a href="#Heading3_5"> 5. </a>6 
<!-- hp1 --><b>Stack Size of Threads</b><br>
</a>
</h3>
<div style="margin-left:50px;"><b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracDecodeData">sceAtracDecodeData</a>()</b> uses about 10 KB of stack space, which is the largest for any of the libatrac3plus functions. Therefore, when a thread that uses libatrac3plus is created, a bigger stack size than usual should be created. <br>To check the stack size in detail and reduce it to the minimum required, use <b><a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelGetThreadStackFreeSize">sceKernelGetThreadStackFreeSize</a></b>(), which is defined in thread.h.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_7">
<h3>
<a href="#Heading3_5"> 5. </a>7 
<!-- hp1 --><b>Precautions When Using the Second Buffer</b><br>
</a>
</h3>
<div style="margin-left:50px;">To perform streaming playback of data for which the second buffer is required (see Chapter 2), the location where data is to be read depends on the location that is currently being decoded. <br>If A denotes the location before the loop and B denotes the part after the loop, then the following shows the location being decoded and the location where data will be read for these two cases.<br><br><b>When the location that is currently being decoded is A:</b><br>After the current location is read, the location of A that follows that location will be the next location read.<br>To support the case where the number of loops is changed after data for the number of loops that is currently set has been completely read into the buffer, the A part will be read as data for which loop playback processing will continue.<br><br><b>When the location that is currently being decoded is B:</b><br>After the current location is read, the part of B that follows that location will be the next location to be read.<br><br>Therefore, when the second buffer is used and asynchronous reading is performed, a problem occurs in which decoding ends up getting performed at the read starting and ending points, and the read data ends up being different from what is expected.<br><br>The following two methods can be used to avoid this problem.<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Do not perform asynchronous reading when using the second buffer.</li>
<li VALUE=2> To use the second buffer to perform asynchronous reading, call <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracGetLoopStatus">sceAtracGetLoopStatus</a></b>() to check whether the loop playback status has changed before and after performing asynchronous reading. Only if the loop playback status has not changed, use <b><a href="../sound/libatrac3plus-Reference-English.htm#sceAtracAddStreamData">sceAtracAddStreamData</a></b>() to report the addition of data.</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_5_8">
<h3>
<a href="#Heading3_5"> 5. </a>8 
<!-- hp1 --><b>Termination Processing</b><br>
</a>
</h3>
<div style="margin-left:50px;">libatrac3plus internally calls the Media Engine's CPU functions and uses semaphores for exclusive processing of the Media Engine's internal resources. <br>If a thread that is calling libatrac3plus is forcibly deleted by using <b><a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelTerminateThread">sceKernelTerminateThread</a></b>() and <b><a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelTerminateDeleteThread">sceKernelTerminateDeleteThread</a></b>() before the thread transitions to DORMANT state while a libatrac3plus function is being executed, then depending on the timing, the thread may end up getting deleted while it continues to hold internal resources. As a result, there is a risk that another library that is using the Media Engine's CPU functions besides libatrac3plus may no longer work properly.<br><br>To terminate a thread, make sure the following actions are taken (the samples that use libatrac3plus are also constructed in this way):<br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> The side that requests the thread to terminate uses a shared variable or event flag to communicate its request to the thread.
<li> The thread that is to be terminated periodically monitors this flag to determine whether a termination request was issued. If a request was issued, the thread first verifies that libatrac3plus is not currently running and then it calls <b><a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelExitThread">sceKernelExitThread</a></b>() to terminate itself.
</ul></div>
<div style="margin-left:50px;"><br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
