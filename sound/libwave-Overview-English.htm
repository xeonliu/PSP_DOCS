<html lang="en">
<head>
<title>libwave-Overview</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
libwave Overview
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd3 -->
<a name="Heading3_1">
<h2>
 1 <!-- hp --><b>Library Overview</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_1_1">
<h3>
<a href="#Heading3_1"> 1. </a>1 
<!-- hp1 --><b>Functional Overview and Features</b><br>
</a>
</h3>
<div style="margin-left:50px;">libwave is a sound library that provides ADPCM (.vag) format fixed-pitch playback and 44.1 kHz 16-bit linear PCM format sound output functions. It runs on the main CPU. It can output 44.1 kHz 16-bit linear PCM format audio data and play back ADPCM-format sound data.<br><br></div>

<!-- sce_hd6 -->
<a name="Heading6_1_1_1">
<div style="margin-left:63px;"><h4><b>Features (ADPCM section)</b><br><br></h4></a></div>
</ul>
<div style="margin-left:70px;"><ul>
<li> Supports .vag format data.
<li> Sampling frequency is fixed at 44.1 kHz. (fixed playback pitch).
<li> Pitch conversion and envelope processing are omitted to provide a simple library.
<li> Max. 8 voices.
<li> Volume can be set (L and R independently) for each voice.
<li> Supports one-shot play for sound effects and continuous loop play
</ul></div>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd6 -->
<a name="Heading6_1_1_2">
<div style="margin-left:63px;"><h4><b>Features (PCM section)</b><br><br></h4></a></div>
<div style="margin-left:70px;"><ul>
<li> Supports 16-bit linear PCM format (little-endian only)
<li> Sampling frequency is 44.1 kHz fixed
<li> Provides API for audio driver control.
<li> Max. 3 channels.
<li> Volume can be set (L and R independently) for each channel.
</ul></div>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_2">
<h3>
<a href="#Heading3_1"> 1. </a>2 
<!-- hp1 --><b>Processing Flow Up to Sound Output</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following figure shows the processing flow up to sound output when libwave is used. An audio output request from a game title is passed from libwave to the audio driver. The audio driver mixes all voices and delivers the mixing result to the audio output hardware.<br><br></div>

<div align=center>
<p>
<img src="gif/libwave-Overview-English001.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 1 Processing Flow Up to Sound Output</b><br>
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_3">
<h3>
<a href="#Heading3_1"> 1. </a>3 
<!-- hp1 --><b>Related Files</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following files are required to use libwave.<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Category</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Filename</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Library&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libwave.a&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Header file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libwave.h&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- sce_hd4 -->
<a name="Heading4_1_4">
<h3>
<a href="#Heading3_1"> 1. </a>4 
<!-- hp1 --><b>Sample Programs</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following sample programs use libwave.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_4_1"><h4>
(1)&nbsp;<b>psp/devkit/sample/sound/starsound</b><br></h4>
</a></div>
<div style="margin-left:67px;">This sample plays ADPCM-format sound effects.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_4_2"><h4>
(2)&nbsp;<b>psp/devkit/sample/sound/stringsound</b><br></h4>
</a></div>
<div style="margin-left:67px;">This sample uses libwave to output ATRAC3plus&trade; sound data that was decoded to PCM by using the ATRAC3plus&trade; library (libatrac3plus).<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_1_4_3"><h4>
(3)&nbsp;<b>psp/devkit/sample/sound/starmix</b><br></h4>
</a></div>
<div style="margin-left:67px;">This sample uses libwave to output PCM sound that was generated by using the software audio synthesizer library (libsas) and ATRAC3plus&trade; sound data that was decoded to PCM by using the ATRAC3plus&trade; library (libatrac3plus).<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_2">
<h2>
 2 <!-- hp --><b>Overview of Usage Procedure</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_2_1">
<h3>
<a href="#Heading3_2"> 2. </a>1 
<!-- hp1 --><b>Procedure for Using libwave</b><br>
</a>
</h3>
<div style="margin-left:50px;">libwave can be used according to the following procedure.<br><br>When handling ADPCM-format sound and PCM-format sound<br></div>
</ol>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Use <a href="../sound/libwave-Reference-English.htm#sceWaveInit">sceWaveInit</a>() to perform intiailization processing.</li>
<li VALUE=2> Use <a href="../sound/libwave-Reference-English.htm#sceWaveStart">sceWaveStart</a>() to start up the sound system.</li>
<li VALUE=3> Use functions such as <a href="../sound/libwave-Reference-English.htm#sceWavePlay">sceWavePlay</a>(), <a href="../sound/libwave-Reference-English.htm#sceWaveStop">sceWaveStop</a>(), and <a href="../sound/libwave-Reference-English.htm#sceWaveAudioWriteBlocking">sceWaveAudioWriteBlocking</a>() to perform various types of sound processing.</li>
<li VALUE=4> Use <a href="../sound/libwave-Reference-English.htm#sceWaveEnd">sceWaveEnd</a>() to stop the sound system.</li>
<li VALUE=5> Use <a href="../sound/libwave-Reference-English.htm#sceWaveExit">sceWaveExit</a>() to perform termination processing.</li>
</ol></div>
<div style="margin-left:50px;"><br>When handling only PCM-format sound (such as when using streaming to play BGM)<br></div>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Use <a href="../sound/libwave-Reference-English.htm#sceWaveInit">sceWaveInit</a>() to perform intiailization processing.</li>
<li VALUE=2> Use functions such as <a href="../sound/libwave-Reference-English.htm#sceWaveAudioWriteBlocking">sceWaveAudioWriteBlocking</a>() to perform various types of sound processing.</li>
<li VALUE=3> Use <a href="../sound/libwave-Reference-English.htm#sceWaveExit">sceWaveExit</a>() to perform termination processing.</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_2_2">
<h3>
<a href="#Heading3_2"> 2. </a>2 
<!-- hp1 --><b>Initialization and Termination Processing</b><br>
</a>
</h3>
<div style="margin-left:50px;">To use libwave, <a href="../sound/libwave-Reference-English.htm#sceWaveInit">sceWaveInit</a>() must be used to perform initialization processing. Also, after using libwave, use <a href="../sound/libwave-Reference-English.htm#sceWaveExit">sceWaveExit</a>() to perform termination processing when the application ends.<br><br>Example:<br></div>
        <div style="margin-left:80px;"><pre><font size=3>int iRc;

/* Initialization processing */
iRc = <a href="../sound/libwave-Reference-English.htm#sceWaveInit">sceWaveInit</a>();
if (iRc != SCE_OK){
	/* Initialization failed */
}

/* Specify processing for using libwave functions here */

/* Termination processing */
iRc = <a href="../sound/libwave-Reference-English.htm#sceWaveExit">sceWaveExit</a>();
if (iRc != SCE_OK){
	/* Termination processing failed */
}
</font></pre></div>

<!-- sce_hd4 -->
<a name="Heading4_2_3">
<h3>
<a href="#Heading3_2"> 2. </a>3 
<!-- hp1 --><b>Starting and Stopping the Sound System for ADPCM Processing</b><br>
</a>
</h3>
<div style="margin-left:50px;">To use libwave to play ADPCM-format sound, <a href="../sound/libwave-Reference-English.htm#sceWaveStart">sceWaveStart</a>() must be used to start up the simple sound system that is within libwave. After the sound system has been started, it can be stopped by using <a href="../sound/libwave-Reference-English.htm#sceWaveEnd">sceWaveEnd</a>().<br>When <a href="../sound/libwave-Reference-English.htm#sceWaveStart">sceWaveStart</a>() is executed, libwave creates/starts a thread for sound processing, and sound processing begins. The thread that is created at this time operates with the priority that was specified as an argument of <a href="../sound/libwave-Reference-English.htm#sceWaveStart">sceWaveStart</a>(). If the specified priority is too low, the generated sound may be intermittent and may not be played correctly because other processing will take precedence over sound processing. Be sure that the priority specified in <a href="../sound/libwave-Reference-English.htm#sceWaveStart">sceWaveStart</a>() is as high as possible.<br>When <a href="../sound/libwave-Reference-English.htm#sceWaveEnd">sceWaveEnd</a>() is executed, the sound system stops. The thread that was created/started by <a href="../sound/libwave-Reference-English.htm#sceWaveStart">sceWaveStart</a>() is stopped/deleted by <a href="../sound/libwave-Reference-English.htm#sceWaveEnd">sceWaveEnd</a>().<br><br>Example:<br></div>
        <div style="margin-left:80px;"><pre><font size=3>int iRc;

/*
	Make the sound system priority higher than that of the main thread
	Start it with SCE_KERNEL_USER_HIGHEST_PRIORITY
*/
iRc = <a href="../sound/libwave-Reference-English.htm#sceWaveStart">sceWaveStart</a>( SCE_KERNEL_USER_HIGHEST_PRIORITY );
if (iRc != SCE_OK){
	/* Processing could not be started by sound system */
}

/* Stop sound system */
iRc = <a href="../sound/libwave-Reference-English.htm#sceWaveEnd">sceWaveEnd</a>();
if (iRc != SCE_OK){
	/* Stop processing failed */
}
</font></pre></div>

<!-- sce_hd4 -->
<a name="Heading4_2_4">
<h3>
<a href="#Heading3_2"> 2. </a>4 
<!-- hp1 --><b>Method of Outputting PCM Sound</b><br>
</a>
</h3>
<div style="margin-left:50px;">libwave can output PCM-format sound. Before outputting PCM-format sound, first set the format to stereo or monaural and the output sample length for the data to be output.<br><br>Example:<br></div>
        <div style="margin-left:80px;"><pre><font size=3>int iRc;

/* Set format of data to be output to channel 0 to stereo (LR interleaved) */
iRc = <a href="../sound/libwave-Reference-English.htm#sceWaveAudioSetFormat">sceWaveAudioSetFormat</a>(0, <a href="../sound/libwave-Reference-English.htm#SCE_WAVE_AUDIO_FMT_S16_STEREO">SCE_WAVE_AUDIO_FMT_S16_STEREO</a>);
if (iRc != SCE_OK){
	/* Setting failed */
}
/* Set the output sample length for channel 0 to 256 samples */
iRc = <a href="../sound/libwave-Reference-English.htm#sceWaveAudioSetSample">sceWaveAudioSetSample</a>(0,256);
if (iRc != SCE_OK){
	/* Setting failed */
}
</font></pre></div>
<div style="margin-left:50px;"><br>A function such as <a href="../sound/libwave-Reference-English.htm#sceWaveAudioWriteBlocking">sceWaveAudioWriteBlocking</a>() is used to output PCM-format sound.<br><a href="../sound/libwave-Reference-English.htm#sceWaveAudioWriteBlocking">sceWaveAudioWriteBlocking</a>() registers the PCM-format sound that is stored in the specified buffer in the audio driver. Playback of the registered sound data is started after sound data that had already been registered in the audio driver is played.<br>Audio is not necessarily played back immediately because it was registered in the driver. Also, the audio driver does not create a copy of the sound data. As a result, if the buffer contents are overwritten before playback is actually started or while playback is in progress, the contents are not played back correctly. Make sure that the sound output-only buffer is at least a double buffer so that the buffer contents immediately after sound is registered are not overwritten.<br><br>Example:<br></div>
        <div style="margin-left:80px;"><pre><font size=3>/* Make pcmBuf be a double buffer */
int iSide = 0;

/* Output 16-bit PCM STEREO data that is in pcmBuf[iSide] to channel 0 */
<a href="../sound/libwave-Reference-English.htm#sceWaveAudioWriteBlocking">sceWaveAudioWriteBlocking</a>(
	0,
	<a href="../sound/libwave-Reference-English.htm#SCE_WAVE_AUDIO_VOL_MAX">SCE_WAVE_AUDIO_VOL_MAX</a>,
	<a href="../sound/libwave-Reference-English.htm#SCE_WAVE_AUDIO_VOL_MAX">SCE_WAVE_AUDIO_VOL_MAX</a>,
	pcmBuf[iSide]
);
iSide ^= 1;

</font></pre></div>
<div style="margin-left:50px;">A similar precaution is required even during termination. When PCM data is placed in a dynamically allocated memory area (an area that was allocated with the malloc function or in an automatic variable that is allocated by the function), if the memory area ends up getting freed before output of the relevant data ends, different kinds of noise may be output depending on the conditions during execution. Be sure to confirm that output of the "last data" has reliably ended before freeing the memory area. Also, although a dedicated thread is often used to output PCM format sound, in such cases, synchronization between threads should be performed so that no operation such as stopping a thread while the sound output thread is still outputting data is performed. (For details, see the sample program.)<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_3">
<h2>
 3 <!-- hp --><b>Precautions</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_3_1">
<h3>
<a href="#Heading3_3"> 3. </a>1 
<!-- hp1 --><b>Important Precaution Related to Thread Switching and Priorities</b><br>
</a>
</h3>
<div style="margin-left:50px;">In the PSP&trade;, sound is output to the hardware by a device driver thread running on the CPU. As a result, if some condition occurs that causes thread switching to be disabled, audio output may be stopped and a harsh noise may be generated. Make sure that the interrupt-disabled interval or dispatch-disabled interval is not too long while sound is being output. As a rule of thumb, these intervals should be at most several hundred microseconds long.<br><br>Make the priority of the sound specified in <a href="../sound/libwave-Reference-English.htm#sceWaveStart">sceWaveStart</a>() as high as possible. Unless there is a particular problem, setting the priority to SCE_KERNEL_USER_HIGHEST_PRIORITY is recommended. If the priority of the sound processing thread is too low, noise may end up getting mixed in with the sound, the sound might be intermittent, or it might not be played at all.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_2">
<h3>
<a href="#Heading3_3"> 3. </a>2 
<!-- hp1 --><b>Precautions Related to CPU Load</b><br>
</a>
</h3>
<div style="margin-left:50px;">The main CPU performs all libwave processing. Also, since the PSP&trade; does not have hardware for decoding ADPCM format data to PCM format or special hardware for outputting multiple voices, the CPU performs all processing such as mixing.<br>As a result, if the number of voices is increased excessively, the load on the SC-side CPU will increase significantly.<br><br>Since the mixing functions installed in libwave and within the audio driver were written in an extremely general manner, they are not optimum in terms of speed. If this is a problem, you can improve CPU performance by a technique such as implementing a bare-bones mixer in the user application, or by using the simple audio function to output audio without using the mixing function. See the sample programs in devkit/sample/sound/at3mix/.<br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2008 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
