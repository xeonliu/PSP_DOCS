<html lang="en">
<head>
<title>libp3da-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
libp3da Reference
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceP3daVector"></a>
<table width="100%"><td width="70%"><font size=6>SceP3daVector<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Vector (Cartesian coordinates)<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct{
	int <i>x</i>,
	int <i>y</i>,
	int <i>z</i>
} <b>SceP3daVector</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>x</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Component of vector in the X-axis direction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>y</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Component of vector in the Y-axis direction&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>z</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Component of vector in the Z-axis direction&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This structure represents either a 3D distance vector or a 3D velocity vector using Cartesian coordinates.<br>For a distance vector, the units are millimeters [mm], and the values are represented as 28-bit integers. Therefore, values can be in the range -0x0fffffff to 0 to +0x0fffffff (±268435455).<br>For a velocity vector, the units are millimeters/second [mm/sec] and values can also be in the range -0x0fffffff to 0 to +0x0fffffff (±268435455).<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetPosition">sceP3daSetPosition</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPosition">sceP3daGetPosition</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetPositionRelative">sceP3daSetPositionRelative</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPositionRelative">sceP3daGetPositionRelative</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetUserPosition">sceP3daSetUserPosition</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetUserPosition">sceP3daGetUserPosition</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetUserOrientation">sceP3daSetUserOrientation</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetUserOrientation">sceP3daGetUserOrientation</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetVelocity">sceP3daSetVelocity</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetVelocity">sceP3daGetVelocity</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetUserVelocity">sceP3daSetUserVelocity</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetUserVelocity">sceP3daGetUserVelocity</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetOrientation">sceP3daSetOrientation</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetOrientation">sceP3daGetOrientation</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceP3daPolar"></a>
<table width="100%"><td width="70%"><font size=6>SceP3daPolar<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Vector (polar coordinates)<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>typedef struct{
	int <i>azimuth</i>,
	int <i>elevation</i>,
	int <i>distance</i>
} <b>SceP3daPolar</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>azimuth</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Angle between the listener and sound source in the horizontal direction as seen from above the listener -180 to 0 to +180 [degrees]&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>elevation</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Angle between the listener and sound source in the vertical direction as seen from in front of the listener -90 to 0 to +90 [degrees]&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>distance</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Linear distance from listener to sound source&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This structure represents the 3D position of a sound source from the listener in terms of angles and distance (polar coordinates).<br>The distance in millimeters [mm] is represented as a 28-bit integer and can have only positive values.<br>Therefore, valid values can be in the range 0 to +0x0fffffff.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetPositionPolarRelative">sceP3daSetPositionPolarRelative</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPositionPolarRelative">sceP3daGetPositionPolarRelative</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_BLOCK_SAMPLES_DEFAULT"></a><a name="SCE_P3DA_BLOCK_SAMPLES_MIN"></a><a name="SCE_P3DA_BLOCK_SAMPLES_MAX"></a>
<a name="SCE_P3DA_BLOCK_SAMPLES_DEFAULT / SCE_P3DA_BLOCK_SAMPLES_MIN / SCE_P3DA_BLOCK_SAMPLES_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_BLOCK_SAMPLES_DEFAULT / SCE_P3DA_BLOCK_SAMPLES_MIN / SCE_P3DA_BLOCK_SAMPLES_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Number of samples in one unit of granularity<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_BLOCK_SAMPLES_DEFAULT	(256)
#define SCE_P3DA_BLOCK_SAMPLES_MIN	(64)
#define SCE_P3DA_BLOCK_SAMPLES_MAX	(2048)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant is specified by <a href="../sound/libp3da-Reference-English.htm#sceP3daInit">sceP3daInit</a>().<br>It represents the number of samples that are generated when the periodic function <a href="../sound/libp3da-Reference-English.htm#sceP3daCore">sceP3daCore</a>() is called.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daInit">sceP3daInit</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_BLOCK_SAMPLES_STEP"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_BLOCK_SAMPLES_STEP<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Number of sample steps in one unit of granularity<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_BLOCK_SAMPLES_STEP	(32)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant is the number of steps in the sample size specified by <a href="../sound/libp3da-Reference-English.htm#sceP3daInit">sceP3daInit</a>().<br>It is the number of steps in the number of samples that are generated when the periodic function <a href="../sound/libp3da-Reference-English.htm#sceP3daCore">sceP3daCore</a>() is called.<br>Any number between the minimum (<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_BLOCK_SAMPLES_MIN">SCE_P3DA_BLOCK_SAMPLES_MIN</a>) and maximum (<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_BLOCK_SAMPLES_MAX">SCE_P3DA_BLOCK_SAMPLES_MAX</a>) value can be specified in units of SCE_P3DA_BLOCK_SAMPLES_STEP.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daInit">sceP3daInit</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_SAMPLE_RATE"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_SAMPLE_RATE<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sampling frequency<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_SAMPLE_RATE	(44100)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the sampling frequency that is handled by libp3da.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daCore">sceP3daCore</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daInit">sceP3daInit</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_MAXCHANNELS"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_MAXCHANNELS<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Maximum number of channels<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_MAXCHANNELS	(4)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the maximum number of sound sources that can be handled by libp3da.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daInit">sceP3daInit</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_CARTESIAN_DEFAULT_X"></a><a name="SCE_P3DA_CARTESIAN_DEFAULT_Y"></a><a name="SCE_P3DA_CARTESIAN_DEFAULT_Z"></a>
<a name="SCE_P3DA_CARTESIAN_DEFAULT_X / SCE_P3DA_CARTESIAN_DEFAULT_Y / SCE_P3DA_CARTESIAN_DEFAULT_Z"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_CARTESIAN_DEFAULT_X / SCE_P3DA_CARTESIAN_DEFAULT_Y / SCE_P3DA_CARTESIAN_DEFAULT_Z<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Initial coordinate values<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_CARTESIAN_DEFAULT_X	(0)
#define SCE_P3DA_CARTESIAN_DEFAULT_Y	(0)
#define SCE_P3DA_CARTESIAN_DEFAULT_Z	(0)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants represent the initial values of position vectors and velocity vectors in Cartesian coordinates.<br>They are treated as 28-bit values.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetPosition">sceP3daSetPosition</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPosition">sceP3daGetPosition</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetPositionRelative">sceP3daSetPositionRelative</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPositionRelative">sceP3daGetPositionRelative</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetUserPosition">sceP3daSetUserPosition</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetUserPosition">sceP3daGetUserPosition</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetVelocity">sceP3daSetVelocity</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetVelocity">sceP3daGetVelocity</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetUserVelocity">sceP3daSetUserVelocity</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetUserVelocity">sceP3daGetUserVelocity</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_CARTESIAN_MIN"></a><a name="SCE_P3DA_CARTESIAN_MAX"></a>
<a name="SCE_P3DA_CARTESIAN_MIN / SCE_P3DA_CARTESIAN_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_CARTESIAN_MIN / SCE_P3DA_CARTESIAN_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Minimum/maximum coordinate values<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_CARTESIAN_MIN	(-0x0fffffff)
#define SCE_P3DA_CARTESIAN_MAX	(0x0fffffff)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants represent the minimum and maximum values of position vectors and velocity vectors in Cartesian coordinates.<br>They are treated as 28-bit values.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetPosition">sceP3daSetPosition</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPosition">sceP3daGetPosition</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetPositionRelative">sceP3daSetPositionRelative</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPositionRelative">sceP3daGetPositionRelative</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetUserPosition">sceP3daSetUserPosition</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetUserPosition">sceP3daGetUserPosition</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetVelocity">sceP3daSetVelocity</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetVelocity">sceP3daGetVelocity</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetUserVelocity">sceP3daSetUserVelocity</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetUserVelocity">sceP3daGetUserVelocity</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_ORIENTATION_FRONT_DEFAULT_X"></a><a name="SCE_P3DA_ORIENTATION_FRONT_DEFAULT_Y"></a><a name="SCE_P3DA_ORIENTATION_FRONT_DEFAULT_Z"></a>
<a name="SCE_P3DA_ORIENTATION_FRONT_DEFAULT_X / SCE_P3DA_ORIENTATION_FRONT_DEFAULT_Y / SCE_P3DA_ORIENTATION_FRONT_DEFAULT_Z"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_ORIENTATION_FRONT_DEFAULT_X / SCE_P3DA_ORIENTATION_FRONT_DEFAULT_Y / SCE_P3DA_ORIENTATION_FRONT_DEFAULT_Z<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Coordinate values of front direction vector<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_ORIENTATION_FRONT_DEFAULT_X	(0)
#define SCE_P3DA_ORIENTATION_FRONT_DEFAULT_Y	(0)
#define SCE_P3DA_ORIENTATION_FRONT_DEFAULT_Z	(-1000)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants represent the initial values of the direction vector facing the sound source (sound cone direction) and the initial values of the front direction vector for the listener's orientation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetUserOrientation">sceP3daSetUserOrientation</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetUserOrientation">sceP3daGetUserOrientation</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daSetOrientation">sceP3daSetOrientation</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetOrientation">sceP3daGetOrientation</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_ORIENTATION_UP_DEFAULT_X"></a><a name="SCE_P3DA_ORIENTATION_UP_DEFAULT_Y"></a><a name="SCE_P3DA_ORIENTATION_UP_DEFAULT_Z"></a>
<a name="SCE_P3DA_ORIENTATION_UP_DEFAULT_X / SCE_P3DA_ORIENTATION_UP_DEFAULT_Y / SCE_P3DA_ORIENTATION_UP_DEFAULT_Z"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_ORIENTATION_UP_DEFAULT_X / SCE_P3DA_ORIENTATION_UP_DEFAULT_Y / SCE_P3DA_ORIENTATION_UP_DEFAULT_Z<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Coordinate values of up direction vector<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_ORIENTATION_UP_DEFAULT_X		(0)
#define SCE_P3DA_ORIENTATION_UP_DEFAULT_Y		(1000)
#define SCE_P3DA_ORIENTATION_UP_DEFAULT_Z		(0)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants represent the initial values of the up direction vector for the listener's orientation.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetUserOrientation">sceP3daSetUserOrientation</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetUserOrientation">sceP3daGetUserOrientation</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_POLAR_AZIMUTH_DEFAULT"></a><a name="SCE_P3DA_POLAR_AZIMUTH_MIN"></a><a name="SCE_P3DA_POLAR_AZIMUTH_MAX"></a>
<a name="SCE_P3DA_POLAR_AZIMUTH_DEFAULT / SCE_P3DA_POLAR_AZIMUTH_MIN / SCE_P3DA_POLAR_AZIMUTH_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_POLAR_AZIMUTH_DEFAULT / SCE_P3DA_POLAR_AZIMUTH_MIN / SCE_P3DA_POLAR_AZIMUTH_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Polar coordinate azimuth angle<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_POLAR_AZIMUTH_DEFAULT	(0)
#define SCE_P3DA_POLAR_AZIMUTH_MIN		(-180)
#define SCE_P3DA_POLAR_AZIMUTH_MAX	(+180)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are used for indicating the angle in the left or right direction in polar coordinates, when specifying the position.<br>The units are degrees.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetPositionPolarRelative">sceP3daSetPositionPolarRelative</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPositionPolarRelative">sceP3daGetPositionPolarRelative</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_POLAR_ELEVATION_DEFAULT"></a><a name="SCE_P3DA_POLAR_ELEVATION_MIN"></a><a name="SCE_P3DA_POLAR_ELEVATION_MAX"></a>
<a name="SCE_P3DA_POLAR_ELEVATION_DEFAULT / SCE_P3DA_POLAR_ELEVATION_MIN / SCE_P3DA_POLAR_ELEVATION_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_POLAR_ELEVATION_DEFAULT / SCE_P3DA_POLAR_ELEVATION_MIN / SCE_P3DA_POLAR_ELEVATION_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Polar coordinate elevation angle<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_POLAR_ELEVATION_DEFAULT	(0)
#define SCE_P3DA_POLAR_ELEVATION_MIN	(-90)
#define SCE_P3DA_POLAR_ELEVATION_MAX	(+90)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are used for indicating the angle in the up or down direction in polar coordinates, when specifying the position.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetPositionPolarRelative">sceP3daSetPositionPolarRelative</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPositionPolarRelative">sceP3daGetPositionPolarRelative</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_POLAR_DISTANCE_DEFAULT"></a><a name="SCE_P3DA_POLAR_DISTANCE_MIN"></a><a name="SCE_P3DA_POLAR_DISTANCE_MAX"></a>
<a name="SCE_P3DA_POLAR_DISTANCE_DEFAULT / SCE_P3DA_POLAR_DISTANCE_MIN / SCE_P3DA_POLAR_DISTANCE_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_POLAR_DISTANCE_DEFAULT / SCE_P3DA_POLAR_DISTANCE_MIN / SCE_P3DA_POLAR_DISTANCE_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Polar coordinate distance<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_POLAR_DISTANCE_DEFAULT	(0)
#define SCE_P3DA_POLAR_DISTANCE_MIN	(0)
#define SCE_P3DA_POLAR_DISTANCE_MAX	(<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_CARTESIAN_MAX">SCE_P3DA_CARTESIAN_MAX</a>)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are used for indicating the distance in polar coordinates, when specifying the position.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetPositionPolarRelative">sceP3daSetPositionPolarRelative</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPositionPolarRelative">sceP3daGetPositionPolarRelative</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_LEVEL_DEFAULT"></a><a name="SCE_P3DA_LEVEL_MIN"></a><a name="SCE_P3DA_LEVEL_MAX"></a>
<a name="SCE_P3DA_LEVEL_DEFAULT / SCE_P3DA_LEVEL_MIN / SCE_P3DA_LEVEL_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_LEVEL_DEFAULT / SCE_P3DA_LEVEL_MIN / SCE_P3DA_LEVEL_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Sound source volume level<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_LEVEL_DEFAULT	(0)
#define SCE_P3DA_LEVEL_MIN	(-10000)
#define SCE_P3DA_LEVEL_MAX	(0)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are used for indicating the volume level of the sound source.<br>The units are millibels.<br>(*) A millibel ([mB]) is 1/100 of a decibel. (-10000 [mB] = -100 [dB]).<br>-10000 millibels is the mute level.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetLevel">sceP3daSetLevel</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetLevel">sceP3daGetLevel</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_MIN_DISTANCE_DEFAULT"></a><a name="SCE_P3DA_MIN_DISTANCE_MIN"></a><a name="SCE_P3DA_MIN_DISTANCE_MAX"></a>
<a name="SCE_P3DA_MIN_DISTANCE_DEFAULT / SCE_P3DA_MIN_DISTANCE_MIN / SCE_P3DA_MIN_DISTANCE_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_MIN_DISTANCE_DEFAULT / SCE_P3DA_MIN_DISTANCE_MIN / SCE_P3DA_MIN_DISTANCE_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Minimum rolloff distance<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_MIN_DISTANCE_DEFAULT	(1000)
#define SCE_P3DA_MIN_DISTANCE_MIN	(100)
#define SCE_P3DA_MIN_DISTANCE_MAX	(<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_CARTESIAN_MAX">SCE_P3DA_CARTESIAN_MAX</a>)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are used for indicating the value of the minimum distance specification of the rolloff setting.<br>The units are millimeters.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetRolloffDistances">sceP3daSetRolloffDistances</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetRolloffDistances">sceP3daGetRolloffDistances</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_MAX_DISTANCE_DEFAULT"></a><a name="SCE_P3DA_MAX_DISTANCE_MIN"></a><a name="SCE_P3DA_MAX_DISTANCE_MAX"></a>
<a name="SCE_P3DA_MAX_DISTANCE_DEFAULT / SCE_P3DA_MAX_DISTANCE_MIN / SCE_P3DA_MAX_DISTANCE_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_MAX_DISTANCE_DEFAULT / SCE_P3DA_MAX_DISTANCE_MIN / SCE_P3DA_MAX_DISTANCE_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Maximum rolloff distance<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_MAX_DISTANCE_DEFAULT	(10000)
#define SCE_P3DA_MAX_DISTANCE_MIN	(100)
#define SCE_P3DA_MAX_DISTANCE_MAX	(<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_CARTESIAN_MAX">SCE_P3DA_CARTESIAN_MAX</a>)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are used for indicating the value of the maximum distance specification of the rolloff setting.<br>The units are millimeters.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetRolloffDistances">sceP3daSetRolloffDistances</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetRolloffDistances">sceP3daGetRolloffDistances</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_ROLLOFFFACTOR_DEFAULT"></a><a name="SCE_P3DA_ROLLOFFFACTOR_MIN"></a><a name="SCE_P3DA_ROLLOFFFACTOR_MAX"></a>
<a name="SCE_P3DA_ROLLOFFFACTOR_DEFAULT / SCE_P3DA_ROLLOFFFACTOR_MIN / SCE_P3DA_ROLLOFFFACTOR_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_ROLLOFFFACTOR_DEFAULT / SCE_P3DA_ROLLOFFFACTOR_MIN / SCE_P3DA_ROLLOFFFACTOR_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Rolloff factor<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_ROLLOFFFACTOR_DEFAULT	(0x00010000)
#define SCE_P3DA_ROLLOFFFACTOR_MIN	(0)
#define SCE_P3DA_ROLLOFFFACTOR_MAX	(0x000A0000)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are used for indicating the value of the rolloff factor.<br>The rolloff factor is represented as a 16-bit : 16-bit fixed-point number.<br>0x00010000 represents 1.0, and 0x000A0000 represents 10.0.<br>If 0 is set, it means that rolloff will be disabled.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetRolloffFactor">sceP3daSetRolloffFactor</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetRolloffFactor">sceP3daGetRolloffFactor</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_DOPPLERFACTOR_DEFAULT"></a><a name="SCE_P3DA_DOPPLERFACTOR_MIN"></a><a name="SCE_P3DA_DOPPLERFACTOR_MAX"></a>
<a name="SCE_P3DA_DOPPLERFACTOR_DEFAULT / SCE_P3DA_DOPPLERFACTOR_MIN / SCE_P3DA_DOPPLERFACTOR_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_DOPPLERFACTOR_DEFAULT / SCE_P3DA_DOPPLERFACTOR_MIN / SCE_P3DA_DOPPLERFACTOR_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Doppler factor<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_DOPPLERFACTOR_DEFAULT	(0x00010000)
#define SCE_P3DA_DOPPLERFACTOR_MIN	(0)
#define SCE_P3DA_DOPPLERFACTOR_MAX	(0x000A0000)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are used for indicating the value of the Doppler factor.<br>The Doppler factor is represented as a 16-bit : 16-bit fixed-point number.<br>0x00010000 represents 1.0, and 0x000A0000 represents 10.0.<br>If 0 is set, it means that the Doppler effect will be disabled.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetDopplerFactor">sceP3daSetDopplerFactor</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetDopplerFactor">sceP3daGetDopplerFactor</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_CONEANGLEINNER_DEFAULT"></a><a name="SCE_P3DA_CONEANGLEINNER_MIN"></a><a name="SCE_P3DA_CONEANGLEINNER_MAX"></a>
<a name="SCE_P3DA_CONEANGLEINNER_DEFAULT / SCE_P3DA_CONEANGLEINNER_MIN / SCE_P3DA_CONEANGLEINNER_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_CONEANGLEINNER_DEFAULT / SCE_P3DA_CONEANGLEINNER_MIN / SCE_P3DA_CONEANGLEINNER_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Inner sound cone angle<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_CONEANGLEINNER_DEFAULT	(360)
#define SCE_P3DA_CONEANGLEINNER_MIN	(0)
#define SCE_P3DA_CONEANGLEINNER_MAX	(360)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are used for indicating the inner cone angle of the sound cone.<br>The units are degrees.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetConeAngles">sceP3daSetConeAngles</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetConeAngles">sceP3daGetConeAngles</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_CONEANGLEOUTER_DEFAULT"></a><a name="SCE_P3DA_CONEANGLEOUTER_MIN"></a><a name="SCE_P3DA_CONEANGLEOUTER_MAX"></a>
<a name="SCE_P3DA_CONEANGLEOUTER_DEFAULT / SCE_P3DA_CONEANGLEOUTER_MIN / SCE_P3DA_CONEANGLEOUTER_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_CONEANGLEOUTER_DEFAULT / SCE_P3DA_CONEANGLEOUTER_MIN / SCE_P3DA_CONEANGLEOUTER_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Outer sound cone angle<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_CONEANGLEOUTER_DEFAULT	(360)
#define SCE_P3DA_CONEANGLEOUTER_MIN	(0)
#define SCE_P3DA_CONEANGLEOUTER_MAX	(360)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are used for indicating the outer cone angle of the sound cone.<br>The units are degrees.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetConeAngles">sceP3daSetConeAngles</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetConeAngles">sceP3daGetConeAngles</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_PITCH_DEFAULT"></a><a name="SCE_P3DA_PITCH_MIN"></a><a name="SCE_P3DA_PITCH_MAX"></a>
<a name="SCE_P3DA_PITCH_DEFAULT / SCE_P3DA_PITCH_MIN / SCE_P3DA_PITCH_MAX"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_PITCH_DEFAULT / SCE_P3DA_PITCH_MIN / SCE_P3DA_PITCH_MAX<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Acquired pitch value<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_PITCH_DEFAULT	(0x00010000)
#define SCE_P3DA_PITCH_MIN	(0x00000001)
#define SCE_P3DA_PITCH_MAX	(0x00040000)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are the default, minimum, and maximum values of the pitch that are obtained from <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPitchScaleFactor">sceP3daGetPitchScaleFactor</a>().<br>They are represented as 16-bit : 16-bit fixed-point numbers.<br>0x00010000 represents 1.0, 0x00040000 represents 4.0, and 0x00000001 represents 0.000015.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daGetPitchScaleFactor">sceP3daGetPitchScaleFactor</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_P3DA_MUTEAFTERMAX_ENABLE"></a><a name="SCE_P3DA_MUTEAFTERMAX_DISABLE"></a>
<a name="SCE_P3DA_MUTEAFTERMAX_ENABLE / SCE_P3DA_MUTEAFTERMAX_DISABLE"></a>
<table width="100%"><td width="70%"><font size=6>SCE_P3DA_MUTEAFTERMAX_ENABLE / SCE_P3DA_MUTEAFTERMAX_DISABLE<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Mute setting when separated by maximum distance or more<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;
#define SCE_P3DA_MUTEAFTERMAX_ENABLE	(SCE_TRUE)
#define SCE_P3DA_MUTEAFTERMAX_DISABLE	(SCE_FALSE)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants are used in <a href="../sound/libp3da-Reference-English.htm#sceP3daEnableMuteAfterMax">sceP3daEnableMuteAfterMax</a>() for setting the mute.<br>SCE_P3DA_MUTEAFTERMAX_ENABLE sets the mute, and SCE_P3DA_MUTEAFTERMAX_DISABLE cancels the mute.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#sceP3daSetRolloffDistances">sceP3daSetRolloffDistances</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daGetRolloffDistances">sceP3daGetRolloffDistances</a>()<br><a href="../sound/libp3da-Reference-English.htm#sceP3daEnableMuteAfterMax">sceP3daEnableMuteAfterMax</a>(), <a href="../sound/libp3da-Reference-English.htm#sceP3daIsEnabledMuteAfterMax">sceP3daIsEnabledMuteAfterMax</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daInit"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daInit<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Initialization<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daInit</b>(
	int <i>iNumInputs,</i>
	int <i>iAudioBlocksize</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iNumInputs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of sound sources to be handled   &nbsp;&nbsp;<br>&nbsp;&nbsp;1 to <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MAXCHANNELS">SCE_P3DA_MAXCHANNELS</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iAudioBlocksize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of samples to be processed in a single call of <a href="../sound/libp3da-Reference-English.htm#sceP3daCore">sceP3daCore</a>()&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function initializes the state of P3DA.<br>To use P3DA, this function must be called first.<br><br><i>iNumInputs</i> specifies the maximum number of input sound sources.<br><i>iAudioBlocksize</i> specifies the number of samples to be processed by <a href="../sound/libp3da-Reference-English.htm#sceP3daCore">sceP3daCore</a>().<br>This is also the number of samples that are output by <a href="../sound/libp3da-Reference-English.htm#sceP3daCore">sceP3daCore</a>().<br>Any value between the minimum value <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_BLOCK_SAMPLES_MIN">SCE_P3DA_BLOCK_SAMPLES_MIN</a> (=64) and the maximum value <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_BLOCK_SAMPLES_MAX">SCE_P3DA_BLOCK_SAMPLES_MAX</a> (=2048) in steps of <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_BLOCK_SAMPLES_STEP">SCE_P3DA_BLOCK_SAMPLES_STEP</a> (=32) can be specified for <i>iAudioBlocksize</i>.<br>If any other value is specified, an error occurs.<br>For details about how to pass input/output waveform data, refer to the "libp3da Overview."<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int main(void)
{
    int <i>result</i>;

    result = sceP3daInit(<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MAXCHANNELS">SCE_P3DA_MAXCHANNELS</a>,  1024);


    <a href="../sound/libp3da-Reference-English.htm#sceP3daExit">sceP3daExit</a>();
    return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daExit"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daExit<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Termination<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daExit</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs termination processing. It must be called when an application that was using P3DA ends.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int main(void)
{
	int <i>result</i>;
	
	result = sceP3daExit();
	
	return 0;
}

</font></pre></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daCore"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daCore<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>P3DA periodic processing<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daCore</b>( 
	const short *const *<i>ppsInputs</i>,
	short *<i>psOutput</i>
 );

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>ppsInputs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Array of pointers to waveform input buffers&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>psOutput</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to waveform output buffer&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function inputs a waveform and outputs a waveform for one unit of granularity. The number of samples in one unit of granularity is equal to the sample size that was specified with <a href="../sound/libp3da-Reference-English.htm#sceP3daInit">sceP3daInit</a>().<br>The input/output data itself must be 64-byte aligned.<br>The starting addresses of the input waveform data for every sound source must be stored in advance in <i>ppsInputs</i>[]. For <i>ppsInputs</i>[], allocate an array for the number of channels that was specified with <a href="../sound/libp3da-Reference-English.htm#sceP3daInit">sceP3daInit</a>(), and write NULL for sound sources that are not used.<br>Since this function is multithread safe, a sound control function such as <b><a href="../sound/libp3da-Reference-English.htm#sceP3daSetPosition">sceP3daSetPosition</a></b>(), can be safely called while this function is being executed. However, <b>sceP3daCore</b>() cannot be called simultaneously from multiple threads (<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_ILLEGALSTATE">SCE_P3DA_ERROR_ILLEGALSTATE</a> will be returned).<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#include&lt;libp3da.h&gt;

#define NINPUT 3   /* Process three sound sources */
#define STEREO 2

int main(void)
{
    int <i>i</i>;
    int <i>result</i>;
    short *apsInputPCM[<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MAXCHANNELS">SCE_P3DA_MAXCHANNELS</a>];
    static short aasInputPCM[<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MAXCHANNELS">SCE_P3DA_MAXCHANNELS</a>][<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_BLOCK_SAMPLES_DEFAULT">SCE_P3DA_BLOCK_SAMPLES_DEFAULT</a> * STEREO] __attribute__((aligned(64)));
    static short asOutputPCM[<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_BLOCK_SAMPLES_DEFAULT">SCE_P3DA_BLOCK_SAMPLES_DEFAULT</a> * STEREO] __attribute__((aligned(64)));

    /* Initialization*/
    <a href="../sound/libp3da-Reference-English.htm#sceP3daInit">sceP3daInit</a>(NINPUT, SAMPLES);
    for(i=0; i&lt;<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MAXCHANNELS">SCE_P3DA_MAXCHANNELS</a>; i++)  apsInputPCM[i]=NULL;
    
    /* apsInputPCM[] setup */
    for(i=0; i&lt;NINPUT; i++)  apsInputPCM[i]=aasInputPCM[i];

    for(;;){
        /* Set input waveforms in aasInputPCM[0,1,2][] */

        /* Perform waveform output processing for one unit of granularity */
        result = sceP3daCore(apsInputPCM, asOutputPCM);

        /* Output sound for asOutputPCM */
    }

    return 0;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daPlay"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daPlay<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Play sound source<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daPlay</b>( 
	int <i>iSsid</i>
 );

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">By calling this function for a sound source, 3D sound processing is performed by <a href="../sound/libp3da-Reference-English.htm#sceP3daCore">sceP3daCore</a>() for the corresponding sound source. No processing is performed by <a href="../sound/libp3da-Reference-English.htm#sceP3daCore">sceP3daCore</a>() for any sound source other than the one specified by this function, or for a sound source that was stopped with <a href="../sound/libp3da-Reference-English.htm#sceP3daStop">sceP3daStop</a>(). All sound sources are placed in a stopped state after initialization.<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daStop"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daStop<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Stop sound source playback<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daStop</b>( 
	int <i>iSsid</i>
 );

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function causes <a href="../sound/libp3da-Reference-English.htm#sceP3daCore">sceP3daCore</a>() to stop 3D sound processing for the specified sound source. All sound sources are placed in a stopped state after initialization.<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daReset"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daReset<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Initialize sound source settings<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daReset</b>( 
	int <i>iSsid</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function resets various settings for the specified sound source to the same state they were in immediately after the library was initialized.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetPosition"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetPosition<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set sound source position (absolute position in Cartesian coordinates)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetPosition</b>(
	int <i>iSsid,</i>
<i>	</i>const <a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> <i>*pPos</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pPos</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source coordinate position&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the coordinate position of the sound source specified by <i>iSsid</i>.<br>The position is expressed in absolute coordinates from the origin (0,0,0).<br>The initial value is the origin (0,0,0).<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetPositionRelative"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetPositionRelative<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set sound source position (relative position in Cartesian coordinates)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetPositionRelative</b>( 
	int<i> iSsid,</i>
<i>	</i>const SceP3daVecto<i>r *pPos</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pPos</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source coordinate position&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the coordinate position of the sound source specified by <i>iSsid</i>.<br>The position is expressed as being relative to the listener's position and orientation.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetPositionPolarRelative"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetPositionPolarRelative<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set sound source position (relative position in polar coordinates)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetPositionPolarRelative</b>( 
	int <i>iSsid</i>,
	const <a href="../sound/libp3da-Reference-English.htm#SceP3daPolar">SceP3daPolar</a> *<i>pPos</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pPos</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source coordinate position&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the position of the sound source specified by <i>iSsid</i> in polar coordinates.<br>The position is expressed as being relative to the listener's position and orientation.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetPosition"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetPosition<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get sound source position (absolute position in Cartesian coordinates)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetPosition</b>( 
	int <i>iSsid,</i>
	<a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pPos</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pPos</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where acquired coordinate position is stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the absolute position from the origin (0,0,0) in Cartesian coordinates of the sound source specified by <i>iSsid</i>.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetPositionRelative"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetPositionRelative<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get sound source position (relative position in Cartesian coordinates)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetPositionRelative</b>( 
	int <i>iSsid,</i>
<i>	</i><a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a><i> *pPos</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pPos</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where acquired coordinate position is stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the relative position from the listener in Cartesian coordinates of the sound source specified by <i>iSsid</i>.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetPositionPolarRelative"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetPositionPolarRelative<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get sound source position (relative position in polar coordinates)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetPositionPolarRelative</b>( 
	int <i>iSsid</i>,
	<a href="../sound/libp3da-Reference-English.htm#SceP3daPolar">SceP3daPolar</a> *<i>pPos</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pPos</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where acquired coordinate position is stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the relative position from the listener in polar coordinates of the sound source specified by <i>iSsid</i>.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daUserReset"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daUserReset<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Initialize listener settings<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daUserReset</b>( 
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function resets various settings for the listener to the same state they were in immediately after the library was initialized.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetUserPosition"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetUserPosition<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set listener position<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetUserPosition</b>(
	const <a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pPos</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pPos</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Listener position&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function set the position of the listener in absolute coordinates.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetUserOrientation"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetUserOrientation<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set listener orientation<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetUserOrientation</b>(
	const <a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pFront</i>,
	const <a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pUp</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pFront</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Listener's front direction vector    Units: Millimeters [mm]&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pUp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Listener's up direction vector    Units: Millimeters [mm]&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the listener's orientation according to the listener's front direction vector and up direction vector.<br>The two vectors are specified in the X-, Y-, and Z-axis directions with the listener's position as the reference point.<br>Specify the two vectors so they are orthogonal to each other.<br>If they are not orthogonal, the <i>pUp</i> angle will be changed so that it is orthogonal to <i>pFront</i>. However, if the two vectors are parallel to each other, the function will return an error.<br>An error will also be returned if a vector equal to (0,0,0) is specified.<br><br>The size after combining the <i>pFront</i> and <i>pUp</i> vectors must be greater than zero.<br>To ensure the precision of calculation, make sure this value is at least 128.<br><br>If NULL is passed to <i>pFront</i> or <i>pUp</i>, the setting for that parameter will be ignored. For example, if you want to specify only <i>pUp</i>, then set <i>pFront</i> = SCE_NULL.<br><br>The initial values are <i>pFront</i> =(0, 0, -1000) and <i>pUp</i> = (0, 1000, 0).<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetUserPosition"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetUserPosition<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get listener position<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetUserPosition</b>(
	<a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pPos</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pPos</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where acquired coordinate position is stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the listener's position in absolute coordinates.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetUserOrientation"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetUserOrientation<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get listener orientation<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetUserOrientation</b>(
	<a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pFront,</i>
	<a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pUp</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pFront</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where listener's front direction vector will be stored&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pUp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where listener's up direction vector will be stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the listener's orientation.<br>The front direction vector and up direction vector are obtained, with the listener's position as the origin.<br>These are the same values that were set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetUserOrientation">sceP3daSetUserOrientation</a>().<br>If NULL is passed to <i>pFront</i> or <i>pUp</i>, the respective parameter value will not be acquired.<br>For example, if you want to get only <i>pUp</i>, set<i>pFront</i> = SCE_NULL.<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetLevel"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetLevel<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set level of sound source<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetLevel</b>(
	int <i>iSsid</i>, 
	int <i>iLevel</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iLevel</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Volume level of sound source  Units: [mB]&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the volume level of a sound source.<br>The units are millibels [mB].<br>A millibel is 1/100 of a decibel and is denoted by [mB].<br><br>(*) For example,-6 [dB] (decibels) = -600 [mB] (millibels).<br>The volume level should be specified as a value that is less than or equal to zero.<br>The effect varies in the range 0 to -10000.<br>For a value less than or equal to -10000, the volume is muted.<br>The initial value is 0 [mB]. 0 [mB] is the value for unattenuated gain (=1.0).<br><a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_LEVEL_MIN">SCE_P3DA_LEVEL_MIN</a> has been defined as the value -10000.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetLevel"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetLevel<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get level<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetLevel</b>( 
	int <i>iSsid,</i>
	int *<i>piLevel</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe.<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>piLevel</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where acquired volume level will be stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the volume level of a sound source.<br>The value that was set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetLevel">sceP3daSetLevel</a>() is returned.<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetRolloffDistances"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetRolloffDistances<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set minimum and maximum distances for rolloff<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include&lt;libp3da.h&gt;

int <b>sceP3daSetRolloffDistances</b>(
	int <i>iSsid</i>,
	int <i>iMinDistance,</i>
	int <i>iMaxDistance</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iMinDistance</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Minimum distance from listener's position  Units: Millimeters [mm]&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iMaxDistance</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Maximum distance from listener's position  Units: Millimeters [mm]&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the minimum and maximum distances from the listener's position.<br>When the distance from the sound source is less than the minimum distance <i>iMinDistance</i>, the attenuation value of the volume for rolloff processing will be fixed at 1.0 (= maximum value).<br>Similarly, when the distance from the sound source is greater than the maximum distance <i>iMaxDistance</i>, the attenuation value of the volume for rolloff processing will be set to a fixed value.<br>If the <a href="../sound/libp3da-Reference-English.htm#sceP3daEnableMuteAfterMax">sceP3daEnableMuteAfterMax</a>() setting is enabled, the attenuation value gain will be fixed at 0.0 (mute), and if the <a href="../sound/libp3da-Reference-English.htm#sceP3daEnableMuteAfterMax">sceP3daEnableMuteAfterMax</a>() setting is disabled, the attenuation value gain will be fixed at the attenuation value for <i>iMaxDistance</i> even if the distance is greater than <i>pMaxDistance</i>.<br>If <i>iMinDistance</i> &gt; <i>iMaxDistance</i>, the function will return an error.<br><br>The initial values are as follows.<br><i>iMinDistance</i> = <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MIN_DISTANCE_DEFAULT">SCE_P3DA_MIN_DISTANCE_DEFAULT</a><br><i>iMaxDistance</i> = <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MAX_DISTANCE_DEFAULT">SCE_P3DA_MAX_DISTANCE_DEFAULT</a><br><br>The range of values for <i>iMinDistance</i> is <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MIN_DISTANCE_MIN">SCE_P3DA_MIN_DISTANCE_MIN</a> to <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MIN_DISTANCE_MAX">SCE_P3DA_MIN_DISTANCE_MAX</a>, and the range for <i>iMaxDistance</i> is <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MAX_DISTANCE_MIN">SCE_P3DA_MAX_DISTANCE_MIN</a> to <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MAX_DISTANCE_MAX">SCE_P3DA_MAX_DISTANCE_MAX</a>.<br>If values outside these ranges are specified, the function will return an error.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetRolloffFactor"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetRolloffFactor<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set rolloff factor<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetRolloffFactor</b>( 
	int <i>iSsid,</i>
	int <i>iFactor</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iFactor</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Rolloff factor&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the factor controlling the rolloff effect in which the volume that is perceived by the listener decreases as the distance between the sound source and listener increases. The rolloff factor is represented as a 16-bit : 16-bit fixed-point number, with 0x00010000 being treated as 1.0.<br>For details about the rolloff calculation formula, refer to the section concerning rolloff in the "libp3da Overview."<br>The initial value is <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ROLLOFFFACTOR_DEFAULT">SCE_P3DA_ROLLOFFFACTOR_DEFAULT</a>.<br>Values can range from <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ROLLOFFFACTOR_MIN">SCE_P3DA_ROLLOFFFACTOR_MIN</a> to <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ROLLOFFFACTOR_MAX">SCE_P3DA_ROLLOFFFACTOR_MAX</a> (0 to 0x000A0000).<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daEnableMuteAfterMax"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daEnableMuteAfterMax<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set mute at maximum distance<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daEnableMuteAfterMax</b>( 
	int <i>iSsid,</i>
	int <i>iMute</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iMute</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MUTEAFTERMAX_ENABLE">SCE_P3DA_MUTEAFTERMAX_ENABLE</a>: Enable muting&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MUTEAFTERMAX_DISABLE">SCE_P3DA_MUTEAFTERMAX_DISABLE</a>: Disable muting&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets either a mode (<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MUTEAFTERMAX_ENABLE">SCE_P3DA_MUTEAFTERMAX_ENABLE</a>) in which the volume is muted when the distance between the sound source and listener becomes greater than the maximum distance that was set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetRolloffDistances">sceP3daSetRolloffDistances</a>() during attenuation processing due to rolloff, or a mode (<a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MUTEAFTERMAX_DISABLE">SCE_P3DA_MUTEAFTERMAX_DISABLE</a>) in which the volume for the maximum distance is left unchanged without it being muted.<br>The initial value is <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MUTEAFTERMAX_ENABLE">SCE_P3DA_MUTEAFTERMAX_ENABLE</a>.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetRolloffDistances"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetRolloffDistances<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get minimum and maximum distances for rolloff<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetRolloffDistances</b>( 
	int <i>iSsid</i>,
	int *<i>pMinDistance</i>,
	int *<i>pMaxDistance</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pMinDistance</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where minimum distance is stored&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pMaxDistance</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where maximum distance is stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The minimum distance for rolloff processing is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the minimum and maximum distances for rolloff processing.<br>The values previously set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetRolloffDistances">sceP3daSetRolloffDistances</a>() are returned.<br>If NULL is passed to <i>pMinDistance</i> or <i>pMaxDistance</i>, the value of the respective parameter will not be obtained.<br>For example, if you want to get only *<i>pMaxDistance</i>, set <i>pMinDistance</i> = SCE_NULL.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetRolloffFactor"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetRolloffFactor<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get rolloff factor<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetRolloffFactor</b>( 
	int <i>iSsid</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The rolloff factor is returned.<br>The range of values is <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ROLLOFFFACTOR_MIN">SCE_P3DA_ROLLOFFFACTOR_MIN</a> to <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ROLLOFFFACTOR_MAX">SCE_P3DA_ROLLOFFFACTOR_MAX</a>.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the rolloff factor.<br>The value that was set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetRolloffFactor">sceP3daSetRolloffFactor</a>() is returned.<br>The rolloff factor is represented as a 16-bit : 16-bit fixed-point number.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daIsEnabledMuteAfterMax"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daIsEnabledMuteAfterMax<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get mute at maximum distance setting<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daIsEnabledMuteAfterMax</b>( 
	int <i>iSsid</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MUTEAFTERMAX_ENABLE">SCE_P3DA_MUTEAFTERMAX_ENABLE</a> or <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MUTEAFTERMAX_DISABLE">SCE_P3DA_MUTEAFTERMAX_DISABLE</a> is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the state indicating whether the volume will be muted or whether the volume for the maximum distance will be maintained in rolloff attenuation processing when the distance between the sound source and listener is greater than the maximum distance setting (set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetRolloffDistances">sceP3daSetRolloffDistances</a>()).<br>If the return value is <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MUTEAFTERMAX_DISABLE">SCE_P3DA_MUTEAFTERMAX_DISABLE</a>, it means that the volume for the maximum distance will be maintained, and if the return value is <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_MUTEAFTERMAX_ENABLE">SCE_P3DA_MUTEAFTERMAX_ENABLE</a>, it means that the volume will be muted.<br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetOrientation"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetOrientation<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set sound source direction<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetOrientation</b>( 
	int <i>iSsid,</i>
	const <a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pFront</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pFront</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to sound source front direction vector&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the orientation of the directivity of the sound cone (a directional sound source).<br>The direction that the sound source is facing is specified by a relative vector from the current position of the sound source.<br>The initial value is *<i>pFront</i>=(0,0,-1000).<br>If (0,0,0) is specified for the argument, an error will be returned.<br>At a minimum, the size of the composite vector must be greater than zero.<br>To ensure the precision of calculation, the vector size should be at least 128.<br>For details about the sound cone, refer to the "libp3da Overview."<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetConeAngles"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetConeAngles<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set sound cone angles<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetConeAngles</b>( 
	int <i>iSsid,</i>
	int <i>iInner</i>,
	int <i>iOuter</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iInner</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Inner sound cone angle   0 to 360 [degrees]&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iOuter</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Outer sound cone angle   0 to 360 [degrees]&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the inner and outer sound cone angles.<br>The initial values are <i>iInner</i> =<i> iOuter</i> = 360 [degrees].<br><a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_CONEANGLEINNER_MIN">SCE_P3DA_CONEANGLEINNER_MIN</a> and <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_CONEANGLEINNER_MAX">SCE_P3DA_CONEANGLEINNER_MAX</a> have been defined as the minimum and maximum values of <i>iInner</i>.<br><a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_CONEANGLEOUTER_MIN">SCE_P3DA_CONEANGLEOUTER_MIN</a> and <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_CONEANGLEOUTER_MAX">SCE_P3DA_CONEANGLEOUTER_MAX</a> have been defined as the minimum and maximum values of <i>iOuter</i>.<br><br>If values are specified such that <i>iInner</i> &gt; <i>iOuter</i>, the function will return an error.<br>Also, if a value outside of the specified ranges is assigned to a parameter, the function will return an error.<br>For details about the sound cone, refer to the document entitled "libp3da Overview."<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetConeOuterLevel"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetConeOuterLevel<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set sound cone outer gain<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetConeOuterLevel</b>( 
	int <i>iSsid,</i>
	int <i>iLevel</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iLevel</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Volume level outside of sound cone  Units: [mB]&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the volume level outside of the outer sound cone.<br>The value that is set must be negative or zero, and the units are millibels (1/100 of a decibel).<br>The initial value is 0 [mB] (millibels).<br>0 [mB] represents an unattenuated gain (=1.0).<br>A value less than or equal to -10000 [mB] (including -10000) will be muted (gain = 0.0).<br>Also, if 0 [mB] is set, the sound cone directivity will be omnidirectional.<br>Note that the lower bound of <i>iLevel</i> is not checked.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetOrientation"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetOrientation<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get sound source orientation<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetOrientation</b>( 
	int <i>iSsid,</i>
	<a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pFront</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pFront</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where acquired vector is stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the orientation of the directivity of the sound cone (a directional sound source).<br>For details about sound cones, refer to the "libp3da Overview."<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetConeAngles"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetConeAngles<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get sound cone angles<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetConeAngles</b>( 
	int <i>iSsid,</i>
	int *<i>pInner</i>,
	int *<i>pOuter</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pInner</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where acquired inner sound cone angle is stored&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pOuter</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where acquired outer sound cone angle is stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the angle of the inner sound cone and the angle of the outer sound cone.<br>If NULL is passed to <i>pInner</i> or <i>pOuter</i>, the value of the respective parameter is not obtained.<br>For example if you want to get only *<i>pOuter</i>, set <i>pInner</i> = SCE_NULL.<br>For details about sound cones, refer to the "libp3da Overview."<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetConeOuterLevel"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetConeOuterLevel<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get sound cone outer volume level<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetConeOuterLevel</b>( 
	int <i>iSsid,</i>
<i>	</i>int *<i>piLevel</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>piLevel</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where acquired level is stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the volume level outside of the outer sound cone.<br>The units are millibels (1/100 of a decibel).<br>The value previously set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetConeOuterLevel">sceP3daSetConeOuterLevel</a>() is returned.<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetVelocity"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetVelocity<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set velocity of sound source<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetVelocity</b>( 
	int <i>iSsid</i>,
	const <a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pVelocity</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pVelocity</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Velocity vector of sound source  Units: [mm/sec]&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the velocity vector of the sound source. The units are [mm/sec].<br>The initial value is (0,0,0).<br>The range of each element (X,Y,Z) is -268435455 to 0 to +268435455 (-0x0fffffff to 0 to +0x0fffffff).<br>This value is used for calculating pitch due to the Doppler effect and does not affect the sound source position.<br>The value that is set here is reflected in the value that is obtained with <a href="../sound/libp3da-Reference-English.htm#sceP3daGetDopplerFactor">sceP3daGetDopplerFactor</a>().<br>For details about settings related to the Doppler effect, refer to the "libp3da Overview."<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetDopplerFactor"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetDopplerFactor<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Doppler factor<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetDopplerFactor</b>( 
	int <i>iSsid</i>,
	int <i>iFactor</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iFactor</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Doppler factor&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the Doppler factor. The Doppler factor affects how the pitch changes due to the velocity vector that was set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetVelocity">sceP3daSetVelocity</a>(). <a href="../sound/libp3da-Reference-English.htm#sceP3daGetPitchScaleFactor">sceP3daGetPitchScaleFactor</a>() is used to obtain the product of the Doppler factor and the pitch value due to the velocity vector. Consequently, when the Doppler factor is zero, the pitch will be 1.0 (the fundamental pitch) regardless of what value was set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetVelocity">sceP3daSetVelocity</a>().<br><br>The Doppler factor is represented as a 16-bit : 16-bit fixed-point number. The initial value of the Doppler factor is 0x00010000 (=1.0). The range of values is 0 to 0x000A0000 (= 0.0 to 10.0).<br>For details about Doppler processing, refer to the "libp3da Overview."<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daSetUserVelocity"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daSetUserVelocity<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set velocity vector of listener<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daSetUserVelocity</b>( 
	const <a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pVelocity</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pVelocity</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Velocity vector of listener  Units: [mm/sec]&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the velocity vector of the listener. The units are [mm/sec].<br>This value is used for calculating the pitch due to the Doppler effect and does not affect the listener's position.<br>The initial value is (0,0,0).<br>The range of each element (X,Y,Z) is -268435455 to 0 to +268435455 (-0x0fffffff to 0 to +0x0fffffff).<br>For details about settings related to the Doppler effect, refer to the "libp3da Overview."<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetVelocity"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetVelocity<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get velocity of sound source<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetVelocity</b>( 
	int <i>iSsid</i>,
	<a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pVelocity</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pVelocity</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where acquired velocity vector is stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the velocity vector of the sound source. The units are [mm/sec].<br>The value that was previously set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetVelocity">sceP3daSetVelocity</a>() is returned.<br>For details about settings related to the Doppler effect, refer to the "libp3da Overview."<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetDopplerFactor"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetDopplerFactor<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get Doppler factor<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetDopplerFactor</b>( 
	int <i>iSsid</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The Doppler factor is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the Doppler factor.<br>The value that was previously set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetDopplerFactor">sceP3daSetDopplerFactor</a>() is returned.<br>The Doppler factor is represented as a 16-bit : 16-bit fixed-point number. <br>For details about Doppler processing, refer to the "libp3da Overview."<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetUserVelocity"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetUserVelocity<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get velocity vector of listener<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetUserVelocity</b>( 
	<a href="../sound/libp3da-Reference-English.htm#SceP3daVector">SceP3daVector</a> *<i>pVelocity</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pVelocity</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address in storage where acquired velocity vector is stored&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the function completes normally, <a href="../sound/libp3da-Reference-English.htm#SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a> is returned.<br>If the return value is negative (&lt; 0), an error is returned.<br>(For details, see the <a href="../sound/libp3da-Reference-English.htm#List of Error Codes">List of Error Codes</a>.)<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the velocity vector of the listener. The units are [mm/sec].<br>The value that was previously set with <a href="../sound/libp3da-Reference-English.htm#sceP3daSetUserVelocity">sceP3daSetUserVelocity</a>() is returned.<br>For details about settings related to the Doppler effect, refer to the "libp3da Overview."<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetPitchScaleFactor"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetPitchScaleFactor<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get pitch factor<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetPitchScaleFactor</b>( 
	int <i>iSsid</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The pitch factor is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the pitch factor as a result of Doppler processing.<br>The pitch factor for the sound source, which is calculated according to the velocity vectors of the sound source and listener and the Doppler factor, is represented as a 16-bit : 16-bit fixed-point number.<br>The values correspond to the following across a range of -16 to +2 octaves.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Return Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Pitch Factor</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Octaves</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x00040000 (Max Value)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;* 4.0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;+2.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x00020000&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;* 2.0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;+1.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x00010000&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;* 1.0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(0.0   (Original Pitch)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x00008000&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;* 0.5&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;-1.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x00004000&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;* 0.25&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;-2.0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x00000001 (Min Value)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;* 0.000015&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;-16&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">With libp3da, the pitch variation due to Doppler processing is not reflected in the output waveform data.<br>The user must perform processing for changing the pitch based on the pitch factor obtained by this function.<br>When the velocity towards the listener from the sound source exceeds the speed of sound, 0x00000001 is returned.<br>For details about Doppler processing, refer to the "libp3da Overview."<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceP3daGetState"></a>
<table width="100%"><td width="70%"><font size=6>sceP3daGetState<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get sound source state<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libp3da.h&gt;

int <b>sceP3daGetState</b>( 
	int <i>iSsid</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSsid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sound source number&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The sound source state is returned.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>State Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Meaning</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_P3DA_STATE_UNDEFINED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Uninitialized&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_P3DA_STATE_PLAYING&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Playing&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_P3DA_STATE_STOPPED&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Stopped&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the sound source state.<br>If this function is called before the initialization function is called, or after the termination function has been called, SCE_P3DA_STATE_UNDEFINED is returned.<br>When the playback state is set active with <a href="../sound/libp3da-Reference-English.htm#sceP3daPlay">sceP3daPlay</a>(), SCE_P3DA_STATE_PLAYING is returned, and when playback was stopped with <a href="../sound/libp3da-Reference-English.htm#sceP3daStop">sceP3daStop</a>(), SCE_P3DA_STATE_STOPPED is returned.<br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="List of Error Codes"></a>
<table width="100%"><td width="70%"><font size=6>List of Error Codes<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Error Codes]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Error codes returned by libp3da<br></div><br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_P3DA_ERROR_NONE">SCE_P3DA_ERROR_NONE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x00000000&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Success (=SCE_OK)&nbsp;&nbsp;<br>&nbsp;&nbsp;(*) This is the return value when processing completes normally.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_P3DA_ERROR_GENERIC">SCE_P3DA_ERROR_GENERIC</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80470000&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Generic error&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_P3DA_ERROR_INSUFFICIENT">SCE_P3DA_ERROR_INSUFFICIENT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80470001&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Insufficient resources&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_P3DA_ERROR_ILLEGALSTATE">SCE_P3DA_ERROR_ILLEGALSTATE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80470002&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Illegal state&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_P3DA_ERROR_ILLEGALARGUMENT">SCE_P3DA_ERROR_ILLEGALARGUMENT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80470003&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Illegal argument value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_P3DA_ERROR_FEATUREUNAVAILABLE">SCE_P3DA_ERROR_FEATUREUNAVAILABLE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80470004&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Corresponding function not found&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<p><p><hr>
<div ALIGN="right">
    &copy;2007 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
