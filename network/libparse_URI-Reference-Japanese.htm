<html lang="jp">
<head>
<title>libparse_URI-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=Shift_JIS>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&reg; Programmer Tool Runtime Library Release 6.6.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
libparse_uri
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceUriElement"></a>
<table width="100%"><td width="70%"><font size=6>SceUriElement<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>URIの各要素を格納する構造体<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;

#typedef struct SceUriElement{
	<a href="../kernel/Types-Reference-Japanese.htm#SceBool">SceBool</a> <i>opaque</i>;
	<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>scheme</i>;
	<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>username</i>;
	<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>password</i>;
	<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>hostname</i>;
	<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>path</i>;
	<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>query</i>;
	<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>fragment</i>;
	<a href="../kernel/Types-Reference-Japanese.htm#SceUShort16">SceUShort16</a> <i>port</i>;
	<a href="../kernel/Types-Reference-Japanese.htm#SceUChar8">SceUChar8</a> <i>reserved</i>[10];
} <b>SceUriElement</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>opaque</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;scheme文字列の後に"//"が存在しない場合はSCE_TRUE、&nbsp;&nbsp;<br>&nbsp;&nbsp;存在する場合はSCE_FALSEの値をとります。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>scheme</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URIスキーム名&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>username</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URIユーザ名&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>password</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URIパスワード&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>hostname</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URIホスト名&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>path</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URIパス名&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>query</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URIクエリー&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fragment</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URIフラグメント&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>port</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URIポート番号&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>reserved</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;将来の拡張のための領域&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../network/libparse_URI-Reference-Japanese.htm#sceUriParse">sceUriParse</a>()では解析済みのURIの要素を格納するために使用し、<a href="../network/libparse_URI-Reference-Japanese.htm#sceUriBuild">sceUriBuild</a>()では当構造体に設定した値でURIを作成します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../network/libparse_URI-Reference-Japanese.htm#sceUriParse">sceUriParse</a>(), <a href="../network/libparse_URI-Reference-Japanese.htm#sceUriBuild">sceUriBuild</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriEscape"></a>
<table width="100%"><td width="70%"><font size=6>sceUriEscape<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>URIエスケープ処理<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriEscape</b> (
	<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>out</i>,
	SceSize *<i>require</i>,
	SceSize <i>prepare</i>,
	const <a href="../kernel/Types-Reference-Japanese.htm#SceUChar8">SceUChar8</a> *<i>in</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止/許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>out</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;出力バイト列へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>require</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;出力バイト列のサイズを格納するメモリへのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>prepare</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;出力バイト列に用意したメモリのサイズ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>in</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;入力文字列へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>マクロ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>意味</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;正常終了&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433022&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_OUT_OF_MEMORY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;出力に必要なバイト数が<i>prepare</i>で&nbsp;&nbsp;<br>&nbsp;&nbsp;指定された値を超えた&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x804331FE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_VALUE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>out</i>と<i>require</i>の両方ともにNULLが&nbsp;&nbsp;<br>&nbsp;&nbsp;セットされた&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>in</i>で指定された文字列をURIエスケープ処理をして、<i>out</i>で指定されたメモリ領域へ出力し、出力バイト数をrequireに格納します。出力バイト数が<i>prepare</i>で指定された値を超えるときは処理は中止されエラーが返ります。<i>out</i>にNULLを指定することで、出力に必要なメモリ領域の大きさが<i>require</i>にセットされ取得できます。<br><br></div>

<!-- 使用例 -->
<div style="margin-left:10px;"><b>使用例</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret;
SceSize malloc_size, out_size;
<a href="../kernel/Types-Reference-Japanese.htm#SceUChar8">SceUChar8</a> *data = "target string";
<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *out=NULL;
ret = sceUriEscape(NULL, &amp;malloc_size, 0, data);
if (ret &lt; 0){
	printf("sceUriEscape() returns %x.\n", ret);
	ERR_STOP;
}
out = (unsigned char *)malloc(malloc_size);
if (out == NULL){
	printf("can't allocate memory\n");
	ERR_STOP;
}
ret = sceUriEscape(out, &amp;out_size, malloc_size, data);

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriUnescape"></a>
<table width="100%"><td width="70%"><font size=6>sceUriUnescape<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>URIアンエスケープ処理<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriUnescape</b> (
	<a href="../kernel/Types-Reference-Japanese.htm#SceUChar8">SceUChar8</a> *<i>out</i>,
	SceSize *<i>require</i>,
	SceSize <i>prepare</i>,
	const <a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>in</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止/許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>out</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;出力バイト列へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>require</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;出力バイト列のサイズを格納するメモリへのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>prepare</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;出力バイト列に用意したメモリのサイズ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>in</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;入力文字列へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>マクロ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>意味</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;正常終了&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433022&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_OUT_OF_MEMORY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;出力に必要なバイト数が<i>prepare</i>で&nbsp;&nbsp;<br>&nbsp;&nbsp;指定された値を超えた&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x804331FE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_VALUE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>out</i>と<i>require</i>の両方ともにNULLが&nbsp;&nbsp;<br>&nbsp;&nbsp;セットされた&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>in</i>で指定された文字列をURIアンエスケープ処理をして、<i>out</i>で指定されたメモリ領域へ出力し、出力バイト数をrequireに格納します。出力バイト数が<i>prepare</i>で指定された値を超えるときは処理は中止されエラーが返ります。<i>out</i>にNULLを指定することで、出力に必要なメモリ領域の大きさが<i>require</i>にセットされ取得できます。<br><br></div>

<!-- 使用例 -->
<div style="margin-left:10px;"><b>使用例</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int  ret;
SceSize malloc_size, out_size;
<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a>*data = "escaped string";
<a href="../kernel/Types-Reference-Japanese.htm#SceUChar8">SceUChar8</a> *out=NULL;
ret = sceUriUnescape(NULL, data, &amp;malloc_size, 0);
if(ret &lt; 0){
	printf("sceUriUnescape() returns %x.\n", ret);
	ERR_STOP;
}
out = (unsigned char *)malloc(malloc_size);
if (out == NULL){
	printf("can't allocate memory\n");
	ERR_STOP;
}
ret = sceUriUnescape(out, data, &amp;out_size, malloc_size);

</font></pre></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriParse"></a>
<table width="100%"><td width="70%"><font size=6>sceUriParse<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>URI文字列のパース<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriParse</b> (
	<a href="../network/libparse_URI-Reference-Japanese.htm#SceUriElement">SceUriElement</a> *<i>out</i>,
	const <a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>src_uri</i>,
	void *<i>pool</i>,
	SceSize *<i>require</i>,
	SceSize <i>prepare</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止/許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>out</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;解析後のURIの各要素を格納するための構造体へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>src_uri</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ASCIZ文字列で格納された解析する対象のURIへのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pool</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;解析後の文字列の格納に使用するメモリバッファへのポインタ。&nbsp;&nbsp;<br>&nbsp;&nbsp;格納された文字列の先頭アドレスは<i>out</i>の各メンバに設定される。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>require</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;解析に必要なメモリバッファのサイズを格納するメモリへのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>prepare</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>pool</i>に用意したメモリのサイズ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>マクロ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>意味</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;正常終了&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433022&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_OUT_OF_MEMORY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;出力に必要なバイト数が<i>prepare</i>で&nbsp;&nbsp;<br>&nbsp;&nbsp;指定された値を超えた&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x804331FE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_VALUE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>out</i>と<i>require</i>の両方ともにNULL&nbsp;&nbsp;<br>&nbsp;&nbsp;がセットされた&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433060&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_URI&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>src_uri</i>に設定されたURIの&nbsp;&nbsp;<br>&nbsp;&nbsp;フォーマットが不正&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>src_uri</i>で指定された文字列を解析してスキーム/ホスト名/ポート番号/ファイルパス/クエリー等に分解し、poolに指定されたメモリを使用し各要素をASCIZ文字列として格納、それぞれの要素の文字列のポインタを<i>out</i>に設定された構造体に格納します。使用したメモリのバイト数は<i>require</i>に格納されます。使用するバイト数が<i>prepare</i>で指定された値を超えるときは処理は中止されエラーが返ります。<br><i>out</i>または<i>pool</i>にNULLを指定して当関数を呼び出すことで、実際に文字列がメモリにコピーされることなく、解析に必要となるメモリのバイト数のみを<i>require</i>に取得することができます。<br><br></div>

<!-- 使用例 -->
<div style="margin-left:10px;"><b>使用例</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret;
void *pool;
SceSize malloc_size, use_size;
<a href="../network/libparse_URI-Reference-Japanese.htm#SceUriElement">SceUriElement</a>	element;

ret = sceUriParse(NULL, uri, NULL, &amp;malloc_size, 0);
if (ret &lt; 0){
	printf("sceUriParse() returns %x.\n", ret);
	ERR_STOP;
}
pool = malloc(malloc_size);
if (pool == NULL){
	printf("can't allocate memory\n");
	ERR_STOP;
}
ret = sceUriParse(&amp;element, uri, pool, &amp;use_size, malloc_size);
if (ret &lt; 0){
	printf("sceUriParse() returns %x.\n", ret);
	ERR_STOP;
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriBuild"></a>
<table width="100%"><td width="70%"><font size=6>sceUriBuild<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>URI文字列の作成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriBuild</b> (
	<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>out</i>,
	SceSize *<i>require</i>,
	SceSize <i>prepare</i>,
	const <a href="../network/libparse_URI-Reference-Japanese.htm#SceUriElement">SceUriElement</a> *<i>src_element</i>,
	<a href="../kernel/Types-Reference-Japanese.htm#SceUInt32">SceUInt32</a> <i>option</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止/許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>out</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;ASCIZ文字列として作成されたURIを&nbsp;<br>&nbsp;格納するためメモリへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>require</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;URIの文字列を格納するために必要なメモリサイズを&nbsp;<br>&nbsp;格納するためのメモリへのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>prepare</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<i>out</i>に用意したメモリのサイズ&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>src_element</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;作成するURIの各要素の文字列が設定された構造体へのポインタ&nbsp;</td>
</tr>
<tr>
<td rowspan= 10  valign="top">&nbsp;<i>option</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;使用するURIの要素を指定します&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_URI_BUILD_WITH_ALL&nbsp;</td>
<td valign="top">&nbsp;全ての要素を使用します&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_URI_BUILD_WITH_SCHEME&nbsp;</td>
<td valign="top">&nbsp;スキームを使用します&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_URI_BUILD_WITH_HOSTNAME&nbsp;</td>
<td valign="top">&nbsp;ホスト名を使用します&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_URI_BUILD_WITH_PORT&nbsp;</td>
<td valign="top">&nbsp;ポート番号を使用します&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_URI_BUILD_WITH_PATH&nbsp;</td>
<td valign="top">&nbsp;パスを使用します&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_URI_BUILD_WITH_USERNAME&nbsp;</td>
<td valign="top">&nbsp;ユーザ名を使用します&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_URI_BUILD_WITH_PASSWORD&nbsp;</td>
<td valign="top">&nbsp;パスワードを使用します&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_URI_BUILD_WITH_QUERY&nbsp;</td>
<td valign="top">&nbsp;クエリーを使用します&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_URI_BUILD_WITH_FRAGMENT&nbsp;</td>
<td valign="top">&nbsp;フラグメントを使用します&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>マクロ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>意味</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;正常終了&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433022&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_OUT_OF_MEMORY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;出力に必要なバイト数が<i>prepare</i>で&nbsp;&nbsp;<br>&nbsp;&nbsp;指定された値を超えた&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x804331FE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_VALUE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>out</i>と<i>require</i>の両方ともに&nbsp;&nbsp;<br>&nbsp;&nbsp;NULLがセットされた&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433060&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_URI&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>src_uri</i>に設定されたURIの&nbsp;&nbsp;<br>&nbsp;&nbsp;フォーマットが不正&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>src_element</i>で指定されたURIの各要素を使用しスキーム/ホスト名/ポート番号/ファイルパス/クエリー等を組み立てURI文字列を作成し、<i>out</i>に指定されたメモリにASCIZ文字列として格納します。使用したメモリのバイト数は<i>require</i>に格納されます。使用するバイト数が<i>prepare</i>で指定された値を超えるときは処理は中止されエラーが返ります。<br><i>out</i>にNULLを指定して当関数を呼び出すことで、実際に文字列がメモリにコピーされることなく、URIの出力に必要となるメモリのバイト数のみを<i>require</i>に取得することができます。<br><br></div>

<!-- 使用例 -->
<div style="margin-left:10px;"><b>使用例</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret;
<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *rebuild_uri;
SceSize	malloc_size, use_size;
<a href="../network/libparse_URI-Reference-Japanese.htm#SceUriElement">SceUriElement</a>	element;

memset(element, 0, sizeof(element));
element.scheme = "http";
element.hostname = "foo.com";

ret = sceUriBuild(NULL, &amp;element, &amp;malloc_size, 0, SCE_URI_BUILD_WITH_ALL);
if (ret &lt; 0){
	printf("sceUriBuild() returns %x.\n", ret);
	ERR_STOP;
}
rebuild_uri = (<a href="../kernel/Types-Reference-Japanese.htm#SceUChar8">SceUChar8</a>*)malloc(malloc_size);
if (rebuild_uri == NULL){
	printf("can't allocate memory\n");
	ERR_STOP;
}
ret = sceUriBuild(rebuild_uri, &amp;element, &amp;use_size, malloc_size, 
	SCE_URI_BUILD_WITH_ALL);
if (ret &lt; 0){
	printf("<a href="../network/libparse_URI-Reference-Japanese.htm#sceUriParse">sceUriParse</a>() returns %x.\n", ret);
	ERR_STOP;
}
printf("rebuild URI = %s\n", rebuild_uri);
</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriSweepPath"></a>
<table width="100%"><td width="70%"><font size=6>sceUriSweepPath<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>PATH文字列の"../", "./"の解決<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriSweepPath</b> (
	<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>dst</i>,
	const <a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>src</i>,
	SceSize <i>src_size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止/許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>dst</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;"../", "./"の解決されたPATH文字列を格納するためメモリへのポインタ。&nbsp;&nbsp;<br>&nbsp;&nbsp;src_sizeで指定したサイズのメモリを確保しておく必要がある。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>src</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;解決するPATH文字列を格納したメモリへのポインタ。&nbsp;&nbsp;<br>&nbsp;&nbsp;PATH文字列はNULLターミネートされている必要はない。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>src_size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>src</i>に指定したPATHのサイズを指定する。<i>src</i>がNULLターミネート&nbsp;&nbsp;<br>&nbsp;&nbsp;されていない場合も、NULLターミネートされているものとして、文字&nbsp;&nbsp;<br>&nbsp;&nbsp;の長さ＋1を指定すること。この値に0が指定されていた場合は何も実行&nbsp;&nbsp;<br>&nbsp;&nbsp;せずに関数はreturnする。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>マクロ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>意味</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;正常終了&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80410005&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_NET_INSUFFICIENT_STACKSIZE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;残りスタックサイズが&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_PARSE_URI_LEAST_STACK_SIZE以下&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>src</i>と<i>src_sizeで</i>指定されたPATHが"../", "./"が含まれていた場合、それらを解決して<i>dst</i>にASCIZ文字列として格納します。ただしPATHが'/'から始まる必要があります。条件に合致しない場合は<i>src</i>をそのままコピーしNULLターミネートしたものを<i>dst</i>に格納します。<br><br></div>

<!-- 使用例 -->
<div style="margin-left:10px;"><b>使用例</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-Japanese.htm#SceInt32">SceInt32</a> ret;
const <a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *src = "/foo/bar/../foo/././../../../test/index.html";
<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *dst;
SceSize	src_size;

src_size = strlen(src) + 1;
dst = malloc(src_size);
ret = sceUriSweepPath(dst, src, src_size);
if (ret &lt; 0){
	printf("sceUriSweepPath () returns %x.\n", ret);
	goto error;
}
printf("original path = %s sweeped path = %s\n",src, dst);
free(dst);

</font></pre></div>

<!-- 備考 -->
<div style="margin-left:10px;"><b>備考</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../network/libparse_URI-Reference-Japanese.htm#sceUriParse">sceUriParse</a>()でパース後のPATHには自動的に当関数の処理が行われています。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriMerge"></a>
<table width="100%"><td width="70%"><font size=6>sceUriMerge<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>URL文字列のマージ<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriMerge</b> (
	<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>merged_url</i>,
	const <a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>url</i>,
	const <a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *<i>relative_uri</i>,
	SceSize *<i>require</i>,
	SceSize <i>prepare</i>,
	<a href="../kernel/Types-Reference-Japanese.htm#SceUInt32">SceUInt32</a> <i>option</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止/許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>merged_url</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>url</i>と<i>relative_uri</i>をマージしたURL文字列を格納するための&nbsp;&nbsp;<br>&nbsp;&nbsp;メモリへのポインタ。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>url</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;マージするベースとなるURL文字列。NULLターミネートされている&nbsp;&nbsp;<br>&nbsp;&nbsp;必要があります。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>relative_uri</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;マージする相対URI文字列。NULLターミネートされている必要があります。&nbsp;&nbsp;<br>&nbsp;&nbsp;この値に絶対URLが指定された場合は、ベースの<i>url</i>は無視され<i>merged_url</i>&nbsp;&nbsp;<br>&nbsp;&nbsp;には<i>relative_uri</i>で指定された文字列が格納されます。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>require</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>merged_url</i>に用意するべきメモリサイズが格納されます。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>prepare</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>merged_url</i>に用意したメモリサイズを格納します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>option</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;将来の拡張のための引数です。0を指定してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>マクロ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>意味</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;正常終了&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80410005&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_NET_INSUFFICIENT_STACKSIZE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;残りスタックサイズが&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_PARSE_URI_LEAST_STACK_SIZE以下&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433022&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_OUT_OF_MEMORY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;必要なバイト数が<i>prepare</i>で&nbsp;&nbsp;<br>&nbsp;&nbsp;指定された値を超えた&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x804331FE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_VALUE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>url</i>か<i>relative_uri</i>にNULLがセット&nbsp;&nbsp;<br>&nbsp;&nbsp;された、または<i>option</i>に0以外の値が&nbsp;&nbsp;<br>&nbsp;&nbsp;セットされた&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>url</i>と<i>relative_uri</i>で指定されたURLをマージして<i>merged_url</i>にASCIZ文字列として格納します。使用したメモリのバイト数は<i>require</i>に格納されます。使用するバイト数が<i>prepare</i>で指定された値を超えるときは処理は中止されエラーが返ります。<br><i>merged_url</i>にNULLを指定して当関数を呼び出すことで、実際に文字列がメモリにコピーされることなく、必要となるメモリのバイト数のみを<i>require</i>に取得することができます。<br><i>relative_uri</i>に絶対URLが指定された場合は、<i>url</i>に指定された文字列に関わらず、<i>merged_url</i>には<i>relative_uri</i>がそのままコピーされます。<br><br></div>

<!-- 使用例 -->
<div style="margin-left:10px;"><b>使用例</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-Japanese.htm#SceInt32">SceInt32</a> ret;
const <a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *url = "http://foo.com/foo/index.html";
const <a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *relative_uri = "./default.html";
<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a> *merged_url;
SceSize	malloc_size;

ret = sceUriMerge (NULL, url, relative_uri, &amp;malloc_size, 0, 0);
if (ret &lt; 0){
	printf("sceUriMerge () returns %x.\n", ret);
	goto error;
}
merged_url = (<a href="../kernel/Types-Reference-Japanese.htm#SceChar8">SceChar8</a>*)malloc(malloc_size);
ret = sceUriMerge (merged_url, url, relative_uri, NULL, malloc_size, 0);
if (ret &lt; 0){
	printf("sceUriMerge () returns %x.\n", ret);
	free(merged_url);
	goto error;
}

printf("merged_url= %s \n",merged_url);
free(merged_url);

</font></pre></div>

<!-- 備考 -->
<div style="margin-left:10px;"><b>備考</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">パース作業に必要なメモリは<i>merged_url</i>に指定されたメモリバッファが使用されます。<i>merged_url</i>に設定されるURL文字列よりも必要なメモリサイズが大きくなるため、用途に応じてアプリケーションで取得後の文字列の長さに適したメモリのサイズにreallocなどの処理を加えてください。<br>また現在のバージョンでは当関数内部で<a href="../network/libparse_URI-Reference-Japanese.htm#sceUriSweepPath">sceUriSweepPath</a>()に相当する処理を行っておりません。<br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
