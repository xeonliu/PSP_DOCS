<html lang="en">
<head>
<title>libparse_URI-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
libparse_uri Reference
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceUriElement"></a>
<table width="100%"><td width="70%"><font size=6>SceUriElement<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Structure storing URI elements<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;

#typedef struct SceUriElement{
	<a href="../kernel/Types-Reference-English.htm#SceBool">SceBool</a> <i>opaque</i>;
	<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>scheme</i>;
	<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>username</i>;
	<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>password</i>;
	<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>hostname</i>;
	<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>path</i>;
	<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>query</i>;
	<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>fragment</i>;
	<a href="../kernel/Types-Reference-English.htm#SceUShort16">SceUShort16</a> <i>port</i>;
	<a href="../kernel/Types-Reference-English.htm#SceUChar8">SceUChar8</a> <i>reserved</i>[10];
} <b>SceUriElement</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>opaque</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Has the value SCE_TRUE if &quot;//&quot; appears after the scheme string, or SCE_FALSE if it does not appear.  &nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>scheme</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URI scheme name&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>username</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URI username&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>password</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URI password&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>hostname</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URI hostname&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>path</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URI pathname&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>query</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URI query&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fragment</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URI fragment&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>port</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;URI port number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>reserved</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Area for future expansion&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">In <a href="../network/libparse_URI-Reference-English.htm#sceUriParse">sceUriParse</a>(), this structure is used to store URI elements after parsing is completed, and in <a href="../network/libparse_URI-Reference-English.htm#sceUriBuild">sceUriBuild</a>(), URIs are created using the values specified in this structure.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../network/libparse_URI-Reference-English.htm#sceUriParse">sceUriParse</a>(), <a href="../network/libparse_URI-Reference-English.htm#sceUriBuild">sceUriBuild</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriEscape"></a>
<table width="100%"><td width="70%"><font size=6>sceUriEscape<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>URI escape processing<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriEscape</b> (
	<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>out</i>,
	SceSize *<i>require</i>,
	SceSize <i>prepare</i>,
	const <a href="../kernel/Types-Reference-English.htm#SceUChar8">SceUChar8</a> *<i>in</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>out</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to output byte stream&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>require</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to memory in which to store the size of the output byte stream&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>prepare</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size of the memory provided for the output byte stream&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>in</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to the input string&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;Value&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;Macro&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;Meaning&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Successful completion&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433022&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_OUT_OF_MEMORY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The number of bytes necessary for&nbsp;&nbsp;<br>&nbsp;&nbsp;output exceeded the value specified&nbsp;&nbsp;<br>&nbsp;&nbsp;by <i>prepare</i>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x804331FE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_VALUE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Both <i>out</i> and <i>require</i> were set to&nbsp;&nbsp;<br>&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs URI escape processing on the string specified by <i>in</i>, outputs to the memory area specified by <i>out</i>, and stores the number of output bytes in <i>require</i>. If the number of output bytes exceeds the value specified by <i>prepare</i>, processing is terminated and an error is returned. If <i>out</i> is set to NULL, the size of the memory area required for output will be stored in <i>require</i> and can be retrieved.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret;
SceSize malloc_size, out_size;
<a href="../kernel/Types-Reference-English.htm#SceUChar8">SceUChar8</a> *data = "target string";
<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *out=NULL;
ret = sceUriEscape(NULL, &amp;malloc_size, 0, data);
if (ret &lt; 0){
	printf("sceUriEscape() returns %x.\n", ret);
	ERR_STOP;
}
out = (unsigned char *)malloc(malloc_size);
if (out == NULL){
	printf("can't allocate memory\n");
	ERR_STOP;
}
ret = sceUriEscape(out, &amp;out_size, malloc_size, data);

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriUnescape"></a>
<table width="100%"><td width="70%"><font size=6>sceUriUnescape<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>URI unescape processing<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriUnescape</b> (
	<a href="../kernel/Types-Reference-English.htm#SceUChar8">SceUChar8</a> *<i>out</i>,
	SceSize *<i>require</i>,
	SceSize <i>prepare</i>,
	const <a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>in</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>out</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to output byte stream&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>require</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to memory in which to store the size of the output byte stream&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>prepare</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size of the memory provided for the output byte stream&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>in</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to the input string&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;Value&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;Macro&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;Meaning&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Successful completion&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433022&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_OUT_OF_MEMORY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The number of bytes necessary for&nbsp;&nbsp;<br>&nbsp;&nbsp;output exceeded the value specified&nbsp;&nbsp;<br>&nbsp;&nbsp;by <i>prepare</i>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x804331FE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_VALUE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Both <i>out</i> and <i>require</i> were set to&nbsp;&nbsp;<br>&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs URI unescape processing on the string specified by <i>in</i>, outputs to the memory area specified by <i>out</i>, and stores the number of output bytes in <i>require</i>. If the number of output bytes exceeds the value specified by <i>prepare</i>, processing is terminated and an error is returned. If <i>out</i> is set to NULL, the size of the memory area required for output will be stored in <i>require</i> and can be retrieved.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int  ret;
SceSize malloc_size, out_size;
<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a>*data = "escaped string";
<a href="../kernel/Types-Reference-English.htm#SceUChar8">SceUChar8</a> *out=NULL;
ret = sceUriUnescape(NULL, data, &amp;malloc_size, 0);
if(ret &lt; 0){
	printf("sceUriUnescape() returns %x.\n", ret);
	ERR_STOP;
}
out = (unsigned char *)malloc(malloc_size);
if (out == NULL){
	printf("can't allocate memory\n");
	ERR_STOP;
}
ret = sceUriUnescape(out, data, &amp;out_size, malloc_size);

</font></pre></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriParse"></a>
<table width="100%"><td width="70%"><font size=6>sceUriParse<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Parse a URI string<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriParse</b> (
	<a href="../network/libparse_URI-Reference-English.htm#SceUriElement">SceUriElement</a> *<i>out</i>,
	const <a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>src_uri</i>,
	void *<i>pool</i>,
	SceSize *<i>require</i>,
	SceSize <i>prepare</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>out</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to structure in which to the URI elements after parsing&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>src_uri</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to the URI to parse, which is stored as an ASCIZ string&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pool</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to memory buffer used to store the strings which result from parsing. &nbsp;&nbsp;<br>&nbsp;&nbsp;The starting addresses of the stored strings are specified by the respective members of <i>out</i>.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>require</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to memory in which to store the size of the memory buffer required for parsing&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>prepare</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size of the memory provided in <i>pool</i>&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Meaning</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Successful completion&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433022&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_OUT_OF_MEMORY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The number of bytes necessary for&nbsp;&nbsp;<br>&nbsp;&nbsp;output exceeded the value specified&nbsp;&nbsp;<br>&nbsp;&nbsp;by <i>prepare</i>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x804331FE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_VALUE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Both <i>out</i> and <i>require</i> were set to&nbsp;&nbsp;<br>&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433060&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_URI&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The format of the URI specified by&nbsp;&nbsp;<br>&nbsp;&nbsp;<i>src_uri</i> is invalid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function decomposes the string specified by <i>src_uri</i> into scheme, host name, port number, filename, query, etc., stores these elements using the memory specified by <i>pool</i>, and stores pointers to these respective element strings in the structure specified by <i>out</i>. The number of bytes of memory which were used is stored in <i>require</i>. If the number of bytes used exceeds the value specified by <i>prepare</i>, processing is terminated and an error is returned. <br>By calling this function with <i>out</i> or <i>pool</i> set to NULL, just the number of bytes of memory necessary for parsing can be retrieved into <i>require</i> without the strings actually being copied into memory.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret;
void *pool;
SceSize malloc_size, use_size;
<a href="../network/libparse_URI-Reference-English.htm#SceUriElement">SceUriElement</a>	element;

ret = sceUriParse(NULL, uri, NULL, &amp;malloc_size, 0);
if (ret &lt; 0){
	printf("sceUriParse() returns %x.\n", ret);
	ERR_STOP;
}
pool = malloc(malloc_size);
if (pool == NULL){
	printf("can't allocate memory\n");
	ERR_STOP;
}
ret = sceUriParse(&amp;element, uri, pool, &amp;use_size, malloc_size);
if (ret &lt; 0){
	printf("sceUriParse() returns %x.\n", ret);
	ERR_STOP;
}
</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriBuild"></a>
<table width="100%"><td width="70%"><font size=6>sceUriBuild<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Create a URI string<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriBuild</b> (
	<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>out</i>,
	SceSize *<i>require</i>,
	SceSize <i>prepare</i>,
	const <a href="../network/libparse_URI-Reference-English.htm#SceUriElement">SceUriElement</a> *<i>src_element</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>option</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>out</i>&nbsp;</td>
<td valign="top">&nbsp;Pointer&nbsp;to&nbsp;memory&nbsp;in&nbsp;which&nbsp;to&nbsp;store&nbsp;the&nbsp;URI&nbsp;which&nbsp;is&nbsp;created&nbsp;as&nbsp;an&nbsp;ASCIZ&nbsp;string&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>require</i>&nbsp;</td>
<td valign="top">&nbsp;Pointer&nbsp;to&nbsp;memory&nbsp;in&nbsp;which&nbsp;to&nbsp;store&nbsp;the&nbsp;size&nbsp;of&nbsp;the&nbsp;memory&nbsp;necessary&nbsp;to&nbsp;store&nbsp;the&nbsp;URI&nbsp;strings&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>prepare</i>&nbsp;</td>
<td valign="top">&nbsp;Size&nbsp;of&nbsp;the&nbsp;memory&nbsp;provided&nbsp;in&nbsp;<i>out</i>&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>src_element</i>&nbsp;</td>
<td valign="top">&nbsp;Pointer&nbsp;to&nbsp;the&nbsp;structure&nbsp;which&nbsp;stores&nbsp;the&nbsp;strings&nbsp;representing&nbsp;the&nbsp;respective&nbsp;elements&nbsp;of&nbsp;the&nbsp;created&nbsp;URI&nbsp;</td>
</tr>
<tr>
<td rowspan= 2  valign="top">&nbsp;<i>option</i>&nbsp;</td>
<td valign="top">&nbsp;Specifies&nbsp;the&nbsp;elements&nbsp;of&nbsp;the&nbsp;URI&nbsp;to&nbsp;be&nbsp;used&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_URI_BUILD_WITH_ALL		Use&nbsp;all&nbsp;elements&nbsp;<br>&nbsp;SCE_URI_BUILD_WITH_SCHEME		Use&nbsp;scheme&nbsp;<br>&nbsp;SCE_URI_BUILD_WITH_HOSTNAME	Use&nbsp;host&nbsp;name&nbsp;<br>&nbsp;SCE_URI_BUILD_WITH_PORT		Use&nbsp;port&nbsp;number&nbsp;<br>&nbsp;SCE_URI_BUILD_WITH_PATH		Use&nbsp;path&nbsp;<br>&nbsp;SCE_URI_BUILD_WITH_USERNAME	Use&nbsp;username&nbsp;<br>&nbsp;SCE_URI_BUILD_WITH_PASSWORD	Use&nbsp;password&nbsp;<br>&nbsp;SCE_URI_BUILD_WITH_QUERY		Use&nbsp;query&nbsp;<br>&nbsp;SCE_URI_BUILD_WITH_FRAGMENT	Use&nbsp;fragment&nbsp;</td>
</tr></table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Meaning</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Successful completion&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433022&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_OUT_OF_MEMORY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The number of bytes necessary for&nbsp;&nbsp;<br>&nbsp;&nbsp;output exceeded the value specified&nbsp;&nbsp;<br>&nbsp;&nbsp;by <i>prepare</i>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x804331FE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_VALUE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Both <i>out</i> and <i>require</i> were set to&nbsp;&nbsp;<br>&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433060&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_URI&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The format of the URI specified by&nbsp;&nbsp;<br>&nbsp;&nbsp;<i>src_uri</i> is invalid&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function creates a URI string by assembling a scheme, host name, port number, filepath, query, etc. using the URI elements specified by <i>src_element</i>, and stores it as an ASCIZ string in the memory specified by <i>out</i>. The number of bytes of memory which were used is stored in <i>require</i>. If the number of bytes used exceeds the value specified by <i>prepare</i>, processing is terminated and an error is returned. <br>By calling this function with <i>out</i> set to NULL, just the number of bytes of memory necessary for outputting the URI can be retrieved into <i>require</i> without the strings actually being copied into memory.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret;
<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *rebuild_uri;
SceSize	malloc_size, use_size;
<a href="../network/libparse_URI-Reference-English.htm#SceUriElement">SceUriElement</a>	element;

memset(element, 0, sizeof(element));
element.scheme = "http";
element.hostname = "foo.com";

ret = sceUriBuild(NULL, &amp;element, &amp;malloc_size, 0, SCE_URI_BUILD_WITH_ALL);
if (ret &lt; 0){
	printf("sceUriBuild() returns %x.\n", ret);
	ERR_STOP;
}
rebuild_uri = (<a href="../kernel/Types-Reference-English.htm#SceUChar8">SceUChar8</a>*)malloc(malloc_size);
if (rebuild_uri == NULL){
	printf("can't allocate memory\n");
	ERR_STOP;
}
ret = sceUriBuild(rebuild_uri, &amp;element, &amp;use_size, malloc_size, 
	SCE_URI_BUILD_WITH_ALL);
if (ret &lt; 0){
	printf("<a href="../network/libparse_URI-Reference-English.htm#sceUriParse">sceUriParse</a>() returns %x.\n", ret);
	ERR_STOP;
}
printf("rebuild URI = %s\n", rebuild_uri);

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriSweepPath"></a>
<table width="100%"><td width="70%"><font size=6>sceUriSweepPath<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Parse path string based on "../" and "./"<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriSweepPath</b> ( 
	<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>dst</i>,
	const <a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>src</i>,
	SceSize<i> src_size</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>dst</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to memory location storing path string parsed based on  "../" and "./".&nbsp;&nbsp;<br>&nbsp;&nbsp;You must allocate memory based on the size specified by <i>src_size</i>.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>src</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to memory containing path string to parse. The path string does not require a null terminator.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>src_size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size of the path specified in src. Even when src has no null terminator, it is treated as if one is present, so <i>src_size</i> should be specified as string length + 1. If this value is set to 0, the function will return without executing at all.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Normal completion&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80410005&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_NET_INSUFFICIENT_STACKSIZE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Remaining stack size is less than SCE_PARSE_URI_LEAST_STACK_SIZE&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the path given by <i>src </i>and <i>src_size </i>contains "./" or "../", it is parsed and stored as an ASCIZ string in <i>dst</i>. The path must begin with '/'. If the path does not meet these conditions, the <i>src</i> string is copied as is to <i>dst</i>, and is null terminated. <br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> ret;
const <a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *src = "/foo/bar/../foo/././../../../test/index.html";
<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *dst;
SceSize	src_size;

src_size = strlen(src) + 1;
dst = malloc(src_size);
ret = sceUriSweepPath(dst, src, src_size);
if (ret &lt; 0){
	printf("sceUriSweepPath () returns %x.\n", ret);
	goto error;
}
printf("original path = %s sweeped path = %s\n",src, dst);
free(dst);

</font></pre></div>

<!-- Notes -->
<div style="margin-left:10px;"><b>Notes</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The processing performed by this function is automatically done for paths that are parsed using <a href="../network/libparse_URI-Reference-English.htm#sceUriParse">sceUriParse</a>().<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUriMerge"></a>
<table width="100%"><td width="70%"><font size=6>sceUriMerge<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Merge URL strings<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;libparse_uri.h&gt;
int <b>sceUriMerge</b> (
	<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>merged_url</i>,
	const <a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>url</i>,
	const <a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *<i>relative_uri</i>,
	SceSize *<i>require</i>,
	SceSize <i>prepare</i>,
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>option</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>merged_url</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to memory location for storing URL string which merges <i>url</i> and <i>relative_uri</i>.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>url</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Base URL string to merge. Must be null-terminated.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>relative_uri</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Relative URI string to merge. Must be null-terminated. If this value specifies an absolute URL, the base URL is ignored, and the string specified by <i>relative_uri </i>is stored in <i>merged_url</i>.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>require</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The size of memory that needs to be provided for <i>merged_url </i>is stored here.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>prepare</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Specify the size of memory that was provided for <i>merged_url </i>here.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>option</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Reserved for future extensions to these arguments. Should be set to 0.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_OK&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Normal completion&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80410005&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_NET_INSUFFICIENT_STACKSIZE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Remaining stack size is less than SCE_PARSE_URI_LEAST_STACK_SIZE&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x80433022&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_OUT_OF_MEMORY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of bytes required exceeded value specified in <i>prepare</i>.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x804331FE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_URI_INVALID_VALUE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Either <i>url </i>or <i>relative_uri</i> was set to NULL, or <i>option </i>was<i> </i>set to a non-zero value.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function merges the URLs specified by <i>url </i>and <i>relative_uri </i>into an ASCIZ string and stores the result in <i>merged_url</i>. The number of bytes used for <i>merged_url</i>. is stored in <i>require</i>. If the number of bytes needed exceeds the value specified in <i>prepare</i>, the function terminates and an error is returned.<br>By calling this function with <i>merged_url </i>set to null, you can obtain the number of bytes needed in <i>require</i> without copying the actual string to memory.<br>If <i>relative_uri </i>specifies an absolute URL, then the string specified by <i>url </i>is ignored, and <i>relative_uri</i>. is copied as is to <i>merged_url</i>.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> ret;
const <a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *url = &quot;http://foo.com/foo/index.html&quot;;
const <a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *relative_uri = &quot;./default.html&quot;;
<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a> *merged_url;
SceSize	malloc_size;

ret = sceUriMerge (NULL, url, relative_uri, &amp;malloc_size, 0, 0);
if (ret &lt; 0){
	printf("sceUriMerge () returns %x.\n", ret);
	goto error;
}
merged_url = (<a href="../kernel/Types-Reference-English.htm#SceChar8">SceChar8</a>*)malloc(malloc_size);
ret = sceUriMerge (merged_url, url, relative_uri, NULL, malloc_size, 0);
if (ret &lt; 0){
	printf("sceUriMerge () returns %x.\n", ret);
	free(merged_url);
	goto error;
}

printf("merged_url= %s \n",merged_url);
free(merged_url);

</font></pre></div>

<!-- Notes -->
<div style="margin-left:10px;"><b>Notes</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The parsing operation uses the memory it needs from the memory buffer specified in <i>merged_url</i>.<br>Since this is more memory than required by the URL string specified in <i>merged_url</i>, the application should perform a realloc or equivalent for the memory size after obtaining the appropriate length of the string.<br>In the current version, this function does not perform an operation equivalent to <a href="../network/libparse_URI-Reference-English.htm#sceUriSweepPath">sceUriSweepPath</a>() internally.<br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
