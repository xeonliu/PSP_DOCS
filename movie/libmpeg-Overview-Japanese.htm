<html lang="jp">
<head>
<title>libmpeg-Overview</title>
<meta http-equiv="Content-Type" content= text/html; charset=Shift_JIS>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&reg; Programmer Tool Runtime Library Release 6.6.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
libmpeg
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd3 -->
<a name="Heading3_1">
<h2>
 1 <!-- hp --><b>libmpegの概要</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_1_1">
<h3>
<a href="#Heading3_1"> 1. </a>1 
<!-- hp1 --><b>機能</b><br>
</a>
</h3>
<div style="margin-left:50px;">libmpegは、PSP&reg; Movie Format(for game)（以下PSMFと略記）のストリームデータを多重分離（demultiplex）するとともに、得られるビデオストリームおよびオーディオストリームのデコードを行うライブラリです。<br><br></div>

<div align=center>
<p>
<img src="gif/libmpeg-Overview-Japanese001.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>図 1  libmpegの機能とデータフロー</b><br>
</div>
<br>
<div style="margin-left:50px;"><br>PSMFはMPEG2プログラムストリームをベースとして、複数のビデオ、オーディオおよびユーザデータのストリームデータを1本に多重化（multiplex）したものです。ビデオストリームとしてはMPEG4 AVC（以下AVCと略記）、オーディオストリームとしてはATRAC3plus&trade;, PCMを採用しています。ユーザデータはユーザーが用意した任意のデータ形式を用いることが可能です。<br>libmpegを使用すると、多重化されたPSMFストリームから特定のIDを持つビデオ、オーディオおよびユーザデータのストリームを取り出すことが可能です。<br>また、取り出したビデオ、オーディオストリームのデータについては、1アクセスユニットずつデコードすることができます。PSP&reg;はAVCおよびATRAC3plus&trade;のデコード専用ハードウェアを搭載していますので、デコードを高速で行うことができます。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_2">
<h3>
<a href="#Heading3_1"> 1. </a>2 
<!-- hp1 --><b>構成</b><br>
</a>
</h3>
<div style="margin-left:50px;">libmpegの構成を以下に示します。<br></div>

<div align=center>
<p>
<img src="gif/libmpeg-Overview-Japanese002.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>図 2  libmpegの構成</b><br>
</div>
<br>

<!-- sce_hd4 -->
<a name="Heading4_1_3">
<h3>
<a href="#Heading3_1"> 1. </a>3 
<!-- hp1 --><b>関連ファイル</b><br>
</a>
</h3>
<div style="margin-left:50px;">libmpegを利用する際に必要なファイルは、次のとおりです。<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>カテゴリ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>ファイル名</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;ヘッダファイル&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libmpeg.h&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;スタブライブラリファイル&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;mpeg_stub.a&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;weakインポートスタブライブラリファイル&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;mpeg_stub_weak.a&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">また、libmpegモジュールおよびその下請けとなる処理を行うモジュールをロードするために、utility機能を用いる必要があります。詳しくは「ユーティリティサービス」概要ドキュメントをご覧ください。<br>このほか、PSMFデータを作成するツールとして、UMD&reg; Stream Composer(for Game Movie)（以下 Stream Composerと略記）とPSMF Composerの2つのアプリケーションを提供しています。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_4">
<h3>
<a href="#Heading3_1"> 1. </a>4 
<!-- hp1 --><b>関連ドキュメント</b><br>
</a>
</h3>
<div style="margin-left:40px;"><ul>
<li> 動画データの作成と再生処理の概要<br>PSMFデータを作成するための素材データおよび作成方法の概要と、libmpegを用いてPSMFデータを再生する方法の概要を解説したドキュメントです。
<li> UMD&reg; Stream Composer(for Game Movie) User's manual<br>PSMFデータを作成するツールの使用方法を解説したドキュメントです。
<li> PSMF Composer User's manual<br>PSMFデータを作成するツールの使用方法を解説したドキュメントです。
<li> ユーティリティサービス概要ドキュメント「モジュールユーティリティ」章<br>libmpegモジュール他をロードするのに用いるutility機能に関するドキュメントです。
</ul></div>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd3 -->
<a name="Heading3_2">
<h2>
 2 <!-- hp --><b>使用手順</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_2_1">
<h3>
<a href="#Heading3_2"> 2. </a>1 
<!-- hp1 --><b>動画再生処理の流れ</b><br>
</a>
</h3>
<div style="margin-left:50px;">次の図は、図 <b>1</b>に示したデータフローを具体的な関数名 / 構造体名に置き換えて示したものです。<br><br></div>

<div align=center>
<p>
<img src="gif/libmpeg-Overview-Japanese003.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>図 3  具体的なデータフロー</b><br>
</div>
<br>
<div style="margin-left:50px;">これらの関数 / 構造体を用いて動画再生を行う処理全体の流れは次のようになります。<br></div>

<div align=center>
<p>
<img src="gif/libmpeg-Overview-Japanese004.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>図 4  動画再生処理の流れ</b><br>
</div>
<br>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_1_1"><h4>
(1)&nbsp;<b>初期化</b><br></h4>
</a></div>
<div style="margin-left:67px;">まず<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegInit">sceMpegInit</a>()を呼び出します。その後PSMFストリームを管理する<a href="../movie/libmpeg-Reference-Japanese.htm#SceMpegRingbuffer">SceMpegRingbuffer</a>構造体を初期化するために<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferConstruct">sceMpegRingbufferConstruct</a>()を呼び出します。この際に<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferPut">sceMpegRingbufferPut</a>()から呼び出されるRingbufferへの読み込みを行うコールバック関数を設定します。<br>さらにlibmpeg全体の管理を行う<a href="../movie/libmpeg-Reference-Japanese.htm#SceMpeg">SceMpeg</a>構造体を<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegCreate">sceMpegCreate</a>()で初期化します。<br>続いて、PSMFストリーム中のユーザプログラムで使用するAVCとATRAC3plus&trade;, PCMおよびユーザデータのストリームIDを<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRegistStream">sceMpegRegistStream</a>()で設定します。<br>さらに続いて、多重分離後のエレメンタリストリームを保存するためのデコードバッファを確保します。ビデオストリームについては<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegMallocAvcEsBuf">sceMpegMallocAvcEsBuf</a>()でバッファを取得してください。オーディオストリームについては、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegQueryAtracEsSize">sceMpegQueryAtracEsSize</a>() / <a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegQueryPcmEsSize">sceMpegQueryPcmEsSize</a>()で必要なバッファサイズ（<i>iEsSize</i>）を取得し、それだけのメモリを確保してください。またユーザデータストリームについても<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegQueryUserdataEsSize">sceMpegQueryUserdataEsSize</a>()で必要なバッファサイズ（<i>iEsSize</i>）を確保してください。その後バッファを<a href="../movie/libmpeg-Reference-Japanese.htm#SceMpegAu">SceMpegAu</a>構造体の<i>pEsBuf</i>メンバに設定して<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegInitAu">sceMpegInitAu</a>()を呼び出し多重分離後のストリームデータを管理するための<a href="../movie/libmpeg-Reference-Japanese.htm#SceMpegAu">SceMpegAu</a>構造体を初期化します。<br>その後PSMFファイルのヘッダ部分を読み飛ばしてPSMFストリームの先頭を探します。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_1_2"><h4>
(2)&nbsp;<b>リングバッファへのデータ読み込み</b><br></h4>
</a></div>
<div style="margin-left:67px;"><a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferPut">sceMpegRingbufferPut</a>()を使い、<a href="../movie/libmpeg-Reference-Japanese.htm#SceMpegRingbuffer">SceMpegRingbuffer</a>構造体で管理しているリングバッファへPSMFデータを書き込みます。libmpegはこのリングバッファに読み込まれたデータに対して多重分離処理を行います。PSMFストリームではMPEG2プログラムストリームの1Packを2048byteとして扱っているので、一度に書き込むデータサイズは必ず2048byteの倍数になります。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_1_3"><h4>
(3)&nbsp;<b>エレメンタリストリームの取り出し（多重分離処理）</b><br></h4>
</a></div>
<div style="margin-left:67px;">リングバッファ中のPSMFデータから、1アクセスユニット分のストリームを取り出すには、ストリームの種類ごとに別の関数を用いる必要があります。具体的にはビデオストリームは<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegGetAvcAu">sceMpegGetAvcAu</a>()、オーディオストリームは<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegGetAtracAu">sceMpegGetAtracAu</a>()または<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegGetPcmAu">sceMpegGetPcmAu</a>()、ユーザデータストリームは<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegGetUserdataAu">sceMpegGetUserdataAu</a>()を用います。これらの関数を呼び出した際、タイムスタンプ（PTS, DTS）が取得できる場合はこれらの情報も取得されます。<br>リングバッファ中にあるPSMFデータが1アクセスユニット分に満たないときに上記多重分離関数を呼び出すと、<a href="../movie/libmpeg-Reference-Japanese.htm#SCE_MPEG_ERROR_NOT_COMPLETED">SCE_MPEG_ERROR_NOT_COMPLETED</a>が返り値として返されます。この場合、手順(2)に戻って<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferPut">sceMpegRingbufferPut</a>()でリングバッファにPSMFデータを読み込み、もう一度上記関数を呼び出すことで、前回取り出した続きのエレメンタリストリームを取り出すことができます。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_1_4"><h4>
(4)&nbsp;<b>ビデオ / オーディオ / ユーザデータのデコード</b><br></h4>
</a></div>
<div style="margin-left:67px;">ビデオストリームのデコードは<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecode">sceMpegAvcDecode</a>()で行います。デコード結果はRGBA(32bit)形式で左上から右下の方向にラスタスキャンした画像となります。デコード結果をYCbCr形式で取得する関数もありますがここでは説明を省略します。<br>ATRAC3plus&trade;形式のオーディオストリームをデコードするには<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAtracDecode">sceMpegAtracDecode</a>()を使います。デコード結果は、44.1kHz / 16ビットPCMデータで1chあたり2048サンプルとなります。チャンネル数は1chまたは2chを選択できます。PCMの場合は<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegGetPcmAu">sceMpegGetPcmAu</a>()により得られたデータがそのままPCMデータが得られ80サンプル分のPCMデータとなっています。<br>ユーザデータについては、必要に応じてユーザーが用意した方式でデコードを行ってください。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_1_5"><h4>
(5)&nbsp;<b>ビデオ / オーディオ / ユーザデータのデータ出力</b><br></h4>
</a></div>
<div style="margin-left:67px;">デコード後のビデオ / オーディオデータ / ユーザデータをLCDやオーディオデバイスに出力する処理は、libmpegではサポートしていませんので適宜行ってください。<br>出力後は手順(3)に戻り、エレメンタリストリームの続きを取り出し、デコードし、出力する処理を繰り返します。<br><a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferPut">sceMpegRingbufferPut</a>()で読み込むPSMFストリームがなく、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegGetAvcAu">sceMpegGetAvcAu</a>()などの多重分離関数のどれを使ってもアクセスユニットが取り出せなくなった時点で(6)終了へ進みます。<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_1_6"><h4>
(6)&nbsp;<b>終了</b><br></h4>
</a></div>
<div style="margin-left:67px;">ビデオストリームの最後のフレームの参照画像がAVCデコーダに残っていることがありますので、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecodeStop">sceMpegAvcDecodeStop</a>()を呼び出して残っているデータを読み出します。<br>次に、多重分離後のエレメンタリストリームを保存するために確保したデコードバッファを解放します。ビデオストリーム用のデコードバッファは<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegFreeAvcEsBuf">sceMpegFreeAvcEsBuf</a>()で解放します。オーディオストリームおよびユーザデータストリームのデコードバッファは、確保した方法に合わせて適切な方法で解放してください。<br>続いて、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegUnRegistStream">sceMpegUnRegistStream</a>()でストリームIDごとの情報を破棄します。さらに<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegDelete">sceMpegDelete</a>()で<a href="../movie/libmpeg-Reference-Japanese.htm#SceMpeg">SceMpeg</a>構造体を破棄し、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferDestruct">sceMpegRingbufferDestruct</a>()でリングバッファの内容を破棄してから、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegFinish">sceMpegFinish</a>()を呼び出して終了してください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_2">
<h3>
<a href="#Heading3_2"> 2. </a>2 
<!-- hp1 --><b>ストリームタイプとストリームIDの関係について</b><br>
</a>
</h3>
<div style="margin-left:50px;">各ストリームタイプに対応するストリームIDは次のような8ビットデータです。<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>要素</b>&nbsp;&nbsp;<br>&nbsp;&nbsp;<b>ストリーム</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>ストリームタイプ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>ストリーム</b>&nbsp;&nbsp;<br>&nbsp;&nbsp;<b>ID</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>プライベート</b>&nbsp;&nbsp;<br>&nbsp;&nbsp;<b>ストリームID</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>ストリーム</b>&nbsp;&nbsp;<br>&nbsp;&nbsp;<b>チャンネル</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;MPEG4 AVC&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_MPEG_STREAM_M4AVC&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;'1110 xxxxb'&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;なし&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0-15&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;ATRAC3plus&trade;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_MPEG_STREAM_ATRAC&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;'1011 1101b'&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;'0000 xxxxb'&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0-15&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;PCM&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_MPEG_STREAM_PCM&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;'1011 1101b'&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;'0001 xxxxb'&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0-15&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;USER DATA&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_MPEG_STREAM_DATA&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;'1011 1101b'&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;'0010 xxxxb'&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0-15&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">上記のようにビデオデータとしてはAVCのデータが16本、オーディオデータとしてはATRAC3plus&trade;, PCMのデータがそれぞれ16本ずつ32本(*)、ユーザデータが16本を組み合わせて使用することができます。<br>(*)ただし、PCMの場合は多重化分離が扱える理論値であり、実際には多重化レートの関係でこの本数分作ることは無理です。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_3">
<h3>
<a href="#Heading3_2"> 2. </a>3 
<!-- hp1 --><b>バッファの確保について</b><br>
</a>
</h3>
<div style="margin-left:50px;">libmpegを使用する際には、以下に示すバッファを確保する必要があります。<br></div>
</ul>
<div style="margin-left:65px;"><ol type="a">
<li VALUE=1> PSMF入力用のリングバッファ</li>
<li VALUE=2> 多重分離後のエレメンタリストリームを保存するデコードバッファ</li>
<li VALUE=3> デコード結果を保存するバッファ</li>
</ol></div>
<div style="margin-left:50px;">リングバッファが必要とするメモリサイズは、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferQueryMemSize">sceMpegRingbufferQueryMemSize</a>()で取得することができます。PSMFストリームデータが十分入るだけのPack数、またはStreamComposerで設定した多重化レート×STD Delayのサイズが十分格納できるPack数を<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferQueryMemSize">sceMpegRingbufferQueryMemSize</a>()に与えて、返されたサイズのメモリを確保してください。StreamComposerでの標準設定値に対するメモリサイズは、多重化レート(10Mbps)×STD Delay(1sec)=約1.19Mbyteより611Packとなります。ただし、これは多重分離が理想的に動いた時の必要最小限度の値であり、ビデオ、オーディオおよびユーザデータの同期をとりながら再生するようなプログラムの場合、後段のAVC/ATRAC3plus&trade;/ユーザデータのデコーダなどのバッファリング構成によって変化します。このような再生を行う場合は、960Pack程度以上確保することを推奨します（サンプルプログラムもそのように設定しています）。なお、ストリームによっても最小必要Pack数は変化します。どうしてもメモリ使用量を減らす必要があって推奨値よりも小さくする場合は、最終的に使用されるストリームでの確認が必要になります。<br>ビデオストリーム用のデコードバッファは<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegMallocAvcEsBuf">sceMpegMallocAvcEsBuf</a>()を使用してメモリを確保してください。RGBA形式でデコードする場合、デコード結果を保存するバッファは、<i>iFrameWidth</i>×垂直方向のピクセル数×4(RGBA)byte以上必要です。また必ず16byteアラインメントで確保してください。<br>オーディオストリーム用のデコードバッファは、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegQueryAtracEsSize">sceMpegQueryAtracEsSize</a>() / <a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegQueryPcmEsSize">sceMpegQueryPcmEsSize</a>()の<i>iEsSize</i>で取得したサイズを64byteアラインメントで確保してください。またデコード結果を保存するバッファは、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegQueryAtracEsSize">sceMpegQueryAtracEsSize</a>() / <a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegQueryPcmEsSize">sceMpegQueryPcmEsSize</a>()の<i>iOutSize</i>で取得したサイズを64byteアラインメントで確保してください。ユーザデータストリーム用の多重分離用のバッファは<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegQueryUserdataEsSize">sceMpegQueryUserdataEsSize</a>()の<i>iEsSize</i>で取得したサイズか、ユーザーがあらかじめデータの最大値がわかっている場合にはそのサイズ分を64byteアラインメントで確保してください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_4">
<h3>
<a href="#Heading3_2"> 2. </a>4 
<!-- hp1 --><b>動画再生時でのリングバッファメモリ量の削減について</b><br>
</a>
</h3>
<div style="margin-left:50px;">動画再生時に使用するメモリ量ですが、PSMFストリームをバッファリングしておくリングバッファのサイズは、標準設定では多重化レート(10Mbps)×STD Delay(1sec)=約1.19MBのデータ量が最低限入るサイズとして611Packとしていますが、これはStreamComposerの多重化レートとSTD Delayの時間設定を変更してPSMFファイルを作ることで、必要サイズを小さくすることができます。<br>StreamComposerで設定できる最小値としては、多重化レート(2.5Mbps)×STD Delay(0.5sec)の設定まで小さくすることが可能です。ただし、StreamComposerのレートコントロールのマージンもなくなるため、リングバッファの設定値としては理論値に1Pack分(2048byte)を追加した約155KB分としてください。この場合、Pack数では78Packが最小となりますので、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferQueryMemSize">sceMpegRingbufferQueryMemSize</a>()に設定して返されるメモリサイズを確保してください。<br>もちろん、ファイルサイズが78Packに満たない場合には、ファイルサイズが十分に入るリングバッファ量を用意していただければ問題ありません。<br>なお、多重化レートを最大2.5Mbpsとしていますので、この値を超えるような高いビットレートのPSMFファイルを作る場合には問題となりますが、デフォルトのビットレート（AVC 平均1Mbps, ATRAC3plus&trade; 128kbps）で、ビデオ、オーディオ1本ずつ程度のストリームでは問題のない多重化レートとなります。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_5">
<h3>
<a href="#Heading3_2"> 2. </a>5 
<!-- hp1 --><b>リングバッファへのデータ書き込み処理について</b><br>
</a>
</h3>
<div style="margin-left:50px;">PSMF入力用リングバッファへのデータ書き込みは、必ず<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferPut">sceMpegRingbufferPut</a>()を使って行います。<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferPut">sceMpegRingbufferPut</a>()を呼び出すと、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferConstruct">sceMpegRingbufferConstruct</a>()の<i>callback</i>引数で指定したコールバック関数が呼び出されます。このコールバック関数で、PSMFファイルをPack（＝2048byte）単位で読み込み、読み込めたPack数を返り値で返すようにしてください。<br>また、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferPut">sceMpegRingbufferPut</a>()を呼び出す前には、必ず<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferAvailableSize">sceMpegRingbufferAvailableSize</a>()を使用してリングバッファの空きサイズを確認し、空きサイズ分だけのデータを<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferPut">sceMpegRingbufferPut</a>()によってリングバッファへ書き込むようにしてください。言うまでもなく、書き込むデータは前回書き込んだPSMFストリームに継続している必要があります。<br>また、コールバック関数内での読み込みで、sceIoRead()などで読む場合には問題ないですがmemcpy()などでデータキャッシュを経由する場合には、必ず<a href="../kernel/Cache-Reference-Japanese.htm#sceKernelDcacheWritebackInvalidateRange">sceKernelDcacheWritebackInvalidateRange</a>()などでデータキャッシュからメインメモリに書き出してください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_6">
<h3>
<a href="#Heading3_2"> 2. </a>6 
<!-- hp1 --><b>デコード結果の画像データ</b><br>
</a>
</h3>
<div style="margin-left:50px;"><a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecode">sceMpegAvcDecode</a>()および<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecodeStop">sceMpegAvcDecodeStop</a>()でデコードした結果の画像データは、RGBA(32bit)形式で左上から右下の方向にラスタスキャンした画像となります。&alpha;値は常に0となります。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_7">
<h3>
<a href="#Heading3_2"> 2. </a>7 
<!-- hp1 --><b>ビデオストリームのデコードに関する注意</b><br>
</a>
</h3>
<div style="margin-left:50px;">ビデオエレメンタリストリームを最後のアクセスユニットまでデコードした後、参照フレームがAVCデコーダ内部に残っている場合があります。必ず<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecodeStop">sceMpegAvcDecodeStop</a>()を呼び出して、参照フレーム分の画像が出力されるかどうかを確認してください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_8">
<h3>
<a href="#Heading3_2"> 2. </a>8 
<!-- hp1 --><b>ビデオストリームのYCbCrでのデコードに関する注意について</b><br>
</a>
</h3>
<div style="margin-left:50px;"><a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecodeYCbCr">sceMpegAvcDecodeYCbCr</a>() / <a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecodeStopYCbCr">sceMpegAvcDecodeStopYCbCr</a>()は<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecode">sceMpegAvcDecode</a>() / <a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecodeStop">sceMpegAvcDecodeStop</a>()のYCbCr出力版のAPIです。出力形式がRGBAからYCbCrに変わった以外は同じ動作を行います。<br>これらの関数を用いる場合、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcQueryYCbCrSize">sceMpegAvcQueryYCbCrSize</a>()が返すYCbCr出力バッファサイズ分のメモリを16byteアラインメントで確保し、そのバッファを<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcInitYCbCr">sceMpegAvcInitYCbCr</a>()で初期化する必要があります。<br>YCbCrで出力したフレームデータは<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcCsc">sceMpegAvcCsc</a>()によってYCbCrからRGBAに色変換（以下CSCと略記）を行うことで、RGBA(32bit)形式で左上から右下の方向にラスタスキャンした画像となります。&alpha;値は常に0となります。<br><a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcCsc">sceMpegAvcCsc</a>()では、CSCを行う範囲を指定できます。ただし、水平方向には必ず16で割り切れる値を指定する必要があります。また垂直方向のピクセル数がAVCデコーダ出力のピクセル数と異なる場合、CSC速度が低下しますのでご注意ください。<br>CSC結果を保存するバッファは、<i>iFrameWidth</i>×垂直方向のピクセル数×4(RGBA)byte以上必要です。必ず16byteアラインメントで確保してください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_9">
<h3>
<a href="#Heading3_2"> 2. </a>9 
<!-- hp1 --><b>ビデオストリームのYCbCrに対しての操作について</b><br>
</a>
</h3>
<div style="margin-left:50px;"><a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecodeYCbCr">sceMpegAvcDecodeYCbCr</a>(), <a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecodeStopYCbCr">sceMpegAvcDecodeStopYCbCr</a>(), <a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcCopyYCbCr">sceMpegAvcCopyYCbCr</a>()で扱うYCbCrのメモリ領域に対して、アクセスすることはやめてください。必ず、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcCsc">sceMpegAvcCsc</a>()などでRGBA画像にしてから操作するか、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcConvertToYuv420">sceMpegAvcConvertToYuv420</a>()で変換して、YUV420のYCbCrラスタ並びフォーマットに対して操作してください。<br><a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcConvertToYuv420">sceMpegAvcConvertToYuv420</a>()で変換されるYCbCrデータは、255Level、色空間サンプリング420としてY, Cb, Crのそれぞれが別々のフレームバッファ領域に、左上から右下n方向にラスタスキャンした画像として格納されます。フレームバッファは16pixel単位のものになります。色空間のサンプリングは4:2:0となります。また、各次元のフレームバッファは隙間なくY, Cb, Crの順にぴったりと並びます。例えば、480x272のAVC Decode結果を変換した場合は130560(=480x272)バイトがYのフレームバッファになり、Yのフレームバッファが終わったところからさらに32640(=240x136)バイトがCbのフレームバッファになり、同様にその後にCrのフレームバッファが32640バイト続きます。<br><a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcConvertToYuv420">sceMpegAvcConvertToYuv420</a>()で変換されたYCbCrデータを色変換してRGBAにするには、<a href="../still/JPEGDEC-Reference-Japanese.htm#sceJpegCsc">sceJpegCsc</a>()を使用します。オプション引数にSCE_CSC_BILINEAR_ENABLEを指定すると、色変換時に色成分(Cb/Cr)に対してバイリニアフィルタによるアップサンプリングがかかり、色にじみの少ない表示ができます。<br>以下に示す制限がありますが、空間周波数が高いエッジ部分の画質改善が期待されますので、ビデオストリームでの色にじみが気になる場合にお試しください。<br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> 色変換処理に時間がかかるようになる
<li> <a href="../graphics/GE-Reference-Japanese.htm#sceGeEdramGetAddr">sceGeEdramGetAddr</a>()で取得できるGraphic Engine eDRAM上の領域を書き出し先（RGBA形式のデータの置き場所）として指定できない
<li> 色変換に関するAVCデコーダとJPEGデコーダの変換係数が異なるために色合いが微妙に異なる（回避方法の詳細は、次節「PSP&reg;本体でのビデオ再生時の色にじみに関して」をご覧ください）
</ul></div>
<div style="margin-left:50px;"><a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecodeYCbCr">sceMpegAvcDecodeYCbCr</a>()の出力バッファは変換するフレームバッファの水平方向ピクセル数×水平方向ピクセル数×1.5byte以上必要です。もしくは、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcQueryYCbCrSize">sceMpegAvcQueryYCbCrSize</a>()の<i>iYCbCrMode</i>にSCE_MPEG_AVC_YCBCR_YUV420を設定して必要サイズを計算してください。また、このバッファはかならず64byteアラインメントで確保してください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_10">
<h3>
<a href="#Heading3_2"> 2. </a>10 
<!-- hp1 --><b>PSP&reg;本体でのビデオ再生時の色にじみに関して</b><br>
</a>
</h3>
<div style="margin-left:50px;">エッジのくっきりとした動画を扱う場合に、場合によっては色にじみが発生してしまい予想通りの表示結果が得られない場合があります。このような色にじみが発生する原因の一つとして、PSP&reg;上でAVCデコード後のYUVからRGBAへ色変換する際の補間精度があります。<br>これはAVCビデオストリームがYUV420で記録されていて色成分(Cb/Cr)がRGBAでのpixel数の1/4となっており、補間しつつRGBAに変換する際の補間方法の問題で、エンコード側でビデオストリームのビットレートをやみくもに上げても改善しません（逆に悪化することもあります）。また、PSP&reg;本体でない環境（PC上の再生ソフトなど）での再生では補間方法が異なるため問題が目立たないことがあります。<br>この問題は、<a href="../still/JPEGDEC-Reference-Japanese.htm#sceJpegCsc">sceJpegCsc</a>()関数を用いて、色成分をバイリニア補間して色変換することで改善する可能性があります（詳しくは前節「ビデオストリームのYCbCrに対しての操作について」の後半部分をご覧ください）。また、この問題に該当しているかの確認は、PSP&reg;本体上にてmpegstr_guサンプルを-modeyuv420オプション付きで実行し、該当ビデオストリームを再生させることで可能です。<br>ただし、エンコード時、StreamComposerのBrightness Scaleの設定は16-235(ITU-R601)としてください。これは、<a href="../still/JPEGDEC-Reference-Japanese.htm#sceJpegCsc">sceJpegCsc</a>()でのCSC計算がJFIFでの係数（ITR-R601の値域を広げた16-235ではなく0-255のままYUV-RGBA変換の係数が1.0となるようなもの）を使うためです。Brightness Scaleをデフォルトの0-255の設定とすると、通常のMPEGライブラリ系で使われるITU-R601形式の色として処理されるため、期待した色味になりません。ただし、誤って16-235(ITU-R601)としてエンコードしたPSMFファイルを通常のMPEG系のCSC関数<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcCsc">sceMpegAvcCsc</a>()や<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecode">sceMpegAvcDecode</a>()を使ってしまうと技術情報200504-01のように表示が乱れてしまうことがあるので注意してください。<br>なお、PSMFストリームで主に使用する480x272ピクセル、30fpsの一般的な動画ですと、AVCのビットレートは、StreamComposerのデフォルト設定である平均1Mbps程度で十分です。<br>もちろんそれ以上ビットレートをあげて改善することもありますが、ビットレートをあげても改善しない場合にはこちらの方法もご検討ください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_11">
<h3>
<a href="#Heading3_2"> 2. </a>11 
<!-- hp1 --><b>デコード結果のオーディオデータ</b><br>
</a>
</h3>
<div style="margin-left:50px;"><a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAtracDecode">sceMpegAtracDecode</a>()でデコードした結果のオーディオデータは、サンプリング周波数44.1kHz / 16ビットのPCMデータで1chあたり2048サンプルとなります。<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegGetPcmAu">sceMpegGetPcmAu</a>()で取得できるオーディオデータは、1chあたり80サンプルとなります。チャンネル数は1chまたは2chを選択できます。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_12">
<h3>
<a href="#Heading3_2"> 2. </a>12 
<!-- hp1 --><b>ATRAC3plus&trade;ストリームのデコードに関する注意</b><br>
</a>
</h3>
<div style="margin-left:50px;">ATRAC3plus&trade;エレメンタリストリームのデコードは、必ず<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAtracDecode">sceMpegAtracDecode</a>()を使用して行ってください。また、新たなPSMFストリームのデコードを開始する場合には、そのたびにATRAC3plus&trade;デコーダを初期化してください。<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAtracDecode">sceMpegAtracDecode</a>()の<i>iInitFlag</i>引数を1にして呼び出すことで初期化できます（このときPCMデータは出力されません）。逆に、同じPSMFストリームから得られたATRAC3plus&trade;ストリームの続きをデコードする際には、<i>iInitFlag</i>変数を0にしてデコードしてください。<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_3">
<h2>
 3 <!-- hp --><b>注意事項</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">libmpegの使用に関して、以下の注意事項があります。<br></div>
<div style="margin-left:40px;"><ul>
<li> <a href="../movie/libmpeg-Reference-Japanese.htm#SceMpeg">SceMpeg</a>構造体はプログラム全体で一つしか生成できません。複数生成した場合の動作は保証されません。
<li> 複数のAVCおよびATRAC3plus&trade;のエレメンタリストリームを多重化したPSMFストリームを扱うことはできますが、一度にAVCおよびATRAC3plus&trade;それぞれに対して1つずつしかデコードできません。
<li> あるストリームのデコード後に、別のストリームを続けて入力する場合は必ず多重分離のバッファ及び各ストリームIDの管理構造体<a href="../movie/libmpeg-Reference-Japanese.htm#SceMpegStream">SceMpegStream</a>へのポインタを開放＆初期化してください。
<li> PSMF入力用のリングバッファは、必ずStreamComposerで設定した多重化レート×STD Delayのサイズが十分格納できるPack数以上を確保してください(1Pack=2048byte)。ただしPSMFストリームがこのサイズよりも小さいときは、PSMFストリーム全体が収まるだけのPack数で差し支えありません。リングバッファが上記の条件を満たさない場合は、ビデオ、オーディオ、ユーザデータのデータが多重分離の出力時間に同期した時刻(PTS)に取り出せないことがあります。
<li> タイムスタンプPTS/DTSの参照するSTCを扱う機能はサポートされていません。PSMFに記録されたPTS/DTSを取得することが可能です。
<li> 必ずStream ComposerおよびPSMF Composerで作成したPSMFファイルを使用してください。これら専用ツール以外で作られたPSMFファイルについては、デコードおよび多重分離操作の動作保証はできません。
<li> <a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegRingbufferPut">sceMpegRingbufferPut</a>()で呼び出されるMPEGリングバッファコールバック関数の実装は、sceIoRead()などで読む場合には問題ないですが、memcpy()などでデータキャッシュを経由する場合には、必ず<a href="../kernel/Cache-Reference-Japanese.htm#sceKernelDcacheWritebackInvalidateRange">sceKernelDcacheWritebackInvalidateRange</a>()などでデータキャッシュからメインメモリに書き出してください。
<li> ビデオストリームのデコード出力メモリ領域の前後に、CPUで書き換えるデータがある場合には、データキャッシュのメインメモリへの書き戻しに注意してください。ビデオストリームのデコード結果の出力は、ハードウェア制約で16byteアラインメントである必要がありますが、CPUでのデータキャッシュからメインメモリへの書き出しは64byteアラインメントで行われます。よって前後していた場合には、デコード出力結果とは異なる内容がデコード出力メモリ領域に書かれることがあります。これを避けるためには、64byteアラインメントでデコード出力メモリ領域を確保するか、ビデオデコードする前に<a href="../kernel/Cache-Reference-Japanese.htm#sceKernelDcacheWritebackInvalidateRange">sceKernelDcacheWritebackInvalidateRange</a>()などでデータキャッシュからメインメモリに書き出してください。
<li> <a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecodeYCbCr">sceMpegAvcDecodeYCbCr</a>(), <a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcDecodeStopYCbCr">sceMpegAvcDecodeStopYCbCr</a>(), <a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcCopyYCbCr">sceMpegAvcCopyYCbCr</a>()で扱うYCbCrのメモリ領域に対して、アクセスすることはやめてください。必ず、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcCsc">sceMpegAvcCsc</a>()などでRGBA画像にしてから操作するか、<a href="../movie/libmpeg-Reference-Japanese.htm#sceMpegAvcConvertToYuv420">sceMpegAvcConvertToYuv420</a>()で変換し、YUV420のYCbCrラスタ並びフォーマットに対して操作してください。
</ul></div>

<!-- sce_hd4 -->
<a name="Heading4_3_1">
<h3>
<a href="#Heading3_3"> 3. </a>1 
<!-- hp1 --><b>スタックサイズについて</b><br>
</a>
</h3>
<div style="margin-left:50px;">libmpegのAPI呼び出しに必要なスタックサイズは、1024バイトです。これよりも大きなスタックサイズを確保してください。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_2">
<h3>
<a href="#Heading3_3"> 3. </a>2 
<!-- hp1 --><b>終了処理について</b><br>
</a>
</h3>
<div style="margin-left:50px;">libmpegでは、内部的にMedia Engine側CPUの機能を呼び出しており、その際Media Engine内部資源の排他処理のためにセマフォなどを用いています。<br>その為libmpegの関数を実行中にlibmpegを呼び出しているスレッドを<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateThread">sceKernelTerminateThread</a>()およびスレッドがDORMANT状態になる以前に<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateDeleteThread">sceKernelTerminateDeleteThread</a>()を使って強制的に削除すると、タイミングによっては内部資源を握った状態でスレッドが削除されてしまうことがあります。この結果libmpegなどのMedia Engine側CPUの機能を用いる他のライブラリが正しく動作しなくなったりする危険性があります。<br><br>スレッドを停止させる場合は、<br></div>
<div style="margin-left:40px;"><ul>
<li> スレッド停止を命じる側からスレッドに対して共有変数、イベントフラグなどを用いて終了を伝達する。
<li> 停止させられるスレッド側は、上記フラグなどを定期的に監視しておき、停止命令が出ていないかを確認する。出ていた時は現在libmpegが動作していないことを確認した上で<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitThread">sceKernelExitThread</a>()を呼び出し、自スレッドを停止させる。
</ul></div>
<div style="margin-left:50px;">ようにして下さい(libmpegを用いた各種サンプルもこのような作りになっています)。<br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
