<html lang="en">
<head>
<title>Movie-Overview</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
Movie Data Creation andPlayback Overview
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd3 -->
<a name="Heading3_1">
<h2>
 1 <!-- hp --><b>Creating Movie Data</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">The UMD&trade; Stream Composer(for Game Movie) (hereafter abbreviated as Stream Composer) and PSMF Composer tools are provided for creating PSP&trade; movie data (PSP&trade; Movie Format (for game) (abbreviated PSMF)).<br>Stream Composer is used to encode AVI and WAV format data and combine the encoded movie file with arbitrary user data into a single file. A PSMF file can then be created by using PSMF Composer to further convert this encoded result.<br>This document will describe an overview of the process for creating PSMF files using these tools.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_1">
<h3>
<a href="#Heading3_1"> 1. </a>1 
<!-- hp1 --><b>Materials Needed for Movie Data</b><br>
</a>
</h3>
<div style="margin-left:50px;">To create movie data, use AVI format video data, and AVI or WAV format audio data. If necessary, user data can also be used. Use appropriate authoring tools and create data that conforms to the following specifications.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_1_1_1">
<div style="margin-left:40px;"><h4><b>Video Data</b><br><br></h4></div></a>

<div style="margin-left:90px;">
<table border=1>
<tr>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>File&nbsp;Type</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Item</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Specifications</b>&nbsp;</td>
</tr>
<tr>
<td rowspan= 6  valign="top">&nbsp;AVI&nbsp;</td>
<td>&nbsp;File&nbsp;format&nbsp;</td>
<td>&nbsp;AVI&nbsp;1.0,&nbsp;AVI&nbsp;2.0&nbsp;(Open&nbsp;DML)&nbsp;</td>
</tr>
<tr>
<td>&nbsp;File&nbsp;codec&nbsp;</td>
<td>&nbsp;Huffyuv,&nbsp;YUY2,&nbsp;RGB24&nbsp;</td>
</tr>
<tr>
<td>&nbsp;Resolution&nbsp;</td>
<td>&nbsp;Min&nbsp;64x64&nbsp;-&nbsp;Max&nbsp;480x272&nbsp;(16&nbsp;pixel&nbsp;units)&nbsp;</td>
</tr>
<tr>
<td>&nbsp;Frame&nbsp;rate&nbsp;</td>
<td>&nbsp;29.97&nbsp;fps&nbsp;</td>
</tr>
<tr>
<td>&nbsp;Scanning&nbsp;</td>
<td>&nbsp;Progressive&nbsp;</td>
</tr>
<tr>
<td>&nbsp;Duration&nbsp;</td>
<td>&nbsp;1&nbsp;frame&nbsp;-&nbsp;4.97&nbsp;hours&nbsp;</td>
</tr></table>
</div>
<br>

<!-- sce_title -->
<a Name ="HeadingT_1_1_2">
<div style="margin-left:40px;"><h4><b>Audio Data</b><br><br></h4></div></a>

<div style="margin-left:90px;">
<table border=1>
<tr>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>File&nbsp;Type</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Item</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Specifications</b>&nbsp;</td>
</tr>
<tr>
<td rowspan= 6  valign="top">&nbsp;AVI&nbsp;or&nbsp;WAV&nbsp;</td>
<td>&nbsp;File&nbsp;format&nbsp;</td>
<td>&nbsp;WAV,&nbsp;AVI&nbsp;1.0,&nbsp;AVI&nbsp;2.0&nbsp;(Open&nbsp;DML)&nbsp;</td>
</tr>
<tr>
<td>&nbsp;File&nbsp;codec&nbsp;</td>
<td>&nbsp;PCM&nbsp;</td>
</tr>
<tr>
<td>&nbsp;Sampling&nbsp;rate&nbsp;</td>
<td>&nbsp;44.1&nbsp;kHz&nbsp;</td>
</tr>
<tr>
<td>&nbsp;Bit&nbsp;length&nbsp;</td>
<td>&nbsp;16&nbsp;bits&nbsp;</td>
</tr>
<tr>
<td>&nbsp;Channel&nbsp;</td>
<td>&nbsp;mono,&nbsp;stereo&nbsp;</td>
</tr>
<tr>
<td>&nbsp;Duration&nbsp;</td>
<td>&nbsp;Maximum&nbsp;4.97&nbsp;hours&nbsp;</td>
</tr></table>
</div>
<br>

<!-- sce_title -->
<a Name ="HeadingT_1_1_3">
<div style="margin-left:40px;"><h4><b>User Data</b><br><br></h4></div></a>

<div style="margin-left:90px;">
<table border=1>
<tr>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>File&nbsp;Type</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Item</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Specifications</b>&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;Arbitrary&nbsp;data&nbsp;</td>
<td>&nbsp;File&nbsp;format&nbsp;</td>
<td>&nbsp;Arbitrary&nbsp;data&nbsp;</td>
</tr>
<tr>
<td>&nbsp;File&nbsp;size&nbsp;</td>
<td>&nbsp;The&nbsp;permitted&nbsp;range&nbsp;is&nbsp;such&nbsp;that&nbsp;the&nbsp;<br>&nbsp;mutliplexer&nbsp;can&nbsp;multiplex&nbsp;a&nbsp;stream&nbsp;with&nbsp;640&nbsp;<br>&nbsp;kbyte&nbsp;(max.)&nbsp;per&nbsp;data&nbsp;entry,&nbsp;and&nbsp;a&nbsp;<br>&nbsp;multiplexing&nbsp;rate&nbsp;of&nbsp;10&nbsp;Mbps&nbsp;(max).&nbsp;</td>
</tr>
<tr>
<td>&nbsp;Duration&nbsp;</td>
<td>&nbsp;Maximum&nbsp;4.97&nbsp;hours&nbsp;</td>
</tr></table>
</div>
<br>

<!-- sce_hd4 -->
<a name="Heading4_1_2">
<h3>
<a href="#Heading3_1"> 1. </a>2 
<!-- hp1 --><b>Encoding Using Stream Composer</b><br>
</a>
</h3>
<div style="margin-left:50px;">Stream Composer is a tool that encodes and multiplexes video and audio data respectively as a preprocessing step. When user data is specified, it is multiplexed together with the video and audio data.<br>See the &quot;UMD&trade; Stream Composer (for Game Movie) User's Manual&quot; document for details.<br><br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_3">
<h3>
<a href="#Heading3_1"> 1. </a>3 
<!-- hp1 --><b>Conversion Using PSMF Composer</b><br>
</a>
</h3>
<div style="margin-left:50px;">PSMF Composer is a tool that converts files created with Stream Composer into PSMF format.<br>See the document &quot;PSMF Composer User's Manual&quot; for details.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_4">
<h3>
<a href="#Heading3_1"> 1. </a>4 
<!-- hp1 --><b>Reference 1: PSMF Structure</b><br>
</a>
</h3>
<div style="margin-left:50px;">The structure of PSMF is roughly as follows.<br></div>

<div align=center>
<p>
<img src="gif/Movie-Overview-English001.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 1  PSMF Data Structure</b><br>
</div>
<br>
<div style="margin-left:50px;">The PSMF file header includes various types of information, an EP map and PSMF marks. The EP map has indexing pointers that have location information so that playback can begin from an arbitrary location within the movie data. PSMF marks are marks that point to specific locations within the video stream. The movie data itself is an MPEG2 program stream with multiplexed MPEG4 AVC format video streams, ATRAC3plus&trade;/PCM format audio streams and user data.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_5">
<h3>
<a href="#Heading3_1"> 1. </a>5 
<!-- hp1 --><b>Reference 2: EP map and Indexing Pointer Structure</b><br>
</a>
</h3>
<div style="margin-left:50px;">A PSMF file holds information about index points in a video stream, and this information is called an EP map as shown in Reference 1. These index points are called Random Access Points (RAP), and additional information called Random Access Point Info (RAPI) is present at the RAP positions in a PSMF stream. The first access unit following a RAP consists of an IDR-picture, and this is called a Recovery Point Access Unit (RpAU). If you wish to start decoding at an intermediate point in a PSMF stream, you can start decoding from an arbitrary RAP.<br>An EP map stores the offset from the beginning of the stream to a RAP, the PTS of the RpAU, and size information (<i>NthRefPictureOffset</i>) that is managed in units of packs from the RAP until the N-th reference picture (<i>indexN</i>).<br></div>

<div style="margin-left:67px;">
<p>
<img src="gif/Movie-Overview-English002.gif">
</div>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 2 EP Map and RAP Data Structure</b><br>
</div>
<br>
<div style="margin-left:50px;">By using the above information, trick play such as cueing, fast forward, or rewind can be performed from an intermediate position in a PSMF stream.<br>An EP map can also be set for the user data stream. Unlike a video stream, with a user data stream the pointers point to the beginning of each access unit, not to RAPI positions.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_6">
<h3>
<a href="#Heading3_1"> 1. </a>6 
<!-- hp1 --><b>Reference 3: PSMF Marks</b><br>
</a>
</h3>
<div style="margin-left:50px;">In a PSMF stream, PSMF Marks point to specific locations in the video stream. The PSMF file header contains a table for managing the PSMF Marks. There are two types of PSMF Marks: Chapter Marks and Event Marks.<br>A Chapter Mark is intentionally set at a location such as a scene break by the PSMF stream creator. An Event Mark enables the PSMF file playback program to point to something by assigning a mark to a certain location within the PSMF stream rather than at a scene break.<br>Although a Chapter Mark is associated with all elementary streams within the PSMF stream, an Event Mark can be associated with all video streams or with only specific video streams.<br></div>

<div align=center>
<p>
<img src="gif/Movie-Overview-English003.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 3 PSMF Marks</b><br>
</div>
<br>
<div style="margin-left:50px;">For example, suppose that Chapter Marks and Event Marks are set for two video streams and one audio stream as shown in Figure 3. Chapter Mark 1 and Chapter Mark 2 have been set because scene breaks exist at these locations in the PSMF stream. On the other hand, the Event Marks are used to indicate arbitrary locations, not scene breaks. For example, assume that a displayed menu button switches when an Event Mark appears. In this case, although Event Mark 1 is set in both Video Stream 0 and Video Stream 1, since Event Mark 2 is set only for Video Stream 0, Event Mark 2 is not referenced while Video Stream 1 is being played.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_2">
<h2>
 2 <!-- hp --><b>Playing Back Movie Data</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_2_1">
<h3>
<a href="#Heading3_2"> 2. </a>1 
<!-- hp1 --><b>Overview of Movie Playback Processing Using libmpeg and libpsmf</b><br>
</a>
</h3>
<div style="margin-left:50px;">The libmpeg library demultiplexes elementary streams from PSMF streams consisting of multiplexed video, audio and user data, and decodes them.<br>The libpsmf library obtains the various types of information and the EP map from the PSMF header file.<br>The figure below shows the flow of movie playback processing using libmpeg and libpsmf.<br></div>

<div style="margin-left:67px;">
<p>
<img src="gif/Movie-Overview-English004.gif">
</div>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 4  Flow of Movie Playback Processing Using libmpeg</b><br>
</div>
<br>
<div style="margin-left:50px;">See the document &quot;MPEG Library Overview&quot; for other details on the procedure for using libmpeg, etc. For details on the libmpeg API, see the libmpeg library reference.<br>See the document &quot;PSMF Library Overview&quot; for details on the procedure for using libpsmf, etc. For details on the libpsmf API, see the libpsmf library reference.<br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2006 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
