<html lang="en">
<head>
<title>libpsmfplayer-Overview</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
libpsmfplayer Overview
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd3 -->
<a name="Heading3_1">
<h2>
 1 <!-- hp --><b>Library Overview</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_1_1">
<h3>
<a href="#Heading3_1"> 1. </a>1 
<!-- hp1 --><b>Library Overview</b><br>
</a>
</h3>
<div style="margin-left:50px;">libpsmfplayer is a library that can be used to easily implement PSMF stream playback.<br>By using the library to manage file reading, decoding, and AV synchronization, which can be problematic when playing video, libpsmfplayer enables normal playback, network streaming, trick play, and PCM playback to be implemented without the program having to be particularly aware of anything other than drawing.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_2">
<h3>
<a href="#Heading3_1"> 1. </a>2 
<!-- hp1 --><b>Relationship Between Display Operation and the Library</b><br>
</a>
</h3>
<div style="margin-left:50px;">The relationship between libpsmfplayer and the display operation is shown in the following figure.<br></div>

<div align=center>
<p>
<img src="gif/libpsmfplayer-Overview-English001.gif">
</div>
<br>
<div style="margin-left:50px;"><br></div>

<!-- sce_fignum -->
<div align=center>
<p>
<b>Figure 1 Relationship Between Library and Display</b><br>
</div>
<br>
<div style="margin-left:50px;"><br>As shown in Figure 1, libpsmfplayer decodes the given PSMF data and manages all processing up to the point where AV synchronization is performed. Therefore, decoding and AV synchronization processing can be isolated from drawing operations in the program, and playback can be performed without being particularly concerned with trick play or differences in media.<br><br>The drawing program requests decoded data from libpsmfplayer every vertical blanking interval (1 V) so that sound won't be interrupted for the audio program, and then PSMF data playback can be implemented by continuously outputting that data.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_3">
<h3>
<a href="#Heading3_1"> 1. </a>3 
<!-- hp1 --><b>Related Files</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following files are required to use libpsmfplayer.<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Category</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>File Name</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Header file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libpsmfplayer.h&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Module file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libpsmfplayer.prx&nbsp;&nbsp;<br>&nbsp;&nbsp;psmf.prx&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Stub library file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;libpsmfplayer_stub.a&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">A utility function must be used to load the libmpeg module, libatrac3plus module, and the modules that perform processing for them. For details, refer to the Utility Overview.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_1_4">
<h3>
<a href="#Heading3_1"> 1. </a>4 
<!-- hp1 --><b>Related Documents</b><br>
</a>
</h3>
</ol>
<div style="margin-left:40px;"><ul>
<li> Overview of Video Data Creation and Playback <br>This document presents an overview of the materials used and method for creating PSMF data. It also explains how to use libmpeg to play PSMF data.
<li> UMD&trade; Stream Composer(for Game Movie) User's Manual<br>This document describes how to use the tool for creating PSMF data.
<li> PSMF Composer User's manual<br>This document describes how to use the tool for creating PSMF data.
<li> libpsmfplayer-Reference<br>This is the libpsmfplayer function reference.
<li> libmpeg-Overview<br>This document presents an overview of libmpeg.
<li> libmpeg-Reference<br>This is the libmpeg function reference.
<li> libpsmf-Reference<br>This is the libpsmf function reference.
<li> libpsmf-Overview<br>This document presents an overview of libpsmf.
</ul></div>

<!-- sce_hd4 -->
<a name="Heading4_1_5">
<h3>
<a href="#Heading3_1"> 1. </a>5 
<!-- hp1 --><b>Sample Programs</b><br>
</a>
</h3>

<!-- sce_title -->
<a Name ="HeadingT_1_5_1">
<div style="margin-left:40px;"><h4><b>devkit/sample/player/psmf/simplePlayer</b><br><br></h4></div></a>

<div style="margin-left:67px;">This sample program uses libpsmfplayer to perform normal playback. It supports playback from a UMD&trade;/DVD, Memory Stick&trade;, and network. It also demonstrates how to use libpsmfplayer when volatile memory is used and when color conversion using bilinear interpolation is used.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_1_5_2">
<div style="margin-left:40px;"><h4><b>devkit/sample/player/psmf/psmfPlayer/</b><br><br></h4></div></a>

<div style="margin-left:67px;">This sample program uses all functions of libpsmfplayer. In addition to normal playback, it can perform fast forward, rewind, pause, frame-by-frame playback, slow motion playback, video/audio switching, and start playback from an intermediate location.<br></div>

<!-- sce_hd3 -->
<a name="Heading3_2">
<h2>
 2 <!-- hp --><b>PsmfPlayer Status Transitions</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_2_1">
<h3>
<a href="#Heading3_2"> 2. </a>1 
<!-- hp1 --><b>libpsmfplayer Status Transitions</b><br>
</a>
</h3>
<div style="margin-left:50px;">libpsmfplayer status transitions are shown below.<br><br></div>

<div style="margin-left:67px;">
<p>
<img src="gif/libpsmfplayer-Overview-English002.gif">
</div>
<div style="margin-left:50px;"><br>When libpsmfplayer is used, <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerUpdate">scePsmfPlayerUpdate</a>() must be called continuously starting from when the status is SCE_PSMFPLAYER_STATUS_PLAY until it becomes SCE_PSMFPLAYER_STATUS_DORMANT.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_3">
<h2>
 3 <!-- hp --><b>Video, Audio Data Acquisition</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_3_1">
<h3>
<a href="#Heading3_3"> 3. </a>1 
<!-- hp1 --><b>Video Data Acquisition</b><br>
</a>
</h3>
<div style="margin-left:50px;">When <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerGetVideoData">scePsmfPlayerGetVideoData</a>() is called, libpsmfplayer sets data in the addresses that were written in the <a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayerVideoData">ScePsmfPlayerVideoData</a> structure. The data is output in the specified pixel format with the width indicated by frameWidth in the <a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayerVideoData">ScePsmfPlayerVideoData</a> structure.<br><br>Since libpsmfplayer manages the video data internally, it provides the appropriate image for each V interval even for trick play such as pausing or fast forwarding. If the program calls <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerGetVideoData">scePsmfPlayerGetVideoData</a>() at intervals of V, the video data can be played correctly, and the program need not be concerned with managing the video data itself. For example, when playback is paused, <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerGetVideoData">scePsmfPlayerGetVideoData</a>() always returns the same video data every V. Therefore, playback can be paused by continuously displaying that data.<br><br>When video data is acquired, <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerUpdate">scePsmfPlayerUpdate</a>() must always be called before the data is acquired. If <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerUpdate">scePsmfPlayerUpdate</a>() is not called at intervals of V, the internal buffer management of libpsmfplayer will be disrupted and the data will not be played correctly. Likewise, if <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerUpdate">scePsmfPlayerUpdate</a>() is called after the video data is acquired, the data also will not be played correctly.<br><br>If the return value is <a href="../movie/libpsmfplayer-Reference-English.htm#SCE_MPEG_ERROR_PSMFPLAYER_NODATA">SCE_MPEG_ERROR_PSMFPLAYER_NODATA</a>, it means that no data could be acquired. This occurs if playback is started while the data is being buffered or when playback has ended.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_2">
<h3>
<a href="#Heading3_3"> 3. </a>2 
<!-- hp1 --><b>Audio Data Acquisition</b><br>
</a>
</h3>
<div style="margin-left:50px;">Audio data is acquired by calling <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerGetAudioData">scePsmfPlayerGetAudioData</a>(). All audio data that is acquired is returned in 2048 samples. Even when the coding is PCM, the data is output to match 2048 samples. Be sure to design a program that uses libpsmfplayer to acquire audio data in such a manner so that audio output is not interrupted.<br><br>If the return value is <a href="../movie/libpsmfplayer-Reference-English.htm#SCE_MPEG_ERROR_PSMFPLAYER_NODATA">SCE_MPEG_ERROR_PSMFPLAYER_NODATA</a>, no data could be acquired. This is returned during trick play operations such as pause, slow motion, frame-by-frame playback, fast forward, or rewind, or when the PSMF data does not contain any audio, or when a setting has been made that prevents output of audio data.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_4">
<h2>
 4 <!-- hp --><b>Usage Procedure</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_4_1">
<h3>
<a href="#Heading3_4"> 4. </a>1 
<!-- hp1 --><b>libpsmfplayer Usage Procedure</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following procedure should be followed to use libpsmfplayer.<br></div>
</ul>
<div style="margin-left:55px;"><ol>
<li VALUE=1> Call <a href="../movie/libmpeg-Reference-English.htm#sceMpegInit">sceMpegInit</a>(), then if a UMD&trade; is used, call <a href="../peripheral/UMD-Reference-English.htm#sceUmdActivate">sceUmdActivate</a>() or if a network is used, initialize the network in advance.</li>
<li VALUE=2> Allocate memory for <a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayerParam">ScePsmfPlayerParam</a> and set the required values in <a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayerParam">ScePsmfPlayerParam</a>.</li>
<li VALUE=3> Call <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerCreate">scePsmfPlayerCreate</a>() to create PsmfPlayer.</li>
<li VALUE=4> Call <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSetPsmf">scePsmfPlayerSetPsmf</a>() and specify the PSMF data to be played.</li>
<li VALUE=5> To change the PsmfPlayer configuration, call <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerConfigPlayer">scePsmfPlayerConfigPlayer</a>() and change such characteristics as repeated playback or the video data pixel format.</li>
<li VALUE=6> Call <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerStart">scePsmfPlayerStart</a>() to start PsmfPlayer.</li>
<li VALUE=7> After using <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerUpdate">scePsmfPlayerUpdate</a>() to update PsmfPlayer, use <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerGetVideoData">scePsmfPlayerGetVideoData</a>() to get decoded data and perform drawing processing. Also use <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerGetAudioData">scePsmfPlayerGetAudioData</a>() at the same time to get audio output data and output it to perform PSMF playback.</li>
<li VALUE=8> To perform trick play, call <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerChangePlayMode">scePsmfPlayerChangePlayMode</a>() to change the PsmfPlayer mode.</li>
<li VALUE=9> Call <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerStop">scePsmfPlayerStop</a>() to stop playback.</li>
<li VALUE=10> To cancel the specification of PSMF data to be played, call <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerReleasePsmf">scePsmfPlayerReleasePsmf</a>(). To continue to play other PSMF data, execute the processing flow again starting from step (4).</li>
<li VALUE=11> Use <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerDelete">scePsmfPlayerDelete</a>() to delete the player and release the memory that was allocated for <a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayerParam">ScePsmfPlayerParam</a>. This ends everything.</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_4_2">
<h3>
<a href="#Heading3_4"> 4. </a>2 
<!-- hp1 --><b>Initialization Processing</b><br>
</a>
</h3>
<div style="margin-left:50px;">To use libpsmfplayer, you must allocate memory for the library in advance.<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>Example)
/* Initialization processing */
<a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayer">ScePsmfPlayer</a>         player;
<a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayerParam">ScePsmfPlayerParam</a>    param;
<a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayerPlayInfo">ScePsmfPlayerPlayInfo</a> info;

/* Allocate video buffer */
param.bufAddr = (<a href="../kernel/Types-Reference-English.htm#SceUChar8">SceUChar8</a>*)malloc((size_t)<a href="../movie/libpsmfplayer-Reference-English.htm#SCE_PSMFPLAYER_BUF_SIZE">SCE_PSMFPLAYER_BUF_SIZE</a>);

if (param.bufAddr == NULL) {
	/* Error handling */
}

param.bufSize = <a href="../movie/libpsmfplayer-Reference-English.htm#SCE_PSMFPLAYER_BUF_SIZE">SCE_PSMFPLAYER_BUF_SIZE</a>;

/* Set the thread priority */
param.threadPriority = 32;

/* Create PsmfPlayer */
<a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerCreate">scePsmfPlayerCreate</a>( &amp;player, &amp;param );

/* Set playback parameters */
info.videoCodecType        = SCE_PSMFPLAYER_STREAM_M4AVC;
info.playVideoStreamNumber = 0;
info.audioCodecType        = SCE_PSMFPLAYER_STREAM_AUDIO;
info.playAudioStreamNumber = 0;
info.playMode              = SCE_PSMFPLAYER_MODE_PLAY;
info.speed                 = SCE_PSMFPLAYER_SPEED_1;

/* Set the PSMF to be played in PsmfPlayer */
<a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSetPsmf">scePsmfPlayerSetPsmf</a>( &amp;player, &quot;disc0:/PSP_GAME/USRDIR/demo01.pmf&quot; );

/* Start playback */
<a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerStart">scePsmfPlayerStart</a>(&amp;player, &amp;info, 0);
</font></pre></div>
<div style="margin-left:50px;"><br>To use libpsmfplayer, you must allocate memory in advance for setting parameters in <a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayerParam">ScePsmfPlayerParam</a>. Also, for the thread priority that is set in <a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayerParam">ScePsmfPlayerParam</a>, the library uses up to two levels below the priority that was specified by the application. Since the thread priority was set to 32 in the example above, the thread priorities of the library used by PsmfPlayer will be 32, 33, and 34. <br>The priority of the drawing thread must be higher than the priority of the library.<br><br>Setting a negative value for the audio streamTypeNumber when no audio exists enables the PSMF data to be played. If the PSMF data does not contain any audio and a non-negative value is set for the streamTypeNumber, the player internally makes it a negative value.<br><br>The starting time specified in the third argument of <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerStart">scePsmfPlayerStart</a>() is a relative value for a 90kHz system where the first video frame is considered to be 0. Note that values written in the PSMF header may not necessarily start at 0.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_3">
<h3>
<a href="#Heading3_4"> 4. </a>3 
<!-- hp1 --><b>Drawing Processing Flow</b><br>
</a>
</h3>
<div style="margin-left:50px;">libpsmfplayer performs drawing as shown below.<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>Example)
<a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayer">ScePsmfPlayer</a> player;
<a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayerVideoData">ScePsmfPlayerVideoData</a> videoData;
<a href="../kernel/Types-Reference-English.htm#SceUChar8">SceUChar8</a>* workBuf;
<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> ret;

/* Drawing initialization processing */

/* Specify workBuf for drawing */
workBuf = (<a href="../kernel/Types-Reference-English.htm#SceUChar8">SceUChar8</a>*)( (<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a>)<a href="../graphics/GE-Reference-English.htm#sceGeEdramGetAddr">sceGeEdramGetAddr</a>() + 
(<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a>)SCEGU_VRAM_BP_32_2 + SCEGU_VRAM_WIDTH * SCEGU_SCR_HEIGHT * 2 );

videoData.frameWidth = 512;
videoData.buf = workBuf;

for (;;) {
	if(<a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerGetCurrentStatus">scePsmfPlayerGetCurrentStatus</a> ( &amp;player ) ==
		SCE_PSMFPLAYER_STATUS_DORMANT ) {
		/* End playback */
		break;
	}

	/* Update drawing data */
	<a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerUpdate">scePsmfPlayerUpdate</a>( &amp;player );

	/* Get decoded data */
	ret = <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerGetVideoData">scePsmfPlayerGetVideoData</a>( &amp;player, &amp;videoData );

	/* Drawing processing */
	if ( ret == <a href="../movie/libpsmfplayer-Reference-English.htm#SCE_MPEG_ERROR_PSMFPLAYER_NODATA">SCE_MPEG_ERROR_PSMFPLAYER_NODATA</a> ) {
		/* No drawing data */
	} else if ( ret == 0 ){
		/* Draw video */
	} else {
		/* Error handling */
	}

	/* Wait until next VBlank */
	<a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStart">sceDisplayWaitVblankStart</a>();
	
	/* Swap buffers */
	<a href="../graphics/libgu-Reference-English.htm#sceGuSwapBuffers">sceGuSwapBuffers</a>();
}
</font></pre></div>
<div style="margin-left:50px;"><br>Video playback by using libpsmfplayer is implemented by performing the processing flow shown above every V. PsmfPlayer status is checked and if it is not SCE_PSMFPLAYER_STATUS_DORMANT, drawing is updated by calling <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerUpdate">scePsmfPlayerUpdate</a>(). Decoded data is acquired by <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerGetVideoData">scePsmfPlayerGetVideoData</a>() and drawn.<br>To stop playback, call <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerStop">scePsmfPlayerStop</a>() and when the status becomes SCE_PSMFPLAYER_STATUS_DORMANT, playback can be stopped. At this time, <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerStop">scePsmfPlayerStop</a>() must be called by a different thread than the one used for <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerUpdate">scePsmfPlayerUpdate</a>().<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_4">
<h3>
<a href="#Heading3_4"> 4. </a>4 
<!-- hp1 --><b>Trick Play</b><br>
</a>
</h3>
<div style="margin-left:50px;">Trick play can be implemented by setting the desired operation in the second argument of <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerChangePlayMode">scePsmfPlayerChangePlayMode</a>() or by calling <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectVideo">scePsmfPlayerSelectVideo</a>(), <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectAudio">scePsmfPlayerSelectAudio</a>(), <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectSpecificVideo">scePsmfPlayerSelectSpecificVideo</a>(), or <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectSpecificAudio">scePsmfPlayerSelectSpecificAudio</a>().<br>Currently, the following operations are supported.<br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> Operations that can be performed by <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerChangePlayMode">scePsmfPlayerChangePlayMode</a>()
</ul></div>
<div style="margin-left:70px;"><ul>
<li> Fast forward
<li> Rewind
<li> Slow motion
<li> Frame-by-frame playback
<li> Pause
<li> Play from an intermediate location
</ul></div>
</ul>
<div style="margin-left:50px;"><br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> Operations that can be performed by <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectVideo">scePsmfPlayerSelectVideo</a>(), <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectAudio">scePsmfPlayerSelectAudio</a>(), <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectSpecificVideo">scePsmfPlayerSelectSpecificVideo</a>(), or <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectSpecificAudio">scePsmfPlayerSelectSpecificAudio</a>()
</ul></div>
<div style="margin-left:70px;"><ul>
<li> Switch video stream
<li> Switch audio stream (ATRAC3Plus&trade;/PCM)
</ul></div>
</ul>
<div style="margin-left:50px;"><br></div>
<div style="margin-left:67px;">However, when HTTP is used for performing streaming playback of PSMF data in which the stream does not have an EP_map, and for which Range cannot be specified, trick play is limited to the following operations only.<br></div>
<div style="margin-left:70px;"><ul>
<li> Slow motion
<li> Frame-by-frame playback
<li> Pause
</ul></div>
<div style="margin-left:67px;">Also, when performing HTTP streaming for which Range cannot be specified, repeat mode will not work effectively.<br></div>

<!-- sce_hd3 -->
<a name="Heading3_5">
<h2>
 5 <!-- hp --><b>Precautions</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_5_1">
<h3>
<a href="#Heading3_5"> 5. </a>1 
<!-- hp1 --><b>Important Precautions</b><br>
</a>
</h3>
<div style="margin-left:50px;">To use libpsmfplayer, the memory to be used internally by the library must be allocated in advance. Also, since the library itself uses 256K bytes of memory, at least 256K bytes of memory must be free in the system.<br><br>In addition, since libpsmfplayer uses 3M bytes of memory for buffer management, this must be set in advance in <a href="../movie/libpsmfplayer-Reference-English.htm#ScePsmfPlayerParam">ScePsmfPlayerParam</a> after memory is allocated.<br><br>If volatile memory is specified as the memory to be used for buffer management or similar tasks, a POWER callback check must be performed to make sure that all processing up to <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerDelete">scePsmfPlayerDelete</a>() has completed before sleep mode is entered. Also, <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSetTempBuf">scePsmfPlayerSetTempBuf</a>() must be called in the callback set by <a href="../movie/libmpeg-Reference-English.htm#sceMpegRingbufferConstruct">sceMpegRingbufferConstruct</a>() which is in the PsmfPlayer source (equivalent to _ringBufCallback() in devkit/src/psmfplayer/libpsmfplayer.c) to set a separate temporary read buffer so that the callback does not read data directly into volatile memory.<br><br>Note that when bilinear interpolation is used, the color conversion expression will be different from that of other modes. Therefore, the picture that is output may also be different. If this happens, adjust the encoding settings for bilinear interpolation and perform encoding again. For details, refer to the "libmpeg Overview" and the description of <a href="../still/JPEGDEC-Reference-English.htm#sceJpegCsc">sceJpegCsc</a>().<br><br><a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerGetVideoData">scePsmfPlayerGetVideoData</a>() may take longer to execute when bilinear interpolation is used. If the processing from getting the data to performing the drawing cannot be done within the same VSYNC interval, excessive calls to <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerUpdate">scePsmfPlayerUpdate</a>() will be needed to adjust libpsmfplayer's internal timer.<br><br>libpsmfplayer has three threads internally, which use three consecutive priority levels beginning with the priority that was specified when <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerCreate">scePsmfPlayerCreate</a>() was executed and below. Be sure to set the priority of the player higher than the priorities of the drawing thread and the audio thread. The values that can be specified as the priority of the libpsmfplayer thread satisfy the following relationship:<br>SCE_KERNEL_USER_HIGHEST_PRIORITY &lt;= thread priority &lt;=  SCE_KERNEL_USER_LOWEST_PRIORITY.<br><br><a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerUpdate">scePsmfPlayerUpdate</a>() must be called every V until the status of the player becomes SCE_PSMFPLAYER_STATUS_DORMANT. If it is not called every V, AV synchronization may not be performed correctly or playback may not terminate normally.<br><br>If <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerStart">scePsmfPlayerStart</a>(), <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerStop">scePsmfPlayerStop</a>(), <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerChangePlayMode">scePsmfPlayerChangePlayMode</a>(), <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectVideo">scePsmfPlayerSelectVideo</a>(), <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectSpecificVideo">scePsmfPlayerSelectSpecificVideo</a>(), <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectAudio">scePsmfPlayerSelectAudio</a>(), or <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSelectSpecificAudio">scePsmfPlayerSelectSpecificAudio</a>() are called during playback, they must be called by a different thread than the one for <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerUpdate">scePsmfPlayerUpdate</a>(). If they are called by the same thread, playback may not terminate normally, a drawing frame may get dropped, or audio output may be lost.<br><br>By default, the maximum PSMF header size that is supported by libpsmfplayer is 512K bytes. If PSMF data has a header that is greater than 512K bytes, an error will occur by default.<br><br>The argument specified in <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerStart">scePsmfPlayerStart</a>() and the pts of video data that can be acquired by <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerGetVideoData">scePsmfPlayerGetVideoData</a>() are calculated by considering the first video data of the PSMF data to be 0.<br>Since PSMF data normally starts at 90000, this must be taken into consideration and entered accordingly.<br>The difference between the start timestamps of libpsmfplayer and the PSMF data can be obtained by calling <a href="../movie/libpsmf-Reference-English.htm#scePsmfGetPresentationStartTime">scePsmfGetPresentationStartTime</a>().<br><br>If <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerSetPsmf">scePsmfPlayerSetPsmf</a>() is called while the status is SCE_PSMFPLAYER_STATUS_DORMANT, SCE_PSMFPLAYER_STATUS_PLAY, or SCE_PSMFPLAYER_STATUS_ERR, the file will be read continuously until a timeout occurs if done over the network, or if the file is read from the UMD&trade;, an infinite number of retries will be attempted. To interrupt this processing, call <a href="../movie/libpsmfplayer-Reference-English.htm#scePsmfPlayerBreak">scePsmfPlayerBreak</a>() to terminate file reading and then terminate processing.<br><br>Although the USER_AGENT name to be used can be changed by changing the library source, as long as there is no specific reason to change it, you should leave the default setting of "PsmfPlayer/1.0.0 libhttp/1.0.0" unchanged.<br><br>If the extension of the specified file is ".edat" when reading from a Memory Stick&trade;, the library will recognize the specified file as an NPDRM file. In this case, you must load the NPDRM module in advance and use <a href="../network/NPDRM-Reference-English.htm#sceNpDrmSetLicenseeKey">sceNpDrmSetLicenseeKey</a>() to set key data when necessary.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_2">
<h3>
<a href="#Heading3_5"> 5. </a>2 
<!-- hp1 --><b>HTTP Server</b><br>
</a>
</h3>
<div style="margin-left:50px;">The HTTP server that is used must support the HTTP/1.0 protocol. In addition, support for the following functions is required or recommended depending on the trick play operations to be used.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_5_2_3">
<div style="margin-left:40px;"><h4><b>Required Support</b><br><br></h4></div></a>


<!-- sce_hd6 -->
<a name="Heading6_5_2_1">
<div style="margin-left:63px;"><h4><b>"Partial GET" Method</b><br><br></h4></a></div>
<div style="margin-left:80px;">To use the following trick play operations, the "partial GET" method must be supported. For details, refer to Section 9.3 of RFC [2616]. Also, if the "partial GET" method is not supported, repeat playback will not work effectively.<br></div>
<div style="margin-left:70px;"><ul>
<li> Fast forward
<li> Rewind
<li> Playback from an intermediate location
</ul></div>

<!-- sce_title -->
<a Name ="HeadingT_5_2_1_4">
<div style="margin-left:40px;"><h4><b>Recommended Support</b><br><br></h4></div></a>


<!-- sce_hd6 -->
<a name="Heading6_5_2_2">
<div style="margin-left:63px;"><h4><b>HEAD Method</b><br><br></h4></a></div>
<div style="margin-left:80px;">Support for the "HEAD" method is recommended from the standpoint of the server load. For details, refer to Section 9.4 of RFC [2616]. If the HEAD method is not supported, it increases the likelihood that the TCP socket will be disconnected on the client side.<br></div>

<!-- sce_hd6 -->
<a name="Heading6_5_2_3">
<div style="margin-left:63px;"><h4><b>Keep-Alive</b><br><br></h4></a></div>
<div style="margin-left:80px;">Support for "Keep-Alive" is recommended from the standpoint of the server load to support dynamic connections. For details, refer to Section 8.1.1 of RFC [2616]. This is particularly effective when using the fast forward and rewind trick play operations.<br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2010 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
