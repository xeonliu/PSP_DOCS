<html lang="jp">
<head>
<title>Thread_Manager-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=Shift_JIS>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&reg; Programmer Tool Runtime Library Release 6.6.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
PSP&reg;スレッドマネージャ仕様
</h1></center>
</a>
<!-- sce_hd1 -->
<div style="margin-left:50px;"><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelThreadInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelThreadInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelThreadInfo {
	SceSize <i>size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUInt <i>attr;</i>
	int <i>status</i>;
	void <i>*entry</i>;
	void <i>*stack</i>;
	int <i>stackSize</i>;
	void <i>*gpReg</i>;
	int <i>initPriority;</i>
	int <i>currentPriority</i>;
	int <i>waitType</i>;
	SceUID <i>waitId;</i>
	int <i>wakeupCount</i>;
	int <i>exitStatus;</i>
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> <i>runClocks;</i>
	SceUInt <i>intrPreemptCount</i>;
	SceUInt <i>threadPreemptCount;</i>
	SceUInt <i>releaseCount;</i>
	int <i>notifycallback</i>;
} <b>SceKernelThreadInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>size</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;この構造体のサイズ(sizeof(SceKernelThreadInfo)の値)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateThread">sceKernelCreateThread</a>()で指定された名前&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>attr</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateThread">sceKernelCreateThread</a>()で設定されたスレッド属性&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>status</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドの状態を以下の値で表します&nbsp;<br>&nbsp;0x01&nbsp;SCE_KERNEL_THS_RUN　RUN状態&nbsp;<br>&nbsp;0x02&nbsp;SCE_KERNEL_THS_READY　READY状態&nbsp;<br>&nbsp;0x04&nbsp;SCE_KERNEL_THS_WAIT　WAIT状態&nbsp;<br>&nbsp;0x08&nbsp;SCE_KERNEL_THS_SUSPEND　SUSPEND状態&nbsp;<br>&nbsp;0x0c&nbsp;SCE_KERNEL_THS_WAITSUSPEND　WAIT-SUSPEND状態&nbsp;<br>&nbsp;0x10&nbsp;SCE_KERNEL_THS_DORMANT　DORMANT状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>entry</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateThread">sceKernelCreateThread</a>()で設定されたエントリアドレス&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>stack</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateThread">sceKernelCreateThread</a>()実行時にカーネルが確保した&nbsp;<br>&nbsp;スタックエリアの先頭アドレス&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>stackSize</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateThread">sceKernelCreateThread</a>()で設定されたスタックサイズ&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>gpReg</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッド起動時のgpレジスタの初期値&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>initPriority</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateThread">sceKernelCreateThread</a>()で設定されたスレッド起動時の優先度&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>currentPriority</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;現在の優先度&nbsp;</td>
</tr>
<tr>
<td rowspan= 25  valign="top">&nbsp;<i>waitType</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドがWAIT状態の時、どのような待ち状態であるかを示します&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_SLEEP&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThread">sceKernelSleepThread</a>()&nbsp;<br>&nbsp;による待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_DELAY&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDelayThread">sceKernelDelayThread</a>()&nbsp;<br>&nbsp;による待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_SEMA&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitSema">sceKernelWaitSema</a>()&nbsp;<br>&nbsp;によるセマフォの待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_MUTEX&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelLockMutex">sceKernelLockMutex</a>()による&nbsp;<br>&nbsp;ミューテックスの待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_LWMUTEX&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelLockLwMutex">sceKernelLockLwMutex</a>()による&nbsp;<br>&nbsp;軽量ミューテックスの待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_EVENTFLAG&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitEventFlag">sceKernelWaitEventFlag</a>()&nbsp;<br>&nbsp;によるイベントフラグの待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_MBX&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReceiveMbx">sceKernelReceiveMbx</a>()&nbsp;<br>&nbsp;によるメッセージボックスの&nbsp;<br>&nbsp;待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_VPL&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelAllocateVpl">sceKernelAllocateVpl</a>()&nbsp;<br>&nbsp;による可変長メモリプール獲得&nbsp;<br>&nbsp;の待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_FPL&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelAllocateFpl">sceKernelAllocateFpl</a>()&nbsp;<br>&nbsp;による固定長メモリブロック&nbsp;<br>&nbsp;獲得の待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_MPP&nbsp;</td>
<td valign="top">&nbsp;メッセージパイプの待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_WAITTHEND&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitThreadEnd">sceKernelWaitThreadEnd</a>()に&nbsp;<br>&nbsp;よる待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_RELTHEVH&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReleaseThreadEventHandler">sceKernelReleaseThreadEventHandler</a>()&nbsp;<br>&nbsp;による待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_DELCALLBACK&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDeleteCallback">sceKernelDeleteCallback</a>()に&nbsp;<br>&nbsp;よる待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_SLEEP_CB&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThreadCB">sceKernelSleepThreadCB</a>()&nbsp;<br>&nbsp;による待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_DELAY_CB&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDelayThreadCB">sceKernelDelayThreadCB</a>()&nbsp;<br>&nbsp;による待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_SEMA_CB&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitSemaCB">sceKernelWaitSemaCB</a>()&nbsp;<br>&nbsp;によるセマフォの待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_MUTEX_CB&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelLockMutexCB">sceKernelLockMutexCB</a>()&nbsp;<br>&nbsp;によるミューテックスの&nbsp;<br>&nbsp;待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_LWMUTEX_CB&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelLockLwMutexCB">sceKernelLockLwMutexCB</a>()&nbsp;<br>&nbsp;による軽量ミューテックスの&nbsp;<br>&nbsp;待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_EVENTFLAG_CB&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitEventFlagCB">sceKernelWaitEventFlagCB</a>()&nbsp;<br>&nbsp;によるイベントフラグの&nbsp;<br>&nbsp;待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_MBX_CB&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReceiveMbxCB">sceKernelReceiveMbxCB</a>()&nbsp;<br>&nbsp;によるメッセージボックスの&nbsp;<br>&nbsp;待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_VPL_CB&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelAllocateVplCB">sceKernelAllocateVplCB</a>()&nbsp;<br>&nbsp;による可変長メモリプール&nbsp;<br>&nbsp;獲得の待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_FPL_CB&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelAllocateFplCB">sceKernelAllocateFplCB</a>()&nbsp;<br>&nbsp;による固定長メモリブロック&nbsp;<br>&nbsp;獲得の待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_MPP_CB&nbsp;</td>
<td valign="top">&nbsp;メッセージパイプの待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSW_WAITTHEND_CB&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitThreadEndCB">sceKernelWaitThreadEndCB</a>()&nbsp;<br>&nbsp;による待ち状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>waitId</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;上記<i>waitType</i>の待ち対象のID(イベントフラグのIDなど)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>wakeupCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;未処理の<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWakeupThread">sceKernelWakeupThread</a>()の回数&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>exitStatus</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドの終了ステータス&nbsp;<br>&nbsp;(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetThreadExitStatus">sceKernelGetThreadExitStatus</a>()の返り値と同じ)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>runClocks</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドが使用したCPUのシステム時間です(1us単位)。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>intrPreemptCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;割り込みによってスレッドがCPU実行権を奪われた回数です。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>threadPreemptCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSignalSema">sceKernelSignalSema</a>()/<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetEventFlag">sceKernelSetEventFlag</a>()などの&nbsp;<br>&nbsp;サービスコールで他のスレッドを操作したことによって、&nbsp;<br>&nbsp;スレッドがCPU実行権を奪われた回数です。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>releaseCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitSema">sceKernelWaitSema</a>()/<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitEventFlag">sceKernelWaitEventFlag</a>()などの&nbsp;<br>&nbsp;サービスコールでスレッドがCPU実行権を放棄した回数です。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>notifycallback</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelNotifyCallback">sceKernelNotifyCallback</a>()で通知されたものの、&nbsp;<br>&nbsp;まだコールバック関数が呼び出しされていない状態であるか示します。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferThreadStatus">sceKernelReferThreadStatus</a>()でスレッドの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferThreadStatus">sceKernelReferThreadStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelThreadRunStatus"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelThreadRunStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドの動作状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelThreadRunStatus {
	SceSize <i>size</i>;
	int<i> status;</i>
	int <i>currentPriority</i>;
	int <i>waitType</i>;
	int <i>waitId;</i>
	int<i> wakeupCount;</i>
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> <i>runClocks</i>;
	SceUInt <i>intrPreemptCount</i>;
	SceUInt <i>threadPreemptCount;</i>
	SceUInt <i>releaseCount;</i>
	int <i>notifycallback</i>;
} <b>SceKernelThreadRunStatus</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelThreadRunStatus)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>status</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドの状態(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a>構造体の<i>status</i>と同じ)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>currentPriority</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;現在の優先度(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a>構造体の<i>currentPriority</i>と同じ)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>waitType</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;待ち状態の種類(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a>構造体の<i>waitType</i>と同じ)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>waitId</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;待ち対象ID(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a>構造体の<i>waitId</i>と同じ)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>wakeupCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;未処理の<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWakeupThread">sceKernelWakeupThread</a>()の回数&nbsp;&nbsp;<br>&nbsp;&nbsp;(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a>構造体の<i>wakeupCount</i>と同じ)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>runClocks</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドが使用したCPUのシステム時間&nbsp;&nbsp;<br>&nbsp;&nbsp;(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a>構造体の<i>runClocks</i>と同じ)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>intrPreemptCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;割り込みによってスレッドがCPU実行権を奪われた回数&nbsp;&nbsp;<br>&nbsp;&nbsp;(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a>構造体の<i>initPreemptCount</i>と同じ)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>threadPreemptCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;他のスレッドの操作によってスレッドがCPU実行権を奪われた回数&nbsp;&nbsp;<br>&nbsp;&nbsp;(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a>構造体の<i>threadPreemptCount</i>と同じ)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>releaseCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドがCPU実行権を放棄した回数&nbsp;&nbsp;<br>&nbsp;&nbsp;(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a>構造体の<i>releaseCount</i>と同じ)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>notifycallback</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック関数が呼び出しされていない状態であるか示します。&nbsp;&nbsp;<br>&nbsp;&nbsp;(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a>構造体の<i>notifycallback</i>と同じ)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferThreadRunStatus">sceKernelReferThreadRunStatus</a>()でスレッドの動作状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferThreadRunStatus">sceKernelReferThreadRunStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelSemaInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelSemaInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>セマフォの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelSemaInfo {
	SceSize <i>size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUInt <i>attr</i>;
	int <i>initCount</i>;
	int <i>currentCount</i>;
	int <i>maxCount</i>;
	int <i>numWaitThreads</i>;
} <b>SceKernelSemaInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelSemaInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateSema">sceKernelCreateSema</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>attr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateSema">sceKernelCreateSema</a>()で設定されたセマフォ属性&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>initCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateSema">sceKernelCreateSema</a>()で設定されたセマフォの初期値&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>currentCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;セマフォの現在値&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>maxCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateSema">sceKernelCreateSema</a>()で設定されたセマフォの最大値&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;セマフォ待ちをしているスレッド数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferSemaStatus">sceKernelReferSemaStatus</a>()でセマフォの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferSemaStatus">sceKernelReferSemaStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelEventFlagInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelEventFlagInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>イベントフラグの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelEventFlagInfo {
	SceSize<i> size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUInt <i>attr</i>;
	SceUInt<i> initPattern</i>;
	SceUInt <i>currentPattern</i>;
	int <i>numWaitThreads</i>;
} <b>SceKernelEventFlagInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelEventFlagInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateEventFlag">sceKernelCreateEventFlag</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>attr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateEventFlag">sceKernelCreateEventFlag</a>()で設定されたイベントフラグ属性&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>initPattern</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;イベントフラグの初期値&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>currentPattern</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;イベントフラグの現在値&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;イベントフラグ待ちをしているスレッド数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferEventFlagStatus">sceKernelReferEventFlagStatus</a>()でイベントフラグの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferEventFlagStatus">sceKernelReferEventFlagStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelMutexInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelMutexInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ミューテックスの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelMutexInfo {
	SceSize <i>size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUInt <i>attr</i>;
	int <i>initCount</i>;
	int <i>currentCount</i>;
	int <i>numWaitThreads</i>;
} <b>SceKernelMutexInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelMutexInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMutex">sceKernelCreateMutex</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>attr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMutex">sceKernelCreateMutex</a>()で設定されたミューテックス属性&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>initCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMutex">sceKernelCreateMutex</a>()で設定されたミューテックスの初期値&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>currentCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ミューテックスの現在ロックカウント値&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ミューテックス待ちをしているスレッド数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferMutexStatus">sceKernelReferMutexStatus</a>()でミューテックスの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferMutexStatus">sceKernelReferMutexStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelLwMutexInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelLwMutexInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>軽量ミューテックスの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelLwMutexInfo {
	SceSize <i>size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUInt <i>attr</i>;
	SceUID <i>uid</i>;
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexWork">SceKernelLwMutexWork</a> <i>branch</i>;
	int <i>initCount</i>;
	int <i>currentCount</i>;
	int <i>numWaitThreads</i>;
} <b>SceKernelLwMutexInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelLwMutexInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateLwMutex">sceKernelCreateLwMutex</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>attr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateLwMutex">sceKernelCreateLwMutex</a>()で設定された軽量ミューテックス属性&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;軽量ミューテックスのプリミティブID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>branch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateLwMutex">sceKernelCreateLwMutex</a>()で設定された軽量ミューテックスの&nbsp;&nbsp;<br>&nbsp;&nbsp;ワークアドレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>initCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateLwMutex">sceKernelCreateLwMutex</a>()で設定された軽量ミューテックスの初期値&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>currentCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;軽量ミューテックスの現在ロックカウント値&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;軽量ミューテックス待ちをしているスレッド数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferLwMutexStatus">sceKernelReferLwMutexStatus</a>()で軽量ミューテックスの状態を参照するために使用する構造体です。<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferLwMutexStatus">sceKernelReferLwMutexStatus</a>()<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferLwMutexStatusById">sceKernelReferLwMutexStatusById</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelMbxInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelMbxInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージボックスの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelMbxInfo {
	SceSize <i>size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUInt <i>attr</i>;
	int <i>numWaitThreads</i>;
	int <i>numMessage</i>;
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMsgPacket">SceKernelMsgPacket</a> <i>*topPacket</i>;
} <b>SceKernelMbxInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelMbxInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMbx">sceKernelCreateMbx</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>attr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMbx">sceKernelCreateMbx</a>()で設定されたメッセージボックス属性&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージ待ちをしているスレッド数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numMessage</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージボックスに残っている受信待メッセージ数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>topPacket</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;先頭の受信待ちメッセージ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferMbxStatus">sceKernelReferMbxStatus</a>()でメッセージボックスの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferMbxStatus">sceKernelReferMbxStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelMppInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelMppInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージパイプの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelMppInfo {
	SceSize <i>size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUInt <i>attr</i>;
	int <i>bufSize</i>;
	int <i>freeSize;</i>
	int <i>numSendWaitThreads;</i>
	int <i>numReceiveWaitThreads</i>;
} <b>SceKernelMppInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelMppInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMsgPipe">sceKernelCreateMsgPipe</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>attr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMsgPipe">sceKernelCreateMsgPipe</a>()で設定されたメッセージパイプ属性&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufSize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージパイプのバッファサイズ(バイト単位)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>freeSize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージパイプのバッファの空きサイズ(バイト単位)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numSendWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージ送信待ちをしているスレッド数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numReceiveWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージ受信待ちをしているスレッド数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferMsgPipeStatus">sceKernelReferMsgPipeStatus</a>()でメッセージパイプの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferMsgPipeStatus">sceKernelReferMsgPipeStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelVplInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelVplInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>可変長メモリプールの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelVplInfo {
	SceSize <i>size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUInt <i>attr</i>;
	int <i>poolSize</i>;
	int <i>freeSize</i>;
	int <i>numWaitThreads</i>;
} <b>SceKernelVplInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelVplInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateVpl">sceKernelCreateVpl</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>attr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateVpl">sceKernelCreateVpl</a>()で設定された可変長メモリプール属性&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>poolSize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリプールから獲得可能な最大可能バイト数これは、&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateVpl">sceKernelCreateVpl</a>()で指定したメモリプールサイズから&nbsp;&nbsp;<br>&nbsp;&nbsp;メモリプールの管理領域の大きさを引いた値になります。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>freeSize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリプール中の未使用メモリバイト数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリ獲得待ちをしているスレッド数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferVplStatus">sceKernelReferVplStatus</a>()で可変長メモリプールの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferVplStatus">sceKernelReferVplStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelFplInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelFplInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>固定長メモリプールの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelFplInfo {
	SceSize <i>size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUInt<i> attr</i>;
	int <i>blockSize</i>;
	int <i>numBlocks</i>;
	int <i>freeBlocks;</i>
	int <i>numWaitThreads</i>;
} <b>SceKernelFplInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelFplInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateFpl">sceKernelCreateFpl</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>attr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateFpl">sceKernelCreateFpl</a>()で設定された固定長メモリプール属性&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>blockSize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateFpl">sceKernelCreateFpl</a>()で設定されたメモリブロックサイズ(バイト数)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numBlocks</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateFpl">sceKernelCreateFpl</a>()で設定されたメモリブロック数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>freeBlocks</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリプール中の未使用ブロック数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリ獲得待ちをしているスレッド数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferFplStatus">sceKernelReferFplStatus</a>()で固定長メモリプールの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferFplStatus">sceKernelReferFplStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelTlsplInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelTlsplInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>TLSメモリプールの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelTlsplInfo {
	SceSize <i>size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUInt<i> attr</i>;
	int <i>blockSize</i>;
	int <i>numBlocks</i>;
	int <i>freeBlocks;</i>
	int <i>numWaitThreads</i>;
} <b>SceKernelTlsplInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelTlsplInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateTlspl">sceKernelCreateTlspl</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>attr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateTlspl">sceKernelCreateTlspl</a>()で設定されたTLSメモリプール属性&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>blockSize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateTlspl">sceKernelCreateTlspl</a>()で設定されたTLSメモリブロックサイズ&nbsp;&nbsp;<br>&nbsp;&nbsp;(バイト数)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numBlocks</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateTlspl">sceKernelCreateTlspl</a>()で設定されたTLSメモリブロック数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>freeBlocks</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;TLSメモリプール中の未使用ブロック数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリ獲得待ちをしているスレッド数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferTlsplStatus">sceKernelReferTlsplStatus</a>()でTLSメモリプールの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferTlsplStatus">sceKernelReferTlsplStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelThreadEventHandlerInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelThreadEventHandlerInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドイベントハンドラの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelThreadEventHandlerInfo {
	SceSize<i> size;</i>
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUID <i>threadId</i>;
	int <i>mask</i>;
	int (*<i>handler</i>)(int, SceUID, void *);
	void *<i>common</i>;
} <b>SceKernelThreadEventHandlerInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelThreadEventHandlerInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>threadId</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>()で指定された対象スレッド&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mask</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>()で指定されたイベントマスク&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>handler</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>()で指定されたハンドラ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>()で指定された<i>common</i>引数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferThreadEventHandlerStatus">sceKernelReferThreadEventHandlerStatus</a>()でスレッドイベントハンドラの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferThreadEventHandlerStatus">sceKernelReferThreadEventHandlerStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelCallbackInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelCallbackInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コールバックの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelCallbackInfo {
	SceSize <i>size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	SceUID <i>threadId</i>;
	int (*<i>callback</i>)(int, int, void *);
	void *<i>common</i>;
	int <i>notifyCount</i>;
	int <i>notifyArg</i>;
} <b>SceKernelCallbackInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelCallbackInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>threadId</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;このコールバックが通知を行うスレッドのスレッドID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>callback</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>()で登録されたコールバック関数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>()で登録された<i>common</i>引数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>notifyCount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;このコールバックIDに対してまだコールバック関数が呼び出されずに&nbsp;&nbsp;<br>&nbsp;&nbsp;遅延している<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelNotifyCallback">sceKernelNotifyCallback</a>()の回数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>notifyArg</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;このコールバックIDに対して<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelNotifyCallback">sceKernelNotifyCallback</a>()で与えられた引数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferCallbackStatus">sceKernelReferCallbackStatus</a>()でコールバックの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferCallbackStatus">sceKernelReferCallbackStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelAlarmInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelAlarmInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>アラームの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelAlarmInfo {
	SceSize<i> size</i>;
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> <i>schedule</i>;
	SceUInt (*<i>handler</i>)(void *);
	void *<i>common</i>;
} <b>SceKernelAlarmInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelAlarmInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>schedule</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;このアラームハンドラを呼び出す予定のシステム時刻&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>handler</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;設定されているアラームハンドラへのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetAlarm">sceKernelSetAlarm</a>()で指定された<i>common</i>引数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferAlarmStatus">sceKernelReferAlarmStatus</a>()でアラームの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferAlarmStatus">sceKernelReferAlarmStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelVTimerInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelVTimerInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelVTimerInfo {
	SceSize <i>size</i>;
	char <i>name</i>[SceUID_NAME_MAX + 1];
	int <i>active</i>;
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> <i>base;</i>
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> <i>current</i>;
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> <i>schedule</i>;
	int (*<i>handler</i>)(SceUID, <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *, <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *, void *);
	void <i>*common</i>;
} <b>SceKernelVTimerInfo</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelVTimerInfo)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateVTimer">sceKernelCreateVTimer</a>()で指定された名前&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>active</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマが動作中なら1,停止中なら0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>base</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマの基準時刻&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>current</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマの現在時刻&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>schedule</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマのハンドラ起動予定時刻&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>handler</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマのハンドラ関数へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマのハンドラ関数へ渡される<i>common</i>引数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferVTimerStatus">sceKernelReferVTimerStatus</a>()で仮想タイマの状態を参照するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferVTimerStatus">sceKernelReferVTimerStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelSystemStatus"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelSystemStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>システムの状態<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelSystemStatus {
	SceSize<i> size</i>;
	SceUInt <i>status</i>;
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> <i>idleClocks</i>;
	SceUInt <i>comesOutOfIdleCount</i>;
	SceUInt<i> threadSwitchCount</i>;
	SceUInt <i>vfpuSwitchCount</i>;
} <b>SceKernelSystemStatus</b>;
</font></pre></div>
<div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>size</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;この構造体のサイズ(sizeof(SceKernelSystemStatus)の値)&nbsp;</td>
</tr>
<tr>
<td rowspan= 5  valign="top">&nbsp;<i>status</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;以下のいずれかのシステムの状態。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSS_THREAD&nbsp;</td>
<td valign="top">&nbsp;スレッド実行中、&nbsp;<br>&nbsp;切り替え可能状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSS_DISABLEDISPATCH&nbsp;</td>
<td valign="top">&nbsp;スレッド実行中、切り替え&nbsp;<br>&nbsp;禁止、割り込み可能状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSS_DISABLEINTR&nbsp;</td>
<td valign="top">&nbsp;スレッド実行中、切り替え&nbsp;<br>&nbsp;禁止、割り込み禁止状態&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TSS_NOTHREAD&nbsp;</td>
<td valign="top">&nbsp;スレッド独立部実行中&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>idleClocks</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;実行するスレッドのなかった期間の累積システム時間(1us単位)。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>comesOutOfIdleCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;システムが実行するスレッドのない状態から実行する&nbsp;<br>&nbsp;スレッドのある状態に遷移した回数。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>threadSwitchCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;システムがスレッドのコンテキストスイッチを行った全回数。&nbsp;<br>&nbsp;含む、上記(<i>comesOutOfIdleCount</i>)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>vfpuSwitchCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;システムがVFPUのコンテキストスイッチを行った全回数。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferSystemStatus">sceKernelReferSystemStatus</a>()でシステムの状態を参照するために使用する構造体です。<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferSystemStatus">sceKernelReferSystemStatus</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelSysClock"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelSysClock<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>システム時刻の構造体<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelSysClock {
	SceUInt <i>low</i>;
	SceUInt <i>hi</i>;
} <b>SceKernelSysClock</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;システム時刻の下位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;システム時刻の上位32bit&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">システム時刻を格納するのに用いられる構造体です。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelThreadOptParam"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelThreadOptParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドの付加データ<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelThreadOptParam {
	SceSize <i>size</i>;
} <b>SceKernelThreadOptParam</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelThreadOptParam)の値)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateThread">sceKernelCreateThread</a>()でスレッドを生成する場合に与える付加データを格納するために使用する構造体です。<br>将来の拡張のために用意されています。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateThread">sceKernelCreateThread</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelSemaOptParam"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelSemaOptParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>セマフォの付加データ<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelSemaOptParam {
	SceSize <i>size</i>;
} <b>SceKernelSemaOptParam</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelSemaOptParam)の値)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateSema">sceKernelCreateSema</a>()でセマフォを生成する場合に与える付加データを格納するために使用する構造体です。<br>将来の拡張のために用意されています。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateSema">sceKernelCreateSema</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelEventFlagOptParam"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelEventFlagOptParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>イベントフラグの追加データ<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelEventFlagOptParam {
	SceSize <i>size</i>;
} <b>SceKernelEventFlagOptParam</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelEventFlagOptParam)の値)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateEventFlag">sceKernelCreateEventFlag</a>()でイベントフラグを生成する場合に与える付加データを格納するために使用する構造体です。<br>将来の拡張のために用意されています。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateEventFlag">sceKernelCreateEventFlag</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelMutexOptParam"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelMutexOptParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ミューテックスの追加データ<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelMutexOptParam {
	SceSize <i>size</i>;
} <b>SceKernelMutexOptParam</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelMutexOptParam)の値)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMutex">sceKernelCreateMutex</a>()でミューテックスを生成する場合に与える付加データを格納するために使用する構造体です。<br>将来の拡張のために用意されています。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMutex">sceKernelCreateMutex</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelLwMutexWork"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelLwMutexWork<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>軽量ミューテックスのワークエリア<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelLwMutexWork {
	<a href="../kernel/Types-Reference-Japanese.htm#SceUInt32">SceUInt32</a> <i>opaque</i>[8];
} <b>SceKernelLwMutexWork</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>opaque</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;軽量ミューテックスのワークエリア&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">軽量ミューテックスが使用するワークエリアを格納するために使用する構造体です。軽量ミューテックスのワークエリアは、ユーザメモリ空間に確保されなくてはなりません。軽量ミューテックスに対する操作は、すべてSceKernelLwMutexWork構造体を経由して行われます。<br><br>SceKernelLwMutexWork構造体はカーネルがワークエリアとして使用するため、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateLwMutex">sceKernelCreateLwMutex</a>()で軽量ミューテックスを作成したら、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDeleteLwMutex">sceKernelDeleteLwMutex</a>()で削除されるまでの間、その内容をユーザプログラムは直接参照/操作してはいけません。アドレスを移動することもできません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateLwMutex">sceKernelCreateLwMutex</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelLwMutexOptParam"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelLwMutexOptParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>軽量ミューテックスの追加データ<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelLwMutexOptParam {
	SceSize <i>size</i>;
} <b>SceKernelLwMutexOptParam</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelLwMutexOptParam)の値)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateLwMutex">sceKernelCreateLwMutex</a>()で軽量ミューテックスを生成する場合に与える付加データを格納するために使用する構造体です。<br>将来の拡張のために用意されています。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateLwMutex">sceKernelCreateLwMutex</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelMbxOptParam"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelMbxOptParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージボックスの付加データ<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelMbxOptParam {
	SceSize <i>size</i>;
} <b>SceKernelMbxOptParam</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelMbxOptParam)の値)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMbx">sceKernelCreateMbx</a>()でメッセージボックスを生成する場合に与える付加データを格納するために使用する構造体です。<br>将来の拡張のために用意されています。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMbx">sceKernelCreateMbx</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelMsgPacket"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelMsgPacket<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージパケットヘッダの構造体<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelMsgPacket {
	struct SceKernelMsgPacket *<i>next</i>;
	SceUChar <i>msgPriority</i>;
	SceUChar <i>dummy</i>[3];
} <b>SceKernelMsgPacket</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>next</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;次のメッセージパケットへのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>msgPriority</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージの優先度&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>dummy</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;システム予約&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">メッセージボックスが使用するメッセージパケットのヘッダ部に使用する構造体です。<br>アプリケーションプログラムはこの構造体にメッセージボディを付加してメッセージパケットの送受信を行います。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSendMbx">sceKernelSendMbx</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReceiveMbx">sceKernelReceiveMbx</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelPollMbx">sceKernelPollMbx</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelMppOptParam"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelMppOptParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージパイプの付加データ<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelMppOptParam {
	SceSize <i>size</i>;
} <b>SceKernelMppOptParam</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelMppOptParam)の値)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMsgPipe">sceKernelCreateMsgPipe</a>()でメッセージパイプを生成する場合に与える付加データを格納するために使用する構造体です。<br>将来の拡張のために用意されています。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateMsgPipe">sceKernelCreateMsgPipe</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelVplOptParam"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelVplOptParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>可変長メモリプールの付加データ<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelVplOptParam {
	SceSize <i>size</i>;
} <b>SceKernelVplOptParam</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelVplOptParam)の値)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateVpl">sceKernelCreateVpl</a>()で可変長メモリプールを生成する場合に与える付加データを格納するために使用する構造体です。<br>将来の拡張のために用意されています。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateVpl">sceKernelCreateVpl</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelFplOptParam"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelFplOptParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>固定長メモリプールの付加データ<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelFplOptParam {
	SceSize <i>size</i>;
	SceSize <i>alignment;</i>
} <b>SceKernelFplOptParam</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelFplOptParam)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>alignment</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;生成する固定長メモリプールのアラインメント&nbsp;&nbsp;<br>&nbsp;&nbsp;0を指定した場合はアラインメント指定なしとして扱いますが、&nbsp;&nbsp;<br>&nbsp;&nbsp;その場合も最低限4バイトアラインメントが保証されます。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateFpl">sceKernelCreateFpl</a>()で固定長メモリプールを生成する場合に与える付加データを格納するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateFpl">sceKernelCreateFpl</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelTlsplOptParam"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelTlsplOptParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>TLSメモリプールの付加データ<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelTlsplOptParam {
	SceSize <i>size</i>;
	SceSize <i>alignment;</i>
} <b>SceKernelTlsplOptParam</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelTlsplOptParam)の値)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>alignment</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;生成するTLSメモリプールのアラインメント&nbsp;&nbsp;<br>&nbsp;&nbsp;0を指定した場合はアラインメント指定なしとして扱いますが、&nbsp;&nbsp;<br>&nbsp;&nbsp;その場合も最低限4バイトアラインメントが保証されます。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateTlspl">sceKernelCreateTlspl</a>()でTLSメモリプールを生成する場合に与える付加データを格納するために使用する構造体です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateTlspl">sceKernelCreateTlspl</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceKernelVTimerOptParam"></a>
<table width="100%"><td width="70%"><font size=6>SceKernelVTimerOptParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマの付加データ<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
typedef struct SceKernelVTimerOptParam {
	SceSize <i>size</i>;
} <b>SceKernelVTimerOptParam</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;この構造体のサイズ(sizeof(SceKernelVTimerOptParam)の値)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateVTimer">sceKernelCreateVTimer</a>()で仮想タイマを生成する場合に与える付加データを格納するために使用する構造体です。<br>将来の拡張のために用意されています。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateVTimer">sceKernelCreateVTimer</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッド生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelCreateThread</b>(
	const char *<i>name</i>,
	int (*<i>entry</i>)(SceSize, void *),
	int <i>initPriority</i>,
	SceSize <i>stackSize</i>,
	SceUInt <i>attr</i>,
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadOptParam">SceKernelThreadOptParam</a> *<i>optParam</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドの名前を指定します。デバッグ時にオペレータが見て&nbsp;<br>&nbsp;識別する目的で使うので、ユニークな名前であるかのチェックは特にしません。&nbsp;<br>&nbsp;名前の最大長は31バイトです。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>entry</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドのエントリアドレスを指定します。スレッドのエントリポイントとなる&nbsp;<br>&nbsp;関数は二つの引数でメモリブロックのデータを受け取ることができます。&nbsp;<br>&nbsp;引数は後述の<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelStartThread">sceKernelStartThread</a>()で与えられます。スレッドは&nbsp;<br>&nbsp;この関数からリターンすることで終了し、関数の返り値がスレッドの&nbsp;<br>&nbsp;終了ステータスとなります。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>initPriority</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッド起動時(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelStartThread">sceKernelStartThread</a>())の優先度を指定します。&nbsp;<br>&nbsp;数の小さい方が高い優先度となります。&nbsp;<br>&nbsp;SCE_KERNEL_USER_LOWEST_PRIORITY(=111)から&nbsp;<br>&nbsp;SCE_KERNEL_USER_HIGHEST_PRIORITY(=16)の範囲が使用できます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>stackSize</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドの必要スタックサイズをbyte単位で指定します。&nbsp;<br>&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelStartThread">sceKernelStartThread</a>()で与えられる引数ブロックがスタック上にコピー&nbsp;<br>&nbsp;されるので、この分の余裕を見込んでスタックサイズを指定してください。&nbsp;<br>&nbsp;512byte未満のスタックサイズを指定した場合はエラーになります。&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;<i>attr</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;属性を論理和で複数指定できます。現在以下の属性が定義されています。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TH_CLEAR_STACK&nbsp;</td>
<td valign="top">&nbsp;スレッド削除時に、スタックエリア&nbsp;<br>&nbsp;を0クリアすることを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TH_LOW_STACK&nbsp;</td>
<td valign="top">&nbsp;スタックエリアをメモリの&nbsp;<br>&nbsp;上位アドレス(アドレスの大きい方)&nbsp;<br>&nbsp;からでなく、下位アドレス&nbsp;<br>&nbsp;(アドレスの若い方)から確保する&nbsp;<br>&nbsp;ことを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TH_USE_VFPU&nbsp;</td>
<td valign="top">&nbsp;VFPUにアクセス可能であること&nbsp;<br>&nbsp;を指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>optParam</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;将来の拡張用の引数です。NULLを指定して下さい。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;thid(thid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_STACK_SIZE">SCE_KERNEL_ERROR_ILLEGAL_STACK_SIZE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PRIORITY">SCE_KERNEL_ERROR_ILLEGAL_PRIORITY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ENTRY">SCE_KERNEL_ERROR_ILLEGAL_ENTRY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">スレッドを生成します。生成するスレッドに対してスレッド管理領域を割り付けその初期設定を行い、スタック領域を確保します。生成するスレッドの情報を引数で指定し、返り値にスレッドのIDが返ってきます。生成されたスレッドは、DORMANT状態になります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadOptParam">SceKernelThreadOptParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッド削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteThread </b>(
	SceUID <i>thid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除するスレッドのIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NOT_DORMANT">SCE_KERNEL_ERROR_NOT_DORMANT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定するスレッドを削除します。それにともない、スタック領域とスレッド管理領域を解放します。対象のスレッドは、DORMANT状態でなければなりません。<br>自スレッドがDORMANT状態であることはありえないので、自スレッドを対象スレッドにすることはできません(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NOT_DORMANT">SCE_KERNEL_ERROR_NOT_DORMANT</a>エラーになります)。自スレッドを削除するには、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitDeleteThread">sceKernelExitDeleteThread</a>()を使います。<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelStartThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelStartThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッド起動<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelStartThread </b>(
	SceUID <i>thid</i>,
	SceSize <i>argSize</i>,
	const void *<i>argBlock</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;起動するスレッドのIDを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argSize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドに渡す引数のサイズを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argBlock</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドに渡す引数のデータを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;このデータはスレッドのスタックにコピーされます。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_THID">SCE_KERNEL_ERROR_ILLEGAL_THID</a>(SCE_KERNEL_TH_SELFは指定できない)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NOT_DORMANT">SCE_KERNEL_ERROR_NOT_DORMANT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定するスレッドの実行を開始し、READY状態にします。<i>argSize</i>, <i>argBlock</i>によって指定された引数ブロックは、スレッドのスタック上にコピーされ、<i>argSize</i>はそのままスレッドのエントリ関数の第一引数に渡され、エントリ関数の第二引数には、スタック上にコピーされた引数ブロックのアドレスが渡されます。<br>対象スレッドの優先度は、スレッド生成時に指定されたinitPriorityの値になります。このサービスコールは起動要求のキューイングは行わないません。すなわち、対象スレッドがDORMANT状態でない場合はこのサービスコールは無視され、発行スレッドに<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NOT_DORMANT">SCE_KERNEL_ERROR_NOT_DORMANT</a>エラーが返ります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelExitThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelExitThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>自スレッド終了<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelExitThread </b>(
	int <i>exitStatus</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)<br>マルチスレッドセーフである<br>要ディスパッチ許可<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>exitStatus</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;自スレッドの終了ステータスに設定する値(正の値)を指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CPUDI">SCE_KERNEL_ERROR_CPUDI</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">自スレッドを正常終了させ、DORMANT状態へと移行させます。<br>終了するスレッドがロックしたままになっていたミューテックスは、自動的にアンロックされます。<br><br>sceKernelExitThread()は、発行元のコンテキストに戻らないサービスコールです。終了するスレッドが獲得した資源(メモリ、セマフォ等)を自動的に解放するということはありません。終了したスレッドを<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelStartThread">sceKernelStartThread</a>()で再起動すると、スレッドの優先度などのスレッド管理領域に含まれている情報は再設定されます。終了時のものを継承することはありません。<br>スレッドが終了する際、<i>exitStatus</i>がそのスレッドの終了ステータスとなります。<br>スレッドがsceKernelExitThread()を使用せずにエントリ関数からのリターンによって終了した場合は、エントリ関数の返り値が終了ステータスとなります。終了ステータスは正の値のみを指定することができます。負の値を指定した場合は、スレッドは終了しますが終了ステータスは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT">SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT</a>に置き換えられます。<br>スレッドの終了ステータスは、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetThreadExitStatus">sceKernelGetThreadExitStatus</a>()や<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferThreadStatus">sceKernelReferThreadStatus</a>()によって取得することができる他、そのスレッドの終了を他スレッドが<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitThreadEnd">sceKernelWaitThreadEnd</a>()で待っていた場合に、その返り値によって取得することができます。<br>スレッドの終了ステータスは、スレッドが終了してDORMANT状態にある間は保存されますが、スレッドを<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelStartThread">sceKernelStartThread</a>()で再起動したり、削除したりした場合は値が失われます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitThreadEnd">sceKernelWaitThreadEnd</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetThreadExitStatus">sceKernelGetThreadExitStatus</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelExitDeleteThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelExitDeleteThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>自スレッド終了と削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelExitDeleteThread </b>(
	int <i>exitStatus</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)<br>マルチスレッドセーフである<br>要ディスパッチ許可<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>exitStatus</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;自スレッドの終了ステータスに設定する値(正の値)を指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CPUDI">SCE_KERNEL_ERROR_CPUDI</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">自スレッドを正常終了し、さらに削除します。sceKernelExitDeleteThread()は、発行元のコンテキストに戻らないサービスコールです。終了するスレッドが獲得した資源(メモリ、セマフォ等)を自動的に解放するということはありません。ただしミューテックスに限り、終了するスレッドがロックしたままにになっていたミューテックスは自動的にアンロックされます。この場合もミューテックスはアンロックされるだけで削除はされません。<br><br>スレッドが終了する際、<i>exitStatus</i>がそのスレッドの終了ステータスとなります。<br>終了ステータスは正の値のみを指定することができます。負の値を指定した場合は、スレッドは終了しますが終了ステータスは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT">SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT</a>に置き換えられます。<br>sceKernelExitDeleteThread()はDORMANT状態を経ずにスレッドの削除が直接行われるため、このサービスコールによって終了したスレッドの終了ステータスを<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetThreadExitStatus">sceKernelGetThreadExitStatus</a>()や<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferThreadStatus">sceKernelReferThreadStatus</a>()によって取得することはできません。スレッドの終了を<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitThreadEnd">sceKernelWaitThreadEnd</a>()で待っていた場合に限り、返り値によって終了ステータスを取得することが可能です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitThreadEnd">sceKernelWaitThreadEnd</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelTerminateThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelTerminateThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>他スレッド強制終了<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelTerminateThread </b>(
	SceUID <i>thid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)<br>マルチスレッドセーフである<br>要ディスパッチ許可<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;強制終了するスレッドのスレッドID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CPUDI">SCE_KERNEL_ERROR_CPUDI</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_THID">SCE_KERNEL_ERROR_ILLEGAL_THID</a>(対象スレッドは自スレッドだった)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_DORMANT">SCE_KERNEL_ERROR_DORMANT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定した他スレッドを強制的に終了させ、DORMANT状態へと移行させます。対象スレッドがWAIT状態(SUSPEND状態を含む)にあった場合でも、対象スレッドは待ち解除となってDORMANT状態に移行します。また、対象スレッドが何らかの待ち行列(セマフォ待ち等)につながれていた場合は、その待ち行列から削除されます。<i>thid</i>で自スレッドを指定することは許されず、エラーになります。終了するスレッドが獲得した資源(メモリ、セマフォ等)を自動的に解放するということはありません。ただしミューテックスに限り、終了するスレッドがロックしたままにになっていたミューテックスは自動的にアンロックされます。この場合もミューテックスはアンロックされるだけで削除はされません。<br><br>終了させたスレッドを<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelStartThread">sceKernelStartThread</a>()で再起動すると、スレッドの優先度などのスレッド管理領域に含まれている情報は再設定されます。終了時のものを継承することはありません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitThreadEnd">sceKernelWaitThreadEnd</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelTerminateDeleteThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelTerminateDeleteThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>他スレッド強制終了と削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelTerminateDeleteThread </b>(
	SceUID <i>thid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)<br>マルチスレッドセーフである<br>要ディスパッチ許可<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;強制終了するスレッドのスレッドID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CPUDI">SCE_KERNEL_ERROR_CPUDI</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_THID">SCE_KERNEL_ERROR_ILLEGAL_THID</a>(対象スレッドは自スレッドだった)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定した他スレッドを強制的に終了させ、さらに削除します。<i>thid</i>で指定した他スレッドが既にDORMANT状態の時は単に削除します。終了させられるスレッドがロックしたままになっていたミューテックスは自動的にアンロックされます。<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitThreadEnd">sceKernelWaitThreadEnd</a>()<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSuspendDispatchThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSuspendDispatchThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ディスパッチ可否状態の保存と禁止<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSuspendDispatchThread </b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">前の状態<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CPUDI">SCE_KERNEL_ERROR_CPUDI</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">スレッドの切り替えを禁止し、禁止操作を行う前の可否状態を返り値として返します。これ以後、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelResumeDispatchThread">sceKernelResumeDispatchThread</a>()が実行されるまでの期間、スレッドの切り替えは禁止され、自スレッドが、RUN状態からREADY状態に移ることはなくなります。また、WAIT状態に移ることもできなくなります。<br>スレッドの切り替え禁止状態であっても割り込み禁止ではありません。<br>割り込みは通常どおりに受け付けられ、割り込みルーチンに制御が移ります。スレッドの切り替え禁止状態は、以下のような動作をします。<br><br></div>
</ol>
<div style="margin-left:35px;"><ul>
<li> 割り込みハンドラまたは実行中のスレッド(sceKernelSuspendDispatchThread()を実行したスレッド)から発行されたサービスコールによって、実行中のスレッドからCPU使用権が奪われるべき状況となっても、新たに実行すべき状態となったスレッドへの切り替えがおこりません。新たに実行すべき状態となったスレッドへの切り替えは、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelResumeDispatchThread">sceKernelResumeDispatchThread</a>()によって切り替え禁止状態が解除されるまで遅延されます。
<li> 切り替え禁止状態で起動された割り込みハンドラ中から、実行中のスレッド(sceKernelSuspendDispatchThread()を実行したスレッド)に対して<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSuspendThread">sceKernelSuspendThread</a>()や<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateThread">sceKernelTerminateThread</a>()を発行した場合、スレッド状態の遷移は切り替え禁止状態が解除されるまで遅延されます。
<li> sceKernelSuspendDispatchThread()を実行したスレッドが、自スレッドをWAIT状態に移す可能性のあるサービスコール(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThread">sceKernelSleepThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitSema">sceKernelWaitSema</a>()など)を発行した場合は、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a>のエラーになります。
<li> <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitThread">sceKernelExitThread</a>()や<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitDeleteThread">sceKernelExitDeleteThread</a>()サービスコールは元のコンテキストに戻らないサービスコールなのでsceKernelSuspendDispatchThread()を実行したスレッドが、これらを発行した場合、エラーがコンソールに表示されたのち、スレッド切り替え禁止状態が解除されます。
</ul></div>
<div style="margin-left:50px;"><br><a href="../kernel/Interrupt_Manager-Reference-Japanese.htm#sceKernelCpuSuspendIntr">sceKernelCpuSuspendIntr</a>()によって割り込みおよびスレッドの切り替え禁止状態にある間にsceKernelSuspendDispatchThread()を発行すると、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CPUDI">SCE_KERNEL_ERROR_CPUDI</a>のエラーになります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelResumeDispatchThread">sceKernelResumeDispatchThread</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelResumeDispatchThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelResumeDispatchThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ディスパッチ可否状態の復帰<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelResumeDispatchThread </b>(
	int <i>olddisp</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>olddisp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSuspendDispatchThread">sceKernelSuspendDispatchThread</a>()で取得した前の可否状態を渡します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CPUDI">SCE_KERNEL_ERROR_CPUDI</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">スレッド切り替えの可否状態を<i>olddisp</i>に退避してある以前の状態に復帰します。以下のように<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSuspendDispatchThread">sceKernelSuspendDispatchThread</a>()と対にして使います。<br><br></div>
        <div style="margin-left:50px;"><pre><font size=3>int olddisp;
olddisp = <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSuspendDispatchThread">sceKernelSuspendDispatchThread</a>();
/* ディスパッチ禁止期間 */
sceKernelResumeDispatchThread( olddisp );
</font></pre></div>
<div style="margin-left:50px;"><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSuspendDispatchThread">sceKernelSuspendDispatchThread</a>()

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelChangeCurrentThreadAttr"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelChangeCurrentThreadAttr<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドの属性の変更<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelChangeCurrentThreadAttr </b>(
	SceUInt <i>clearAttr</i>,
	SceUInt <i>setAttr</i>
);
</font></pre></div>
<div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clearAttr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;解除したい属性を指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>setAttr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;設定したい属性を指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">現在実行中のスレッドの作成時に指定した属性の変更を指定します。現在VFPUのアクセス権(SCE_KERNEL_TH_USE_VFPU)の変更のみが可能です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateThread">sceKernelCreateThread</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelChangeThreadPriority"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelChangeThreadPriority<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドの優先度変更<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelChangeThreadPriority </b>(
	SceUID <i>thid</i>,
	int <i>priority</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;優先度を変更するスレッドのスレッドIDを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_KERNEL_TH_SELF(=0)で、自スレッドを指定できます。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>priority</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変更後の優先度を指定します。スレッドプライオリティは、数の小さい方が高い&nbsp;&nbsp;<br>&nbsp;&nbsp;優先度となります。SCE_KERNEL_USER_LOWEST_PRIORITY(=111)から&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_KERNEL_USER_HIGHEST_PRIORITY(=16)の範囲が使用できます。&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_KERNEL_TPRI_RUN(=0)を指定することにより、自スレッドの現在の&nbsp;&nbsp;<br>&nbsp;&nbsp;優先度を指定できます。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_THID">SCE_KERNEL_ERROR_ILLEGAL_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PRIORITY">SCE_KERNEL_ERROR_ILLEGAL_PRIORITY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_DORMANT">SCE_KERNEL_ERROR_DORMANT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定されたスレッドの優先度を<i>priority</i>に変更します。このサービスコールで変更した優先度は、再び変更しない限りスレッドが終了するまで有効です。スレッドがDORMANT状態になると、終了時のスレッドの優先度は捨てられて、次にスレッドが起動されたときの優先度はスレッド生成時に指定された起動時優先度(initPriority)になります。対象スレッドがレディキューや何らかの待ち行列につながれていた場合には、このサービスコールによって行列の順番が変ることがあります。レディキューの中のスレッド(RUN状態のスレッドも含む)または優先度順の待ち行列の中のスレッドに対してsceKernelChangeThreadPriority()が実行された場合、対象スレッドはキューの該当優先度の部分の最後尾に移動します。以前と同じ優先度を指定した場合も、同様にキューのその優先度の部分の最後尾に移動します。したがって、自スレッドを対象として現在と同じ優先度のsceKernelChangeThreadPriority()を発行することにより、実行権の放棄を行うことができます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetThreadCurrentPriority">sceKernelGetThreadCurrentPriority</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRotateThreadReadyQueue">sceKernelRotateThreadReadyQueue</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelRotateThreadReadyQueue"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelRotateThreadReadyQueue<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドレディキュー回転<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelRotateThreadReadyQueue </b>(
	int <i>priority</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>priority</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;キュー回転の対象となる優先度を指定します。スレッドプライオリティは、&nbsp;&nbsp;<br>&nbsp;&nbsp;数の小さい方が高い優先度となります。&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_KERNEL_USER_LOWEST_PRIORITY(=111)から&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_KERNEL_USER_HIGHEST_PRIORITY(=16)の範囲が指定できます。&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_KERNEL_TPRI_RUN(=0)を指定することにより、自スレッドの現在の&nbsp;&nbsp;<br>&nbsp;&nbsp;優先度を指定できます。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PRIORITY">SCE_KERNEL_ERROR_ILLEGAL_PRIORITY</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">レディキューの中で<i>priority</i>で指定された優先度の部分を回転します。<br>指定された優先度のレディキューの先頭につながれているスレッドをレディキューの最後につなぎ替え、同一優先度のスレッドの実行を切り替えます。スレッド部から発行されるsceKernelRotateThreadReadyQueue()では、<i>priority</i>にSCE_KERNEL_TPRI_RUN(=0)を指定することにより、自スレッドのと同じ優先度のレディキューを回転させることができます。sceKernelRotateThreadReadyQueue()の<i>priority</i>にSCE_KERNEL_TPRI_RUNまたは自スレッドの優先度を指定した場合には、自スレッドがそのレディキューの最後尾に回ることになります。すなわち自ら実行権を放棄するために、sceKernelRotateThreadReadyQueue()を発行することができます。なおこのサービスコールの説明における「レディキュー」は、RUN状態のスレッドも含んだものと考えます。指定した優先度のレディキューにスレッドが無い場合は何も起きずエラーにもなりません。タイマハンドラなどのスレッド独立部からsceKernelRotateThreadReadyQueue(SCE_KERNEL_TPRI_RUN)を発行することも可能で、その場合には、その時実行中のスレッドを含むレディキューまたはレディキュー中の最高優先度のスレッドを含むレディキューを回転させます。<br>通常この二つは一致していますが、スレッドのディスパッチが遅延されている状態においては、一致しない場合があります。この場合、最高優先度のスレッドを含むレディキューを回転させます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelChangeThreadPriority">sceKernelChangeThreadPriority</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReleaseWaitThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReleaseWaitThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>他スレッドのWAIT状態の強制解除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>include &lt;kernel.h&gt;
int <b>sceKernelReleaseWaitThread </b>(
	SceUID <i>thid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;WAIT状態を強制解除するスレッドのスレッドIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NOT_WAIT">SCE_KERNEL_ERROR_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_THID">SCE_KERNEL_ERROR_ILLEGAL_THID</a>(対象スレッドは自スレッドだった)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定されたスレッドがWAIT状態にある場合にはそれを強制的に解除します。<br>解除されたスレッドは、WAIT状態に入ったサービスコール(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThread">sceKernelSleepThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitEventFlag">sceKernelWaitEventFlag</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitSema">sceKernelWaitSema</a>()等)から戻り、エラーコード<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a>を受け取ります。sceKernelReleaseWaitThread()では、WAIT状態解除要求のキューイングは行いません。<br>すなわち、<i>thid</i>で指定されたスレッドが既にWAIT状態であればそのWAIT状態を解除しますが、対象スレッドがWAIT状態でなければ発行元にエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NOT_WAIT">SCE_KERNEL_ERROR_NOT_WAIT</a>がかえります。sceKernelReleaseWaitThread()では、SUSPEND状態の解除は行いません。<br>二重待ち状態(WAIT-SUSPEND)のスレッドを対象としてsceKernelReleaseWaitThread()を発行すると、対象スレッドは、SUSPEND状態になります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetThreadId"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetThreadId<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>自スレッドのスレッドID参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelGetThreadId</b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;thid (thid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">自スレッドのIDを得ます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetThreadCurrentPriority"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetThreadCurrentPriority<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>自スレッドの現在の優先度の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelGetThreadCurrentPriority </b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;thpri(thpri&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドの優先度&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">自スレッドの現在の優先度を得ます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelChangeThreadPriority">sceKernelChangeThreadPriority</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetThreadExitStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetThreadExitStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドの終了ステータスの取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelGetThreadExitStatus </b>(
	SceUID <i>thid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;終了ステータスを取得するスレッドIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;status(status&gt;=0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドの終了ステータス&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_DORMANT">SCE_KERNEL_ERROR_DORMANT</a>(対象スレッドはまだ一度も起動していない)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NOT_DORMANT">SCE_KERNEL_ERROR_NOT_DORMANT</a>(対象スレッドはまだ終了していない)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_THREAD_TERMINATED">SCE_KERNEL_ERROR_THREAD_TERMINATED</a>(対象スレッドは強制終了させられた)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT">SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT</a>(対象スレッドは終了ステータスに負の値を与えて終了した)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定したスレッドの終了ステータスを取得します。<br>終了ステータスは、一度起動してから正常終了し、再びDORMANT状態に戻ったスレッドからのみ取得することができます。<br><br>対象スレッドが生成されてからまだ一度も起動していない場合は、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_DORMANT">SCE_KERNEL_ERROR_DORMANT</a>が戻ります。また、対象スレッドがまだ終了していない場合は、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NOT_DORMANT">SCE_KERNEL_ERROR_NOT_DORMANT</a>が戻ります。<br>対象スレッドが<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateThread">sceKernelTerminateThread</a>()によって強制終了された場合は<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_THREAD_TERMINATED">SCE_KERNEL_ERROR_THREAD_TERMINATED</a>が戻ります。<br>対象スレッドが<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitThread">sceKernelExitThread</a>()によって終了したが終了ステータスに負の値を指定していた場合は、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT">SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT</a>が戻ります。<br>対象スレッドが<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitDeleteThread">sceKernelExitDeleteThread</a>()や<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateDeleteThread">sceKernelTerminateDeleteThread</a>()で終了した場合には、終了と同時にスレッドの削除も行われるため、sceKernelGetThreadExitStatus()による終了ステータスの取得はできません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitThread">sceKernelExitThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitDeleteThread">sceKernelExitDeleteThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateThread">sceKernelTerminateThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateDeleteThread">sceKernelTerminateDeleteThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitThreadEnd">sceKernelWaitThreadEnd</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferThreadStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferThreadStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッド状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferThreadStatus </b>(
	SceUID <i>thid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するスレッドIDを指定します。SCE_KERNEL_TH_SELF(=0)で、&nbsp;&nbsp;<br>&nbsp;&nbsp;自スレッドを指定できます。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadInfo">SceKernelThreadInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_THID">SCE_KERNEL_ERROR_ILLEGAL_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_SIZE">SCE_KERNEL_ERROR_ILLEGAL_SIZE</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">スレッドの状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferThreadRunStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferThreadRunStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドの動作状態の参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferThreadRunStatus </b>(
	SceUID <i>thid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadRunStatus">SceKernelThreadRunStatus</a> *<i>stat</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するスレッドIDを指定します。SCE_KERNEL_TH_SELF(=0)で、&nbsp;&nbsp;<br>&nbsp;&nbsp;自スレッドを指定できます。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>stat</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドの動作状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>stat</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadRunStatus">SceKernelThreadRunStatus</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">スレッドの動作状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferThreadStatus">sceKernelReferThreadStatus</a>()と異なる点は、スレッド動作時に変化するもののみを返すことです。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelExtendThreadStack"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelExtendThreadStack<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>一時的なスレッドのスタックを拡張<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelExtendThreadStack</b> (
	SceSize <i>stackSize</i>,
	int (*<i>func</i>)(void *),
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>stackSize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;一時的に拡張するスタックのサイズ(バイト数)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>func</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スタック拡張状態で実行される関数のポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;引数<i>func</i>で指定された関数に渡される引数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;&gt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;引数<i>func</i>で指定された関数の返り値&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_STACK_SIZE">SCE_KERNEL_ERROR_ILLEGAL_STACK_SIZE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">引数<i>stackSize</i>で指定されたサイズのメモリを新たに確保して、一時的なスタックとして使用します。スタックを拡張した状態で引数<i>func</i>で指定された関数を実行し、関数の終了時に自動的に開放してsceKernelExtendThreadStack()関数は終了します。<br>引数<i>common</i>は、一時的にスタック拡張された状態で実行される引数<i>func</i>で指定された関数の引数として使用されます。<br><br>スレッドのスタックの一時的な拡張を行う前に有効だったスタックの残り容量は、スタック拡張状態で実行される関数のスタックとしては引き継がれません。スタック拡張状態では、引数<i>stackSize</i>で指定されたサイズのみが新しいスタックサイズとなります。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_1">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">スタック拡張した状態でlongjmp()関数を実行したり、明示的なthrowや暗黙のうちに発生する例外などを使用すると、sceKernelExtendThreadStack()関数が確保したスタックが開放されないままコンテキストが遷移することがあります。メモリリークの原因となるので、スタック拡張を使用する場合は、setjmp()/longjmp(), try/catch/throw等と併用しないでください。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCheckThreadStack"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCheckThreadStack<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドのスタックの残り容量を取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelCheckThreadStack </b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">スレッドのスタックの残りサイズ(byte単位)<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">自スレッドのスタックが今現在あとどれくらい空いているかをspレジスタの値に基づいて計算します。この関数は、スレッドの必要スタックサイズを決定するための支援用の関数です。<br>計算結果が、明らかにスタックオーバーフローを起こしている場合は、警告を表示した後、スレッドが停止されます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetThreadStackFreeSize"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetThreadStackFreeSize<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドのスタックの未使用サイズを取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelGetThreadStackFreeSize </b>(
	SceUID <i>thid</i>
);
</font></pre></div>
<div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スタックの未使用サイズを取得したいスレッドのIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;size(size&gt;=0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドのスタックの未使用部分のサイズ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">スレッドの作成時から現在までのスタックの未使用部分のサイズを取得します。この関数は、スレッドの必要スタックサイズを決定するための支援用の関数です。<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCheckThreadStack">sceKernelCheckThreadStack</a>()とは異なり、スタックエリアをスキャンすることで未使用サイズを計算します。そのため処理時間がより多くかかりますが、今現在のspレジスタの値とは無関係に、スレッド作成後からいままでの最大スタック使用量に基づいた未使用サイズを求めることができます。なお、本関数ではスタックサイズ計測中に、スレッドが削除されるケースが考慮されていません。必ずスレッドが削除されないタイミングで使用してください。<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelRegisterThreadEventHandler"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelRegisterThreadEventHandler<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドイベントハンドラの登録<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelRegisterThreadEventHandler</b>(
	const char *<i>name</i>,
	SceUID <i>thid</i>,
	int <i>mask</i>,
	int (*<i>handler</i>)(int, SceUID, void *),
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドイベントハンドラの名前を指定します。デバッグ時にオペレータが&nbsp;<br>&nbsp;見て識別する目的で使うので、ユニークな名前であるかのチェックは&nbsp;<br>&nbsp;特にしません。&nbsp;</td>
</tr>
<tr>
<td rowspan= 5  valign="top">&nbsp;<i>thid</i>&nbsp;<br>&nbsp;&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドイベントハンドラを呼び出す対象となるスレッドIDを指定します。&nbsp;<br>&nbsp;以下の値を使うこともできます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TH_SELF&nbsp;(=0)&nbsp;</td>
<td valign="top">&nbsp;自スレッドを対象とします。この場合、&nbsp;<br>&nbsp;<i>mask</i>引数にSCE_KERNEL_TE_EXIT&nbsp;<br>&nbsp;以外を指定することはできません。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TH_USER&nbsp;</td>
<td valign="top">&nbsp;全てのユーザスレッドを対象とします。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TH_KERNEL&nbsp;</td>
<td valign="top">&nbsp;全てのカーネルスレッドを対象とします。&nbsp;<br>&nbsp;カーネルスレッドのみがこの引数を&nbsp;<br>&nbsp;指定できます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TH_ALL&nbsp;</td>
<td valign="top">&nbsp;全てのスレッドを対象とします。&nbsp;<br>&nbsp;カーネルスレッドのみがこの引数を&nbsp;<br>&nbsp;指定できます。&nbsp;</td>
</tr>
<tr>
<td rowspan= 6  valign="top">&nbsp;<i>mask</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;どのスレッドイベントに対してスレッドイベントハンドラを呼び出すかを、&nbsp;<br>&nbsp;以下の値の論理和で指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TE_CREATE&nbsp;</td>
<td valign="top">&nbsp;スレッドが生成された&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TE_DELETE&nbsp;</td>
<td valign="top">&nbsp;スレッドが削除された&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TE_START&nbsp;</td>
<td valign="top">&nbsp;スレッドが起動した&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TE_EXIT&nbsp;</td>
<td valign="top">&nbsp;スレッドが終了した&nbsp;</td>
</tr>
<tr>
<td colspan= 2  valign="top">&nbsp;SCE_KERNEL_TE_ALLを指定することで、どのスレッドイベントに&nbsp;<br>&nbsp;対してもスレッドイベントハンドラを呼び出すようにすることができます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>handler</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドイベントハンドラへのポインタを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>common</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドイベントハンドラへ渡す第3引数を指定します。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;teid(teid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドイベントハンドラのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MASK">SCE_KERNEL_ERROR_ILLEGAL_MASK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">スレッドイベントハンドラの登録を行います。<i>mask</i>によって、どのスレッドイベントに対してスレッドイベントハンドラを呼び出すかを指定することができます。返り値として、登録されたスレッドイベントハンドラのUIDを返します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReleaseThreadEventHandler">sceKernelReleaseThreadEventHandler</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReferThreadEventHandlerStatus">sceKernelReferThreadEventHandlerStatus</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#threadeventhandler">threadeventhandler</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReleaseThreadEventHandler"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReleaseThreadEventHandler<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドイベントハンドラの削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReleaseThreadEventHandler </b>(
	SceUID <i>teid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)<br>マルチスレッドセーフである<br>要ディスパッチ許可<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>teid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>()が返すスレッドイベントハンドラのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_TEID">SCE_KERNEL_ERROR_UNKNOWN_TEID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">登録されているスレッドイベントハンドラの削除を行います。削除しようとしているスレッドイベントハンドラを他のスレッドが実行中だった場合は、実行が終了するまで待ち状態に入ります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#threadeventhandler">threadeventhandler</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="threadeventhandler"></a>
<table width="100%"><td width="70%"><font size=6>threadeventhandler<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドイベントハンドラのプロトタイプ<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>threadeventhandler</b>(
	int <i>type</i>,
	SceUID <i>thid</i>,
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>()でスレッドイベントハンドラを登録したスレッドのコンテキストで呼び出されます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 5  valign="top">&nbsp;<i>type</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドイベントハンドラの呼び出し要因が渡されます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TE_CREATE&nbsp;</td>
<td valign="top">&nbsp;スレッドが生成された&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TE_DELETE&nbsp;</td>
<td valign="top">&nbsp;スレッドが削除された&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TE_START&nbsp;</td>
<td valign="top">&nbsp;スレッドが起動した&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TE_EXIT&nbsp;</td>
<td valign="top">&nbsp;スレッドが終了した&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>thid</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;スレッドイベントハンドラを呼び出す原因となったスレッドのIDが渡されます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>common</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>()で指定した<i>common</i>が渡されます。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;正常&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;このスレッドイベントハンドラを削除する&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">スレッドイベントハンドラは、マルチスレッドマネージャがスレッドの生成や起動、停止、削除の操作を行う際に呼び出されます。<br>注意: スレッドイベントハンドラは通常のスレッドのコンテキストで実行されるため、ハンドラの中で待ち状態に入ることも可能ですが、マルチスレッドマネージャの一部のAPIで利用が制限されるものがあります。具体的には以下の通りです。<br></div>
<div style="margin-left:35px;"><ul>
<li> スレッドイベントを発生させるAPI<br>(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateThread">sceKernelCreateThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDeleteThread">sceKernelDeleteThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelStartThread">sceKernelStartThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitThread">sceKernelExitThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateThread">sceKernelTerminateThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitDeleteThread">sceKernelExitDeleteThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateDeleteThread">sceKernelTerminateDeleteThread</a>())
<li> スレッドイベントハンドラを登録、削除するAPI<br>(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReleaseThreadEventHandler">sceKernelReleaseThreadEventHandler</a>())
</ul></div>
<div style="margin-left:50px;">なお、スレッドイベントハンドラの返り値として0以外の値を返すことで、自分自身の登録を削除することが可能です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReleaseThreadEventHandler">sceKernelReleaseThreadEventHandler</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferThreadEventHandlerStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferThreadEventHandlerStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[スレッド管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドイベントハンドラ状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferThreadEventHandlerStatus </b>(
	SceUID <i>teid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadEventHandlerInfo">SceKernelThreadEventHandlerInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>teid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するスレッドイベントハンドラID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドイベントハンドラの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadEventHandlerInfo">SceKernelThreadEventHandlerInfo</a>)を代入して&nbsp;&nbsp;<br>&nbsp;&nbsp;呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_TEID">SCE_KERNEL_ERROR_UNKNOWN_TEID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">スレッドイベントハンドラの状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelRegisterThreadEventHandler">sceKernelRegisterThreadEventHandler</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#threadeventhandler">threadeventhandler</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelThreadEventHandlerInfo">SceKernelThreadEventHandlerInfo</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[コールバック機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コールバック生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelCreateCallback</b>(
	const char *<i>name</i>,
	int (*<i>callback</i>)(int, int, void *),
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバックの名前を指定します。デバッグ時にオペレータが見て識別する目的で&nbsp;&nbsp;<br>&nbsp;&nbsp;使うので、ユニークな名前であるかのチェックは特にしません。&nbsp;&nbsp;<br>&nbsp;&nbsp;名前の最大長は31バイトです。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>callback</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック関数へのポインタを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック関数へ渡す引数を指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;cbid(cbid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバックのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コールバックを生成します。返り値として、生成されたコールバックのUIDを返します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#callbackfunction">callbackfunction</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[コールバック機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コールバック削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteCallback </b>(
	SceUID <i>cbid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)<br>マルチスレッドセーフである<br>要ディスパッチ許可<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除するコールバックのIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_CBID">SCE_KERNEL_ERROR_UNKNOWN_CBID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cbid</i>で示したコールバックを削除します。削除しようとしているコールバックを他のスレッドが実行中だった場合は、実行が終了するまで待ち状態に入ります。<br>コールバック関数内を実行中はsceKernelDeleteCallback()関数を使用することはできません。コールバック関数は戻り値1を返すことで自分自身を削除する事ができますが、他のコールバックSceUIDをコールバック関数実行中に削除する方法はありません。<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="callbackfunction"></a>
<table width="100%"><td width="70%"><font size=6>callbackfunction<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[コールバック機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コールバック関数のプロトタイプ<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>callbackfunction </b>(
	int <i>count</i>,
	int <i>arg</i>,
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>()でコールバックを生成したスレッドのコンテキストで呼び出されます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>count</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;このコールバック関数が呼び出されるまでに実行された&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelNotifyCallback">sceKernelNotifyCallback</a>()の回数が渡されます。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arg</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelNotifyCallback">sceKernelNotifyCallback</a>()によって与えられた引数が渡されます。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>()によって与えられた引数が渡されます。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;正常&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;このコールバックを削除する&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コールバック関数は、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelNotifyCallback">sceKernelNotifyCallback</a>()によってコールバックの通知が行われた後で、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCheckCallback">sceKernelCheckCallback</a>()によってその通知の確認を行う、または<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitSemaCB">sceKernelWaitSemaCB</a>()などの通知の有無をチェックする待ちAPIを実行することで呼び出されます。コールバック関数の返り値として0以外の値を返すことで、自分自身の登録を削除することが可能です。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_2">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">コールバック関数は、コールバックを生成したスレッドのコンテキストとして呼び出されます。つまり、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCheckCallback">sceKernelCheckCallback</a>()による明示的なコールバックのチェック、または<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitSemaCB">sceKernelWaitSemaCB</a>()などコールバックのチェックつき待ち関数によって、コールバック関数の呼び出しが発生することができるのは、自スレッドが生成したコールバックのみです。コールバックの通知を受け取るためには、コールバックを生成したスレッドが<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCheckCallback">sceKernelCheckCallback</a>()や<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitSemaCB">sceKernelWaitSemaCB</a>()などを使う必要があります。<br>コールバック関数の内部では<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCheckCallback">sceKernelCheckCallback</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDeleteCallback">sceKernelDeleteCallback</a>()関数を使用することはできません。<br>また、コールバック関数内で<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitSemaCB">sceKernelWaitSemaCB</a>()関数などCBつきの待ち関数を呼び出すとネストが発生するため、スタックオーバーフローの原因となります。コールバック関数内でさらにコールバック待ちするような処理をしないようにしてください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelNotifyCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelNotifyCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[コールバック機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コールバック通知<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelNotifyCallback </b>(
	SceUID <i>cbid</i>,
	int <i>arg</i>
);
</font></pre></div>
<div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;通知を行うコールバックのIDを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arg</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック関数へ渡す引数を指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_CBID">SCE_KERNEL_ERROR_UNKNOWN_CBID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cbid</i>で示したコールバックに対して通知を行います。通知が行われたコールバックに対してコールバック関数が実際に呼び出されるのは、コールバックを生成したスレッドが<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCheckCallback">sceKernelCheckCallback</a>()によって通知の確認を行うか、または<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitSemaCB">sceKernelWaitSemaCB</a>()などのコールバック通知の有無をチェックする待ちAPIを呼び出すまで遅延されます。コールバック関数が呼び出される前に複数回コールバック通知が行われると、それまで通知が行われた回数と、最後のsceKernelNotifyCallback()で与えられた引数がコールバック関数に渡されます。<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCancelCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCancelCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[コールバック機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コールバック通知の取り消し<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelCancelCallback </b>(
	SceUID <i>cbid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;通知の取り消しを行うコールバックのIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_CBID">SCE_KERNEL_ERROR_UNKNOWN_CBID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cbid</i>で示したコールバックに対して行われた通知をすべて取り消します。<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetCallbackCount"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetCallbackCount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[コールバック機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コールバック通知回数の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelGetCallbackCount </b>(
	SceUID <i>cbid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック通知回数の取得を行うコールバックのIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;count(count&gt;=0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック通知回数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_CBID">SCE_KERNEL_ERROR_UNKNOWN_CBID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>cbid</i>で示したコールバックに対して、まだコールバック関数が呼び出されずに遅延されているコールバック通知の回数を返します。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCheckCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCheckCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[コールバック機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コールバック通知の有無をチェック<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelCheckCallback </b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)<br>マルチスレッドセーフである<br>要ディスパッチ許可<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック通知は行われていない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック通知が行われたのでコールバック関数を実行した&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">自スレッドが生成したコールバックに対して、コールバック発生の通知が行われているかどうかをチェックします。<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelNotifyCallback">sceKernelNotifyCallback</a>()による通知が行われたコールバックがあれば、そのコールバックに登録されているコールバック関数を呼び出します。通知が行われたコールバックが一つもなければ何もせずに戻ります。<br>コールバック関数の中からsceKernelCheckCallback()関数を呼び出すことはできません。<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferCallbackStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferCallbackStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[コールバック機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コールバック状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferCallbackStatus </b>(
	SceUID <i>cbid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelCallbackInfo">SceKernelCallbackInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するコールバックID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバックの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelCallbackInfo">SceKernelCallbackInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_CBID">SCE_KERNEL_ERROR_UNKNOWN_CBID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コールバックの状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelCallbackInfo">SceKernelCallbackInfo</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSleepThread"></a><a name="sceKernelSleepThreadCB"></a>
<a name="sceKernelSleepThread / sceKernelSleepThreadCB"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSleepThread / sceKernelSleepThreadCB<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>自スレッドを起床待ち状態へ移行<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSleepThread </b>(
	void
);
int <b>sceKernelSleepThreadCB </b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelSleepThread&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelSleepThreadCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">自スレッドを起床待ち状態(WAIT状態)にします。起床待ちに入ったスレッドは、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWakeupThread">sceKernelWakeupThread</a>()または<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDonateWakeupThread">sceKernelDonateWakeupThread</a>()または、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReleaseWaitThread">sceKernelReleaseWaitThread</a>()によってWAIT状態から戻ります。sceKernelSleepThread()を発行したとき、既に他スレッドによって<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWakeupThread">sceKernelWakeupThread</a>()が発行されていると、起床要求回数をカウントダウンするのみでWAIT状態に入ること無くsceKernelSleepThread()から戻ります。<br>詳しくは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWakeupThread">sceKernelWakeupThread</a>()および<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDonateWakeupThread">sceKernelDonateWakeupThread</a>()の項を参照してください。<br>sceKernelSleepThreadCB()は、sceKernelSleepThread()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。<br>起床待ち状態の間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWakeupThread">sceKernelWakeupThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCancelWakeupThread">sceKernelCancelWakeupThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDonateWakeupThread">sceKernelDonateWakeupThread</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelWakeupThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelWakeupThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>他スレッドの起床<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelWakeupThread </b>(
	SceUID <i>thid</i>
);
</font></pre></div>
<div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;起床するスレッドのIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_DORMANT">SCE_KERNEL_ERROR_DORMANT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定したスレッドの起床待ち状態を解除します。対象スレッドが起床待ちのWAIT状態になっていない場合すなわち<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThread">sceKernelSleepThread</a>()を実行していない場合、sceKernelWakeupThread()による起床要求の回数がカウントアップされます。対象スレッドが<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThread">sceKernelSleepThread</a>()を発行しても、起床要求の回数分発行するまではWAIT状態に移行することは無くなります。スレッドから実行するときは、ディスパッチ許可状態でなければ行けません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThread">sceKernelSleepThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThreadCB">sceKernelSleepThreadCB</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCancelWakeupThread">sceKernelCancelWakeupThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDonateWakeupThread">sceKernelDonateWakeupThread</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCancelWakeupThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCancelWakeupThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドの起床要求を無効化<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelCancelWakeupThread </b>(
	SceUID <i>thid</i>
);
</font></pre></div>
<div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;起床要求を無効化するスレッドのIDを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_KERNEL_TH_SELF(=0)で、自スレッドを指定できます。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;count(count&gt;=0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;起床要求回数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_THID">SCE_KERNEL_ERROR_ILLEGAL_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で示されたスレッドの起床要求のカウントを読み出し、起床要求をすべて無効にします。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThread">sceKernelSleepThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThreadCB">sceKernelSleepThreadCB</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWakeupThread">sceKernelWakeupThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDonateWakeupThread">sceKernelDonateWakeupThread</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDonateWakeupThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDonateWakeupThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>自スレッドの起床要求カウントを他スレッドに委譲<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDonateWakeupThread </b>(
	SceUID <i>thid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み許可、ディスパッチ許可状態で呼ぶこと)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;自スレッドの起床要求カウントを委譲する相手となるスレッドのIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_DORMANT">SCE_KERNEL_ERROR_DORMANT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定したスレッドに対して、自スレッドのもつ起床要求カウントを譲り渡します。自スレッドは起床要求カウントが0の状態になり、起床待ちのWAIT状態になります。起床待ちに入ったスレッドは、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWakeupThread">sceKernelWakeupThread</a>(), sceKernelDonateWakeupThread()または、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReleaseWaitThread">sceKernelReleaseWaitThread</a>()によってWAIT状態から戻ります。<br>sceKernelDonateWakeupThread()は、他スレッドの<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWakeupThread">sceKernelWakeupThread</a>()と、自スレッドの<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCancelWakeupThread">sceKernelCancelWakeupThread</a>()と<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThread">sceKernelSleepThread</a>()をアトミックに行います。自スレッドのウェイクアップカウントを他スレッドに譲り渡し、自スレッドは起床待ち状態になるという動作をします。<br>スレッドの起床カウンタ操作を操作する<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWakeupThread">sceKernelWakeupThread</a>() / <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThread">sceKernelSleepThread</a>() / <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCancelWakeupThread">sceKernelCancelWakeupThread</a>() / sceKernelDonateWakeupThread()などを使用したスレッド同期は、操作する側とされるスレッド側で十分な合意ができている場合に限られます。各スレッドが、起床カウンタを自スレッド内で自由に使えるよう、スレッド間の同期にはsceKernelDonateWakeupThread()ではなく、セマフォ,イベントフラグなどの同期プリミティブを使用して実現することをお勧めします。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWakeupThread">sceKernelWakeupThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThread">sceKernelSleepThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCancelWakeupThread">sceKernelCancelWakeupThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThreadCB">sceKernelSleepThreadCB</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSuspendThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSuspendThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>他スレッドをSUSPEND状態へ移行<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSuspendThread </b>(
	SceUID <i>thid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SUSPEND状態へ移行させるスレッドのスレッドIDを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;自スレッドは指定できません。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_THID">SCE_KERNEL_ERROR_ILLEGAL_THID</a>(対象スレッドは自スレッドだった)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_SUSPEND">SCE_KERNEL_ERROR_SUSPEND</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_DORMANT">SCE_KERNEL_ERROR_DORMANT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定されたスレッドをSUSPEND状態に移し、スレッドの実行を中断させます。<br>SUSPEND状態は、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelResumeThread">sceKernelResumeThread</a>()によって解除されます。sceKernelSuspendThread()の対象スレッドが既にWAIT状態にあった場合は、WAIT状態とSUSPEND状態が複合した、WAIT-SUSPEND状態になります。その後、このスレッドのWAIT解除の条件が満たされた場合はSUSPEND状態に移行します。<br>一方、このWAIT-SUSPEND状態のスレッドに対して<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelResumeThread">sceKernelResumeThread</a>()が発行された場合は以前とおなじWAIT状態に戻ります。SUSPEND状態は、他スレッドの発行したサービスコールによる中断状態を意味するものなので、本サービスコールで自スレッドを指定することはできません。あるスレッドに対して複数回のsceKernelSuspendThread()が発行された場合、2度目以降のsceKernelSuspendThread()はエラーとなります。<br><br>デバイスアクセス中のスレッドを本サービスコールによってSUSPEND状態にすると、システムがデッドロックする可能性があります。<br>本サービスコールをデバッグ支援以外の目的で使用することは推奨しません。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelResumeThread"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelResumeThread<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>SUSPEND状態のスレッドの再開<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelResumeThread </b>(
	SceUID <i>thid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SUSPEND状態を解除するスレッドのスレッドIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_THID">SCE_KERNEL_ERROR_ILLEGAL_THID</a>(対象スレッドは自スレッドだった)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NOT_SUSPEND">SCE_KERNEL_ERROR_NOT_SUSPEND</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定されたスレッドのSUSPEND状態を解除します。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelWaitThreadEnd"></a><a name="sceKernelWaitThreadEndCB"></a>
<a name="sceKernelWaitThreadEnd / sceKernelWaitThreadEndCB"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelWaitThreadEnd / sceKernelWaitThreadEndCB<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>他スレッドの終了待ち<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelWaitThreadEnd </b>(
	SceUID <i>thid</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelWaitThreadEndCB </b>(
	SceUID <i>thid</i>,
	SceUInt *<i>timeout</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelWaitThreadEnd&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelWaitThreadEndCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>thid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;終了を待ちたいスレッドのIDを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>timeout</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;マイクロ秒単位で指定した待ち時間の上限を格納したSceUInt型変数への&nbsp;&nbsp;<br>&nbsp;&nbsp;ポインタを指定します。NULLを指定した場合は無限に待ちます。&nbsp;&nbsp;<br>&nbsp;&nbsp;待ち条件が成立したときには、残り時間が返ります。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;status(status&gt;=0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象スレッドは正常終了した&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_THREAD_TERMINATED">SCE_KERNEL_ERROR_THREAD_TERMINATED</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_THID">SCE_KERNEL_ERROR_ILLEGAL_THID</a>(対象スレッドは自スレッドだった)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_DORMANT">SCE_KERNEL_ERROR_DORMANT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT">SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT</a>(対象スレッドは終了ステータスに負の値を与えて終了した)<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>thid</i>で指定した他スレッドの終了を待ちます。スレッドが正常終了した場合は、スレッドのエントリ関数の返り値や<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitThread">sceKernelExitThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitDeleteThread">sceKernelExitDeleteThread</a>()の引数として与えられた終了ステータスを返り値として返します。<br><br>sceKernelWaitThreadEndCB()は、sceKernelWaitThreadEnd()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。<br>スレッド終了待ち状態の間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitThread">sceKernelExitThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelExitDeleteThread">sceKernelExitDeleteThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateThread">sceKernelTerminateThread</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelTerminateDeleteThread">sceKernelTerminateDeleteThread</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateSema"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateSema<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>セマフォ生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelCreateSema</b>(
	const char *<i>name</i>,
	SceUInt <i>attr</i>,
	int <i>initCount</i>,
	int <i>maxCount</i>,
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSemaOptParam">SceKernelSemaOptParam</a> *<i>optParam</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;セマフォの名前を指定します。デバッグ時にオペレータが見て識別する目的で&nbsp;<br>&nbsp;使うので、ユニークな名前であるかのチェックは特にしません。&nbsp;<br>&nbsp;名前の最大長は31バイトです。&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;<i>attr</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;セマフォの属性を指定します。以下のどちらかを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_SA_THFIFO&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングはFIFOで行う。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_SA_THPRI&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングはスレッドの&nbsp;<br>&nbsp;優先度で行う。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>initCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;セマフォの初期値&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>maxCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;セマフォの最大値&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>optParam</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;将来の拡張用の引数です。NULLを指定して下さい。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;semid(semid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;セマフォのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">セマフォを生成します。返り値にセマフォのIDが返ってきます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSemaOptParam">SceKernelSemaOptParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteSema"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteSema<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>セマフォ削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteSema </b>(
	SceUID <i>semid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>semid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除するセマフォIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_SEMID">SCE_KERNEL_ERROR_UNKNOWN_SEMID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>semid</i>で示したセマフォを削除します。セマフォの待ちキューに登録されていたスレッドにはエラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a>)が返されます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSignalSema"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSignalSema<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>セマフォ資源返却<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSignalSema </b>(
	SceUID <i>semid</i>,
	int <i>signalcount</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>semid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;資源を返却するセマフォID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>signalcount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;返却する資源の個数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_SEMID">SCE_KERNEL_ERROR_UNKNOWN_SEMID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_SEMA_OVF">SCE_KERNEL_ERROR_SEMA_OVF</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>semid</i>で示されたセマフォに対して、資源を<i>signalcount</i>個返却する操作を行います。<br>ただし、カウンタが既に最大値に達しているときは、カウント値は変らずにエラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_SEMA_OVF">SCE_KERNEL_ERROR_SEMA_OVF</a>)になります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelWaitSema"></a><a name="sceKernelWaitSemaCB"></a><a name="sceKernelPollSema"></a>
<a name="sceKernelWaitSema / sceKernelWaitSemaCB / sceKernelPollSema"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelWaitSema / sceKernelWaitSemaCB / sceKernelPollSema<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>セマフォ資源獲得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelWaitSema </b>(
	SceUID <i>semid</i>,
	int <i>needcount</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelWaitSemaCB </b>(
	SceUID <i>semid</i>,
	int <i>needcount</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelPollSema </b>(
	SceUID <i>semid</i>,
	int <i>needcount</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelWaitSema&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelWaitSemaCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;sceKernelPollSema&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し可能&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;(割り込み禁止&nbsp;/&nbsp;許可状態に依存しない)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>semid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;資源を獲得するセマフォID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>needcount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;獲得する資源の個数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>timeout</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;マイクロ秒単位で指定した待ち時間の上限を格納した&nbsp;&nbsp;<br>&nbsp;&nbsp;SceUInt型変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;NULLを指定した場合は無限に待ちます。&nbsp;&nbsp;<br>&nbsp;&nbsp;資源が獲得できた時には、残り時間が返ります。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_COUNT">SCE_KERNEL_ERROR_ILLEGAL_COUNT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_SEMID">SCE_KERNEL_ERROR_UNKNOWN_SEMID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_SEMA_ZERO">SCE_KERNEL_ERROR_SEMA_ZERO</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_CANCEL">SCE_KERNEL_ERROR_WAIT_CANCEL</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>semid</i>で示したセマフォから資源を<i>needcount</i>個獲得する操作を行います。<i>timeout</i>を指定するとマイクロ秒単位で指定されたタイムアウト動作を設定します。<i>timeout</i>がNULLだった場合にはタイムアウト動作は行いません。<br><i>timeout</i>を指定した場合、サービスコール終了時<i>timeout</i>が示す値が更新されることに注意してください。時間内に条件が成立した場合は残り時間で更新されます。成立しなかった場合は<i>timeout</i>が0で更新され、この場合はエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a>で戻ります。<br>sceKernelWaitSemaCB()は、sceKernelWaitSema()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。セマフォ待ち状態の間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br>sceKernelPollSema()サービスコールは、sceKernelWaitSema()から、WAIT状態にはいる機能を取り除いたサービスコールです。sceKernelWaitSema()と異なり対象セマフォのカウント値が<i>needcount</i>未満の場合、エラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_SEMA_ZERO">SCE_KERNEL_ERROR_SEMA_ZERO</a>で戻ります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCancelSema"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCancelSema<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>セマフォ資源のキャンセル<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelCancelSema </b>(
	SceUID <i>semid</i>,
	int <i>setcount</i>,
	int *<i>numWaitThreads</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>semid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;セマフォID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>setcount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;セマフォのカウント値の指定&nbsp;&nbsp;<br>&nbsp;&nbsp;(-<i>1</i>を指定したらセマフォの初期値を使用)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;待ち状態を解除されたスレッドの個数を受け取る変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_SEMID">SCE_KERNEL_ERROR_UNKNOWN_SEMID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_COUNT">SCE_KERNEL_ERROR_ILLEGAL_COUNT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>semid</i>で指定したセマフォで待っているスレッドの待ち状態を解除します。<br>待ち状態を解除されたスレッドは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitSema">sceKernelWaitSema</a>()の返り値で解除されたことが判断できます。その後、<i>setcount</i>で指定するカウント値をセマフォに設定します。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferSemaStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferSemaStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>セマフォ状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferSemaStatus </b>(
	SceUID <i>semid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSemaInfo">SceKernelSemaInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>semid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するセマフォID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;セマフォの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSemaInfo">SceKernelSemaInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_SEMID">SCE_KERNEL_ERROR_UNKNOWN_SEMID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">セマフォの状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSemaInfo">SceKernelSemaInfo</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateEventFlag"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateEventFlag<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>イベントフラグ生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelCreateEventFlag</b>(
	const char *<i>name</i>,
	SceUInt <i>attr</i>,
	SceUInt <i>initPattern</i>,
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelEventFlagOptParam">SceKernelEventFlagOptParam</a> *<i>optParam</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;イベントフラグの名前を指定します。デバッグ時にオペレータが見て識別する&nbsp;<br>&nbsp;目的で使うので、ユニークな名前であるかのチェックは特にしません。&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;<i>attr</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;イベントフラグの属性を指定します。以下のどちらかを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_EA_SINGLE&nbsp;</td>
<td valign="top">&nbsp;複数スレッドの待ちを許さない&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_EA_MULTI&nbsp;</td>
<td valign="top">&nbsp;複数スレッドの待ちを許す&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>initPattern</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;イベントフラグの初期値を指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>optParam</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;将来の拡張用の引数です。NULLを指定して下さい。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;evfid(evfid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;イベントフラグのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">イベントフラグを生成し、イベントフラグの初期値を設定します。返り値として、生成されたイベントフラグのIDを返します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelEventFlagOptParam">SceKernelEventFlagOptParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteEventFlag"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteEventFlag<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>イベントフラグ削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteEventFlag </b>(
	SceUID <i>evfid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>evfid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除するイベントフラグIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_EVFID">SCE_KERNEL_ERROR_UNKNOWN_EVFID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>evfid</i>で指定したイベントフラグを削除します。対象イベントフラグに対して条件成立待ちをしているスレッドにはエラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a>)が返されます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSetEventFlag"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSetEventFlag<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>イベントフラグのセット<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSetEventFlag </b>(
	SceUID <i>evfid</i>,
	SceUInt <i>bitpattern</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>evfid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;操作するイベントフラグIDを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bitpattern</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>bitpattern</i>で示すビットをイベントフラグ値にセットします。&nbsp;&nbsp;<br>&nbsp;&nbsp;すなわち、イベントフラグ値と<i>bitpattern</i>の論理和を&nbsp;&nbsp;<br>&nbsp;&nbsp;新たなイベントフラグ値とします。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_EVFID">SCE_KERNEL_ERROR_UNKNOWN_EVFID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>evfid</i>でしめすイベントフラグのビットのセットを行います。新しいイベントフラグ値によって、待ち条件を満たしたWAIT状態のスレッドはWAIT状態を解除されます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelClearEventFlag"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelClearEventFlag<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>イベントフラグのクリア<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelClearEventFlag </b>(
	SceUID <i>evfid</i>,
	SceUInt <i>bitpattern</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>evfid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;操作するイベントフラグIDを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bitpattern</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>bitpattern</i>中の値が0のビットに該当するイベントフラグ値をクリアします。&nbsp;&nbsp;<br>&nbsp;&nbsp;すなわち、イベントフラグ値と<i>bitpattern</i>の論理積を新たなイベントフラグ値とします。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_EVFID">SCE_KERNEL_ERROR_UNKNOWN_EVFID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>evfid</i>でしめすイベントフラグのビットのクリアを行います。このサービスコールによってイベント待ちのスレッドのWAIT状態が解除されることはありません。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelWaitEventFlag"></a><a name="sceKernelWaitEventFlagCB"></a><a name="sceKernelPollEventFlag"></a>
<a name="sceKernelWaitEventFlag / sceKernelWaitEventFlagCB / sceKernelPollEventFlag"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelWaitEventFlag / sceKernelWaitEventFlagCB / sceKernelPollEventFlag<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>イベントフラグ待ち<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelWaitEventFlag </b>(
	SceUID <i>evfid</i>,
	SceUInt <i>bitpattern</i>,
	int <i>waitmode</i>,
	SceUInt *<i>resultpat</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelWaitEventFlagCB </b>(
	SceUID <i>evfid</i>,
	SceUInt <i>bitpattern</i>,
	int <i>waitmode</i>,
	SceUInt *<i>resultpat</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelPollEventFlag </b>(
	SceUID <i>evfid</i>,
	SceUInt <i>bitpattern</i>,
	int <i>waitmode</i>,
	SceUInt *<i>resultpat</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelWaitEventFlag&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelWaitEventFlagCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;sceKernelPollEventFlag&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し可能&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;(割り込み禁止&nbsp;/&nbsp;許可状態に依存しない)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>evfid</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;操作するイベントフラグIDを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>bitpattern</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;イベントフラグとの比較値を指定します。&nbsp;</td>
</tr>
<tr>
<td rowspan= 6  valign="top">&nbsp;<i>waitmode</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;待ちモードを指定します。以下のどちらかを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_EW_AND&nbsp;</td>
<td valign="top">&nbsp;AND待ち&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_EW_OR&nbsp;</td>
<td valign="top">&nbsp;OR待ち&nbsp;</td>
</tr>
<tr>
<td colspan= 2  valign="top">&nbsp;また、オプションで以下のどちらかの指定を論理和で追加できます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_EW_CLEAR_ALL&nbsp;</td>
<td valign="top">&nbsp;待ち成立後、すべてのビットをクリア&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_EW_CLEAR_PAT&nbsp;</td>
<td valign="top">&nbsp;待ち成立後、<i>bitpattern</i>に指定した&nbsp;<br>&nbsp;ビットをクリア&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>resultpat</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;イベントフラグ値を受け取る変数へのポインタ&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>timeout</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;マイクロ秒単位で指定した待ち時間の上限を格納した&nbsp;<br>&nbsp;SceUInt型変数へのポインタを指定します。&nbsp;<br>&nbsp;NULLを指定した場合は無限に待ちます。&nbsp;<br>&nbsp;待ち条件が成立した時には、残り時間が返ります。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MODE">SCE_KERNEL_ERROR_ILLEGAL_MODE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_EVFID">SCE_KERNEL_ERROR_UNKNOWN_EVFID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_CANCEL">SCE_KERNEL_ERROR_WAIT_CANCEL</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_EVF_COND">SCE_KERNEL_ERROR_EVF_COND</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_EVF_MULTI">SCE_KERNEL_ERROR_EVF_MULTI</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_EVF_ILPAT">SCE_KERNEL_ERROR_EVF_ILPAT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceKernelWaitEventFlag()は、<i>waitmode</i>で示される待ち解除の条件にしたがって、<i>evfid</i>で示されるイベントフラグがセットされるのを待つサービスコールです。<br><i>evfid</i>で示されるイベントフラグが、既に<i>waitmode</i>で示される待ち解除条件を満たしている場合には、発行スレッドは待ち状態に入らずに実行を続けます。<br><br><i>waitmode</i>にSCE_KERNEL_EW_ANDを指定した場合、<i>bitpattern</i>で示されるすべてのビットが1になるまで待ちます。<i>waitmode</i>にSCE_KERNEL_EW_ORを指定した場合、<i>bitpattern</i>で示されるいずれかのビットが1になるまで待ちます。<i>waitmode</i>にSCE_KERNEL_EW_CLEAR_ALLが追加指定されている場合、解除条件が成立してこのスレッドが待ち解除になったときに、イベントフラグのすべてのビットは0クリアされます。<i>waitmode</i>にSCE_KERNEL_EW_CLEAR_PATが追加指定されている場合、解除条件が成立してこのスレッドが待ち解除になったときに、<i>bitpattern</i>で指定したビットは0クリアされます。<br><i>resultpat</i>には、以下の場合にイベントフラグの値が返されます。値が不要な場合はNULLを指定することができます。<br></div>
<div style="margin-left:35px;"><ul>
<li> 待ち解除条件が成立した場合(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a>が返る場合)は、条件が成立した直後、SCE_KERNEL_EW_CLEAR_ALL, SCE_KERNEL_EW_CLEAR_PAT指定によるクリアが行われる前のイベントフラグ値が返されます。
<li> 待ち状態に入った後で、待ち解除条件成立以外で抜ける場合(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_CANCEL">SCE_KERNEL_ERROR_WAIT_CANCEL</a>, <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a>, <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a>, <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_EVF_COND">SCE_KERNEL_ERROR_EVF_COND</a>, <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a>の各エラーが返る場合)は、待ちから抜ける直前のイベントフラグ値が返されます。<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCancelEventFlag">sceKernelCancelEventFlag</a>()によるキャンセルが行われた場合は、キャンセル時に設定されたイベントフラグ値が返されます。
</ul></div>
<div style="margin-left:50px;"><br><i>timeout</i>を指定するとマイクロ秒単位で指定されたタイムアウト動作を設定します。<i>timeout</i>がNULLだった場合にはタイムアウト動作は行いません。<br><i>timeout</i>を指定した場合、サービスコール終了時<i>timeout</i>が示す値が更新されることに注意してください。時間内に条件が成立した場合は残り時間で更新されます。成立しなかった場合は<i>timeout</i>が0で更新され、この場合はエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a>で戻ります。<br><br>sceKernelWaitEventFlagCB()は、sceKernelWaitEventFlag()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。<br>イベントフラグ待ち状態の間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br>sceKernelPollEventFlag()は、sceKernelWaitEventFlag()から待ち状態に入る機能を取り除いたサービスコールです。sceKernelWaitEventFlag()とは異なり待ち解除条件が成立していない場合は直ちにエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_EVF_COND">SCE_KERNEL_ERROR_EVF_COND</a>で戻ります。<br>この場合SCE_KERNEL_EW_CLEAR_ALL / SCE_KERNEL_EW_CLEAR_PAT指定は無視されます。<br><br>既に待ちスレッドの存在するSCE_KERNEL_EA_SINGLE属性のイベントフラグに対して別のスレッドがsceKernelWaitEventFlag(), sceKernelPollEventFlag()を実行することはできません。この場合あとからsceKernelWaitEventFlag(), sceKernelPollEventFlag()を実行したスレッドへは直ちにエラーで戻ります。<br><br>SCE_KERNEL_EA_MULTI属性のイベントフラグに対して複数のスレッドが待ちに入る場合はスレッドの待ち行列が作られます。この場合、一回の<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetEventFlag">sceKernelSetEventFlag</a>()で複数のスレッドが待ち解除となることがあります。<br><br>スレッドの待ち行列の順番は、先に待ちに入ったものが先頭になり待ちに入った順に並びます。待ち行列中にSCE_KERNEL_EW_CLEAR_ALL指定やSCE_KERNEL_EW_CLEAR_PAT指定のスレッドがあり、そのスレッドの待ち解除条件が成立したときは、待ち解除と同時にイベントフラグがクリアされます。SCE_KERNEL_EW_CLEAR_ALL指定やSCE_KERNEL_EW_CLEAR_PAT指定を行っていたスレッドよりも後ろにあったスレッドはクリアされた後のイベントフラグを見ることになるため、待ち解除にならない場合があります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCancelEventFlag"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCancelEventFlag<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>イベントフラグ待ちのキャンセル<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceKernelCancelEventFlag </b>(
	SceUID <i>evfid</i>,
	SceUInt <i>setpattern</i>,
	int *<i>numWaitThreads</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>evfid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;キャンセルするイベントフラグIDを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>setpattern</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;イベントフラグの設定値を指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;待ち状態を解除されたスレッドの個数を受け取る変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_EVFID">SCE_KERNEL_ERROR_UNKNOWN_EVFID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>evfid</i>で指定したイベントフラグで待っているスレッドの待ち状態を解除します。<br>待ち状態を解除されたスレッドは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelWaitEventFlag">sceKernelWaitEventFlag</a>()の戻値で解除されたことが判断できます。その後、<i>setpattern</i>で指定するイベントフラグ値をイベントフラグに設定します。<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferEventFlagStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferEventFlagStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>イベントフラグ状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferEventFlagStatus </b>(
	SceUID <i>evfid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelEventFlagInfo">SceKernelEventFlagInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>evfid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するイベントフラグID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;イベントフラグの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelEventFlagInfo">SceKernelEventFlagInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_EVFID">SCE_KERNEL_ERROR_UNKNOWN_EVFID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">イベントフラグの状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelEventFlagInfo">SceKernelEventFlagInfo</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateMutex"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateMutex<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ミューテックス生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelCreateMutex</b>(
	const char *<i>name</i>,
	SceUInt <i>attr</i>,
	int <i>initCount</i>,
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMutexOptParam">SceKernelMutexOptParam</a> *<i>optParam</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;ミューテックスの名前を指定します。デバッグ時にオペレータが見て識別する&nbsp;<br>&nbsp;目的で使うので、ユニークな名前であるかのチェックは特にしません。&nbsp;<br>&nbsp;名前の最大長は31バイトです。&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;<i>attr</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;ミューテックスの属性を指定します。SCE_KERNEL_MA_THFIFOおよび&nbsp;<br>&nbsp;SCE_KERNEL_MA_THPRIはどちらかを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MA_THFIFO&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングはFIFOで&nbsp;<br>&nbsp;行います。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MA_THPRI&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングはスレッドの&nbsp;<br>&nbsp;優先度で行います。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MA_RECURSIVE&nbsp;</td>
<td valign="top">&nbsp;ミューテックスを獲得したスレッドによる&nbsp;<br>&nbsp;再帰的なロックを許可します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>initCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;ミューテックスの初期ロックカウント&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>optParam</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;将来の拡張用の引数です。NULLを指定して下さい。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;mtxid(mtxid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ミューテックスのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ミューテックスを生成します。返り値にミューテックスのIDが返ってきます。<br><i>initCount</i>が正の値のとき、初期状態からスレッドに所有され<i>initCount</i>回数だけロックされた状態でミューテックスが生成されます。<i>initCount</i>が0の場合はミューテックスが獲得されていない状態で生成されます。<br>2以上の値を<i>initCount</i>に指定してミューテックスを生成するのは、SCE_KERNEL_MA_RECURSIVE属性を指定していた場合に限られます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMutexOptParam">SceKernelMutexOptParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteMutex"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteMutex<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ミューテックス削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteMutex </b>(
	SceUID <i>mtxid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mtxid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除するミューテックスIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MUTEXID">SCE_KERNEL_ERROR_UNKNOWN_MUTEXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>mtxid</i>で示したミューテックスを削除します。ミューテックスの待ちキューに登録されていたスレッドにはエラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a>)が返されます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelLockMutex"></a><a name="sceKernelLockMutexCB"></a><a name="sceKernelTryLockMutex"></a>
<a name="sceKernelLockMutex / sceKernelLockMutexCB / sceKernelTryLockMutex"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelLockMutex / sceKernelLockMutexCB / sceKernelTryLockMutex<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ミューテックス資源獲得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelLockMutex</b> (
	SceUID <i>mtxid</i>,
	int <i>lockcount</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelLockMutexCB</b>(
	SceUID <i>mtxid</i>,
	int <i>lockcount</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelTryLockMutex </b>(
	SceUID <i>mtxid</i>,
	int <i>lockcount</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelLockMutex&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelLockMutexCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;sceKernelTryLockMutex&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;(割り込み禁止&nbsp;/&nbsp;許可状態に依存しない)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mtxid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;資源を獲得するミューテックスID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>lockcount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;資源獲得後にミューテックスをロックする回数(1以上)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>timeout</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;マイクロ秒単位で指定した待ち時間の上限を格納した&nbsp;&nbsp;<br>&nbsp;&nbsp;SceUInt型変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;NULLを指定した場合は無限に待ちます。&nbsp;&nbsp;<br>&nbsp;&nbsp;資源が獲得できた時には、残り時間が返ります。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_COUNT">SCE_KERNEL_ERROR_ILLEGAL_COUNT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MUTEXID">SCE_KERNEL_ERROR_UNKNOWN_MUTEXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MUTEX_RECURSIVE">SCE_KERNEL_ERROR_MUTEX_RECURSIVE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MUTEX_LOCK_OVF">SCE_KERNEL_ERROR_MUTEX_LOCK_OVF</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_CANCEL">SCE_KERNEL_ERROR_WAIT_CANCEL</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>mtxid</i>で示したミューテックスを獲得し<i>lockcount</i>回ロックするする操作を行います。<i>timeout</i>を指定するとマイクロ秒単位で指定されたタイムアウト動作を設定します。<i>timeout</i>がNULLだった場合にはタイムアウト動作は行いません。<br><i>timeout</i>を指定した場合、サービスコール終了時<i>timeout</i>が示す値が更新されることに注意してください。時間内に条件が成立した場合は残り時間で更新されます。成立しなかった場合は<i>timeout</i>が0で更新され、この場合はエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a>で戻ります。<br>sceKernelLockMutexCB()は、sceKernelLockMutex()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。ミューテックス待ち状態の間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br>sceKernelTryLockMutex()は、sceKernelLockMutex()から、WAIT状態にはいる機能を取り除いたサービスコールです。sceKernelLockMutex()と異なりミューテックスが他のスレッドによって獲得されていた場合、エラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MUTEX_FAILED_TO_OWN">SCE_KERNEL_ERROR_MUTEX_FAILED_TO_OWN</a>で戻ります。<br>2以上の値を<i>lockCount</i>に指定してミューテックスをロックするのは、ミューテックス生成時にSCE_KERNEL_MA_RECURSIVE属性を指定していた場合に限られます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelUnlockMutex"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelUnlockMutex<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ミューテックス資源返却<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelUnlockMutex </b>(
	SceUID <i>mtxid</i>,
	int <i>unlockcount</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mtxid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;資源を返却するミューテックスID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>unlockcount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;資源を返却するまでのアンロック回数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MUTEXID">SCE_KERNEL_ERROR_UNKNOWN_MUTEXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MUTEX_NOT_OWNED">SCE_KERNEL_ERROR_MUTEX_NOT_OWNED</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MUTEX_UNLOCK_UDF">SCE_KERNEL_ERROR_MUTEX_UNLOCK_UDF</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>mtxid</i>で示されたミューテックスに対して、<i>unlockcount</i>回数だけアンロックする操作を行います。ロックカウントが0に戻ったとき、ミューテックス資源が解放されます。<br>ただし、ロックカウントが負の値に達してしまうようなアンロックカウント回数の指定が行われた場合は、ロックカウントは変らずにエラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MUTEX_UNLOCK_UDF">SCE_KERNEL_ERROR_MUTEX_UNLOCK_UDF</a>)になります。<br>2以上の値を<i>unlockCount</i>に指定してミューテックスをアンロックするのは、ミューテックス生成時にSCE_KERNEL_MA_RECURSIVE属性を指定していた場合に限られます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCancelMutex"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCancelMutex<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ミューテックス資源のキャンセル<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelCancelMutex </b>(
	SceUID <i>mtxid</i>,
	int <i>newcount</i>,
	int *<i>numWaitThreads</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mtxid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ミューテックスID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>newcount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ミューテックスのロックカウント値の指定&nbsp;&nbsp;<br>&nbsp;&nbsp;(0を指定したらミューテックスをキャンセル後にミューテックスを&nbsp;&nbsp;<br>&nbsp;&nbsp;ロック状態にしない)&nbsp;&nbsp;<br>&nbsp;&nbsp;(-1を指定したらミューテックス生成時の初期ロックカウントを使用)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;待ち状態を解除されたスレッドの個数を受け取る変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MUTEXID">SCE_KERNEL_ERROR_UNKNOWN_MUTEXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_COUNT">SCE_KERNEL_ERROR_ILLEGAL_COUNT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>mtxid</i>で指定したミューテックスで待っているスレッドの待ち状態を解除します。<br>待ち状態を解除されたスレッドは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelLockMutex">sceKernelLockMutex</a>()の返り値で解除されたことが判断できます。その後、<i>newcount</i>で指定するロックカウント値をミューテックスに設定します。<i>newcount</i>が0の場合はミューテックスを獲得しません。<br><br>割り込みハンドラからsceKernelCancelMutex()サービスコールを呼び出す場合は<i>newcount</i>は0である必要があります。<br><br>2以上の値を<i>newcount</i>に指定してミューテックスを再確保するのは、ミューテックス生成時にSCE_KERNEL_MA_RECURSIVE属性を指定していた場合に限られます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferMutexStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferMutexStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ミューテックス状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferMutexStatus </b>(
	SceUID <i>mtxid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMutexInfo">SceKernelMutexInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mtxid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するミューテックスID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ミューテックスの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMutexInfo">SceKernelMutexInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MUTEXID">SCE_KERNEL_ERROR_UNKNOWN_MUTEXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ミューテックスの状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMutexInfo">SceKernelMutexInfo</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateLwMutex"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateLwMutex<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>軽量ミューテックス生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelCreateLwMutex</b>(
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexWork">SceKernelLwMutexWork</a> *<i>work</i>,
	const char *<i>name</i>,
	SceUInt <i>attr</i>,
	int <i>initCount</i>,
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexOptParam">SceKernelLwMutexOptParam</a> *<i>optParam</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>work</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;生成する軽量ミューテックスのワークを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;軽量ミューテックスの名前を指定します。デバッグ時にオペレータが見て&nbsp;<br>&nbsp;識別する目的で使うので、ユニークな名前であるかのチェックは特にしません。&nbsp;<br>&nbsp;名前の最大長は31バイトです。&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;<i>attr</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;軽量ミューテックスの属性を指定します。SCE_KERNEL_LWMA_THFIFO&nbsp;<br>&nbsp;およびSCE_KERNEL_LWMA_THPRIはどちらかを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_LWMA_THFIFO&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングは&nbsp;<br>&nbsp;FIFOで行います。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_LWMA_THPRI&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングは&nbsp;<br>&nbsp;スレッドの優先度で行います。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_LWMA_RECURSIVE&nbsp;</td>
<td valign="top">&nbsp;軽量ミューテックスを獲得した&nbsp;<br>&nbsp;スレッドによる再帰的なロックを&nbsp;<br>&nbsp;許可します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>initCount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;軽量ミューテックスの初期ロックカウントです。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>optParam</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;将来の拡張用の引数です。NULLを指定して下さい。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">軽量ミューテックスを生成します。<br><i>initCount</i>が正の値のとき、初期状態からスレッドに所有され<i>initCount</i>回数だけロックされた状態で軽量ミューテックスが生成されます。<i>initCount</i>が0の場合は軽量ミューテックスが獲得されていない状態で生成されます。<br>2以上の値を<i>initCount</i>に指定して軽量ミューテックスを生成するのは、SCE_KERNEL_LWMA_RECURSIVE属性を指定していた場合に限られます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexOptParam">SceKernelLwMutexOptParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteLwMutex"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteLwMutex<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>軽量ミューテックス削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteLwMutex </b>(
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexWork">SceKernelLwMutexWork</a> *<i>work</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>work</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除する軽量ミューテックスのワークを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_LWMUTEXID">SCE_KERNEL_ERROR_UNKNOWN_LWMUTEXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>work</i>で示した軽量ミューテックスを削除します。軽量ミューテックスの待ちキューに登録されていたスレッドにはエラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a>)が返されます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelLockLwMutex"></a><a name="sceKernelLockLwMutexCB"></a><a name="sceKernelTryLockLwMutex"></a>
<a name="sceKernelLockLwMutex / sceKernelLockLwMutexCB / sceKernelTryLockLwMutex"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelLockLwMutex / sceKernelLockLwMutexCB / sceKernelTryLockLwMutex<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>軽量ミューテックス資源獲得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelLockLwMutex</b> (
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexWork">SceKernelLwMutexWork</a> *<i>work</i>,
	int <i>lockcount</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelLockLwMutexCB</b>(
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexWork">SceKernelLwMutexWork</a> *<i>work</i>,
	int <i>lockcount</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelTryLockLwMutex </b>(
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexWork">SceKernelLwMutexWork</a> *<i>work</i>,
	int <i>lockcount</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelLockLwMutex&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelLockLwMutexCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;sceKernelTryLockLwMutex&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;(割り込み禁止&nbsp;/&nbsp;許可状態に依存しない)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>work</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;資源を獲得する軽量ミューテックスのワーク&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>lockcount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;資源獲得後に軽量ミューテックスをロックする回数(1以上)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>timeout</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;マイクロ秒単位で指定した待ち時間の上限を格納した&nbsp;&nbsp;<br>&nbsp;&nbsp;SceUInt型変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;NULLを指定した場合は無限に待ちます。&nbsp;&nbsp;<br>&nbsp;&nbsp;資源が獲得できた時には、残り時間が返ります。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_COUNT">SCE_KERNEL_ERROR_ILLEGAL_COUNT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_LWMUTEXID">SCE_KERNEL_ERROR_UNKNOWN_LWMUTEXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_LWMUTEX_RECURSIVE">SCE_KERNEL_ERROR_LWMUTEX_RECURSIVE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_LWMUTEX_LOCK_OVF">SCE_KERNEL_ERROR_LWMUTEX_LOCK_OVF</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_CANCEL">SCE_KERNEL_ERROR_WAIT_CANCEL</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>work</i>で示した軽量ミューテックスを獲得し<i>lockcount</i>回ロックするする操作を行います。<i>timeout</i>を指定するとマイクロ秒単位で指定されたタイムアウト動作を設定します。<i>timeout</i>がNULLだった場合にはタイムアウト動作は行いません。<br><i>timeout</i>を指定した場合、サービスコール終了時に<i>timeout</i>が示す値が更新されることに注意してください。時間内に条件が成立した場合は残り時間で更新されます。成立しなかった場合は<i>timeout</i>が0で更新され、この場合はエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a>で戻ります。<br>sceKernelLockLwMutexCB()は、sceKernelLockLwMutex()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。軽量ミューテックス待ち状態の間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br>sceKernelTryLockLwMutex()は、sceKernelLockLwMutex()から、WAIT状態に入る機能を取り除いたサービスコールです。sceKernelLockLwMutex()と異なりミューテックスが他のスレッドによって獲得されていた場合、エラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_LWMUTEX_FAILED_TO_OWN">SCE_KERNEL_ERROR_LWMUTEX_FAILED_TO_OWN</a>で戻ります。<br>2以上の値を<i>lockCount</i>に指定して軽量ミューテックスをロックするのは、軽量ミューテックス生成時にSCE_KERNEL_LWMA_RECURSIVE属性を指定していた場合に限られます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelUnlockLwMutex"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelUnlockLwMutex<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>軽量ミューテックス資源返却<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelUnlockLwMutex </b>(
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexWork">SceKernelLwMutexWork</a> *<i>work</i>,
	int <i>unlockcount</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>work</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;資源を返却する軽量ミューテックスのワーク&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>unlockcount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;資源を返却するまでのアンロック回数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_LWMUTEXID">SCE_KERNEL_ERROR_UNKNOWN_LWMUTEXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_LWMUTEX_NOT_OWNED">SCE_KERNEL_ERROR_LWMUTEX_NOT_OWNED</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_LWMUTEX_UNLOCK_UDF">SCE_KERNEL_ERROR_LWMUTEX_UNLOCK_UDF</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>work</i>で示された軽量ミューテックスに対して、<i>unlockcount</i>回数だけアンロックする操作を行います。ロックカウントが0に戻ったとき、軽量ミューテックス資源が解放されます。<br>ただし、ロックカウントが負の値に達してしまうようなアンロックカウント回数の指定が行われた場合は、ロックカウントは変らずにエラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_LWMUTEX_UNLOCK_UDF">SCE_KERNEL_ERROR_LWMUTEX_UNLOCK_UDF</a>)になります。<br>2以上の値を<i>unlockCount</i>に指定して軽量ミューテックスをアンロックするのは、軽量ミューテックス生成時にSCE_KERNEL_MA_RECURSIVE属性を指定していた場合に限られます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferLwMutexStatus"></a><a name="sceKernelReferLwMutexStatusById"></a>
<a name="sceKernelReferLwMutexStatus / sceKernelReferLwMutexStatusById"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferLwMutexStatus / sceKernelReferLwMutexStatusById<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>軽量ミューテックス状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferLwMutexStatus </b>(
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexWork">SceKernelLwMutexWork</a> *<i>work</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexInfo">SceKernelLwMutexInfo</a> *<i>info</i>
);
int <b>sceKernelReferLwMutexStatusById </b>(
	SceUID <i>uid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexInfo">SceKernelLwMutexInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>work</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照する軽量ミューテックスのワーク&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照する軽量ミューテックスID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;軽量ミューテックスの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexInfo">SceKernelLwMutexInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_LWMUTEXID">SCE_KERNEL_ERROR_UNKNOWN_LWMUTEXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">軽量ミューテックスの状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelLwMutexInfo">SceKernelLwMutexInfo</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateMbx"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateMbx<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージボックス生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelCreateMbx</b>(
	const char *<i>name</i>,
	SceUInt <i>attr</i>,
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMbxOptParam">SceKernelMbxOptParam</a> *<i>optParam</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;メッセージボックスの名前を指定します。&nbsp;<br>&nbsp;デバッグ時にオペレータが見て識別する目的で使うので、&nbsp;<br>&nbsp;ユニークな名前であるかのチェックは特にしません。&nbsp;<br>&nbsp;名前の最大長は31バイトです。&nbsp;</td>
</tr>
<tr>
<td rowspan= 6  valign="top">&nbsp;<i>attr</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;メッセージボックスの属性を指定します。&nbsp;<br>&nbsp;待ちスレッドのキューイングに関して以下のどちらかを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MBA_THFIFO&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングは&nbsp;<br>&nbsp;FIFOで行う&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MBA_THPRI&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングは&nbsp;<br>&nbsp;スレッドの優先度で行う&nbsp;</td>
</tr>
<tr>
<td colspan= 2  valign="top">&nbsp;メッセージのキューイングに関して以下のどちらかを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MBA_MSFIFO&nbsp;</td>
<td valign="top">&nbsp;メッセージのキューイングは&nbsp;<br>&nbsp;FIFOで行う&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MBA_MSPRI&nbsp;</td>
<td valign="top">&nbsp;メッセージのキューイングは&nbsp;<br>&nbsp;メッセージの優先度で行う&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>optParam</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;将来の拡張用の引数です。NULLを指定して下さい。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;mbxid(mbxid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージボックスのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">メッセージボックスを生成します。返り値に、生成されたメッセージボックスのIDを返します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMbxOptParam">SceKernelMbxOptParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteMbx"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteMbx<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージボックス削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteMbx </b>(
	SceUID <i>mbxid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mbxid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除するメッセージボックスのIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MBXID">SCE_KERNEL_ERROR_UNKNOWN_MBXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>mbxid</i>で示めしたメッセージボックスを削除します。対象メッセージボックスにおいてメッセージを待っているスレッドがあった場合にも、本サービスコールは正常終了し、待ち状態にあったスレッドには、エラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a>)が返されます。また、対象メッセージボックスの中にメッセージが残っている場合でも、エラーとはならずに、メッセージボックスの削除が行われ、中にあったメッセージは放置されたままになります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSendMbx"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSendMbx<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージボックスへ送信<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSendMbx </b>(
	SceUID <i>mbxid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMsgPacket">SceKernelMsgPacket</a> *<i>sendmsg</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mbxid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;送信先メッセージボックスを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sendmsg</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;送信するメッセージパケットの先頭アドレスを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MBXID">SCE_KERNEL_ERROR_UNKNOWN_MBXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MBOX_LOOP">SCE_KERNEL_ERROR_MBOX_LOOP</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>mbxid</i>で示された対象メッセージボックスに<i>sendmsg</i>を先頭アドレスとするメッセージパケットを送信します。メッセージパケットの内容はコピーされず、受信時には先頭アドレス(<i>sendmsg</i>の値)のみが渡されます。送信されたメッセージパケットは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReceiveMbx">sceKernelReceiveMbx</a>()関数または<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelPollMbx">sceKernelPollMbx</a>()関数で受信されます。sceKernelSendMbx()関数でメッセージを送信したとき、既に当該メッセージボックスに対して<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReceiveMbx">sceKernelReceiveMbx</a>()関数でメッセージを待っているスレッドがあった場合には、待ち行列の先頭のスレッドのWAIT状態が解除され、sceKernelSendMbx()関数で指定した<i>sendmsg</i>がそのスレッドに送信されて、下記<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReceiveMbx">sceKernelReceiveMbx</a>()関数のrecvmsgのリターンパラメータとなります。一方、対象メッセージボックスでメッセージを待っているスレッドがなければ、送信されたメッセージはメッセージボックスの中のメッセージキューに入れられます。どちらの場合にも、sceKernelSendMbx()関数を発行したスレッドがWAIT状態になることはありません。<br>メッセージパケットは、システム規定のメッセージヘッダとそれに連続してつづくアプリケーションプログラムがデータを格納するメッセージボディ部からなります。アプリケーションプログラムは必要に応じてメッセージヘッダ部のmsgPriorityを設定することができます。メッセージヘッダ部のその他の部分をアプリケーションプログラムが操作する必要はありません。マルチスレッドマネージャは、メッセージボディ部をまったく関知しません。<br>メッセージボディ部をどのようなサイズにするか、そのサイズをどのようにスレッド間でやりとりするか(暗黙にサイズを規定するか、ボディ部にサイズを示す情報をのせるか等)はアプリケーションプログラムにまかされています。また、メッセージパケットを格納するメモリの管理もアプリケーションプログラムにまかされています。アプリケーションプログラムの送信スレッドは、マルチスレッドマネージャが提供するメモリプール管理機能を使用してメモリを確保したりプログラム中に宣言した配列変数からメモリを確保して、メッセージパケットのデータを格納し送信します。受信スレッドは受信したメッセージパケットのデータを処理したあと、メモリプール管理機能を使用してメモリを返却したり配列変数に返却したりします。<br>送信スレッドと受信スレッドで一貫したメモリ管理をすることは、アプリケーションプログラムにまかされています。メッセージパケットの内容はコピーされないため、受信されるまで同一アドレスのメッセージパケットをsceKernelSendMbx()関数によって再び送信されないようにする必要があります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReceiveMbx"></a><a name="sceKernelReceiveMbxCB"></a><a name="sceKernelPollMbx"></a>
<a name="sceKernelReceiveMbx / sceKernelReceiveMbxCB / sceKernelPollMbx"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReceiveMbx / sceKernelReceiveMbxCB / sceKernelPollMbx<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージボックスから受信<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReceiveMbx </b>(
	SceUID <i>mbxid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMsgPacket">SceKernelMsgPacket</a> **<i>recvmsg</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelReceiveMbxCB </b>(
	SceUID <i>mbxid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMsgPacket">SceKernelMsgPacket</a> **<i>recvmsg</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelPollMbx </b>(
	SceUID <i>mbxid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMsgPacket">SceKernelMsgPacket</a> **<i>recvmsg</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelReceiveMbx&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelReceiveMbxCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;sceKernelPollMbx&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し可能&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み禁止&nbsp;/&nbsp;許可状態に依存しない)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mbxid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;受信メッセージボックスを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>recvmsg</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;受信メッセージパケットの先頭アドレスを受け取る変数へのポインタを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>timeout</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;マイクロ秒単位で指定した待ち時間の上限を格納したSceUInt型変数への&nbsp;&nbsp;<br>&nbsp;&nbsp;ポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;NULLを指定した場合は無限に待ちます。&nbsp;&nbsp;<br>&nbsp;&nbsp;メッセージを受信できた時には、残り時間が返ります。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MBXID">SCE_KERNEL_ERROR_UNKNOWN_MBXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_CANCEL">SCE_KERNEL_ERROR_WAIT_CANCEL</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MBOX_NOMSG">SCE_KERNEL_ERROR_MBOX_NOMSG</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MBOX_LOOP">SCE_KERNEL_ERROR_MBOX_LOOP</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">sceKernelReceiveMbx()は、<i>mbxid</i>で示された対象メッセージボックスからメッセージを受信します。対象メッセージボックスにまだメッセージが送信されていない場合(メッセージボックスが空の場合)には、本サービスコールを発行したスレッドはWAIT状態となり、メッセージボックスのメッセージ到着待ち行列につながれます。一方、対象メッセージボックスに既にメッセージが入っている場合には、先頭にあるメッセージを一つ取り出して、それをリターンパラメータ<i>recvmsg</i>に格納して戻ります。<br><i>timeout</i>を指定するとマイクロ秒単位で指定されたタイムアウト動作を設定します。<i>timeout</i>がNULLだった場合にはタイムアウト動作は行いません。<br><i>timeout</i>を指定した場合、サービスコール終了時<i>timeout</i>が示す値が更新されることに注意してください。時間内に条件が成立した場合は残り時間で更新されます。成立しなかった場合は<i>timeout</i>が0で更新され、この場合はエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a>で戻ります。<br>sceKernelReceiveMbxCB()は、sceKernelReceiveMbx()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。メッセージ到着待ち状態の間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br>sceKernelPollMbx()は、sceKernelReceiveMbx()から、待ち行列にはいる機能を取り除いたサービスコールです。対象メッセージボックスにまだメッセージが送信されていない場合、エラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MBOX_NOMSG">SCE_KERNEL_ERROR_MBOX_NOMSG</a>)終了することがsceKernelReceiveMbx()と異なります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCancelReceiveMbx"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCancelReceiveMbx<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージボックス受信待ちのキャンセル<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceKernelCancelReceiveMbx </b>(
	SceUID <i>mbxid</i>,
	int *<i>numWaitThreads</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mbxid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージボックスID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;待ち状態を解除されたスレッドの個数を受け取る変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MBXID">SCE_KERNEL_ERROR_UNKNOWN_MBXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>mbxid</i>で指定したメッセージボックスで待っているスレッドの待ち状態を解除します。待ち状態を解除されたスレッドは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReceiveMbx">sceKernelReceiveMbx</a>()の戻値で解除されたことが判断できます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferMbxStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferMbxStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージボックス状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferMbxStatus</b>(
	SceUID <i>mbxid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMbxInfo">SceKernelMbxInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mbxid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するメッセージボックスID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージボックスの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMbxInfo">SceKernelMbxInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MBXID">SCE_KERNEL_ERROR_UNKNOWN_MBXID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">メッセージボックスの状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMbxInfo">SceKernelMbxInfo</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateMsgPipe"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateMsgPipe<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージパイプ生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelCreateMsgPipe</b>(
	const char *<i>name</i>,
	SceUID <i>mpid</i>,
	SceUInt <i>attr</i>,
	SceSize <i>bufsize</i>,
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMppOptParam">SceKernelMppOptParam</a> *<i>optParam</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;メッセージパイプの名前を指定します。&nbsp;<br>&nbsp;デバッグ時にオペレータが見て識別する目的で使うので、ユニークな名前であるかの&nbsp;<br>&nbsp;チェックは特にしません。名前の最大長は31バイトです。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>mpid</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;メッセージパイプのバッファを置くメモリパーティションのIDを指定します。&nbsp;<br>&nbsp;SCE_KERNEL_PRIMARY_USER_PARTITIONを指定してください。&nbsp;</td>
</tr>
<tr>
<td rowspan= 7  valign="top">&nbsp;<i>attr</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;メッセージパイプの属性を指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MPA_THFIFO_S&nbsp;</td>
<td valign="top">&nbsp;送信待ちスレッドのキューイングはFIFOで行う&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MPA_THPRI_S&nbsp;</td>
<td valign="top">&nbsp;送信待ちスレッドのキューイングはスレッドの&nbsp;<br>&nbsp;優先度で行う&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MPA_THFIFO_R&nbsp;</td>
<td valign="top">&nbsp;受信待ちスレッドのキューイングはFIFOで行う&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MPA_THPRI_R&nbsp;</td>
<td valign="top">&nbsp;受信待ちスレッドのキューイングはスレッドの&nbsp;<br>&nbsp;優先度で行う&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MPA_THFIFO&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングはFIFOで行う&nbsp;<br>&nbsp;(送受信とも)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MPA_THPRI&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングはスレッドの優先度で行う(送受信とも)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>bufsize</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;メッセージパイプのバッファサイズを指定します。0を指定することも可能です。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>optParam</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;将来の拡張用の引数です。NULLを指定して下さい。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;mppid(mppid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージパイプのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">メッセージパイプを生成します。返り値に、生成されたメッセージパイプのIDを返します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMppOptParam">SceKernelMppOptParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteMsgPipe"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteMsgPipe<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージパイプ削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteMsgPipe </b>(
	SceUID <i>mppid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mppid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除するメッセージパイプのIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MPPID">SCE_KERNEL_ERROR_UNKNOWN_MPPID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>mbxid</i>で示めしたメッセージパイプを削除します。対象メッセージパイプにおいてメッセージの送信や受信を待っているスレッドがあった場合にも、本サービスコールは正常終了し、待ち状態にあったスレッドには、エラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a>)が返されます。また、対象メッセージパイプの中にメッセージが残っている場合でも、エラーとはならずに、メッセージパイプの削除が行われ、中にあったメッセージは破棄されます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSendMsgPipe"></a><a name="sceKernelSendMsgPipeCB"></a><a name="sceKernelTrySendMsgPipe"></a>
<a name="sceKernelSendMsgPipe / sceKernelSendMsgPipeCB / sceKernelTrySendMsgPipe"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSendMsgPipe / sceKernelSendMsgPipeCB / sceKernelTrySendMsgPipe<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージパイプへ送信<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSendMsgPipe </b>(
	SceUID <i>mppid</i>,
	void *<i>sendbuf</i>,
	SceSize <i>sendsize</i>,
	int <i>waitmode</i>,
	SceSize *<i>result</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelSendMsgPipeCB </b>(
	SceUID <i>mppid</i>,
	void *<i>sendbuf</i>,
	SceSize <i>sendsize</i>,
	int <i>waitmode</i>,
	SceSize *<i>result</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelTrySendMsgPipe </b>(
	SceUID <i>mppid</i>,
	void *<i>sendbuf</i>,
	SceSize <i>sendsize</i>,
	int <i>waitmode</i>,
	SceSize *<i>result</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelSendMsgPipe&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelSendMsgPipeCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;sceKernelTrySendMsgPipe&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し可能&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;(割り込み禁止&nbsp;/&nbsp;許可状態に依存しない)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>mppid</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;送信先メッセージパイプを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>sendbuf</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;送信するデータの先頭アドレスを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>sendsize</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;送信するデータのバイト数を指定します。&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;<i>waitmode</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;待ちモードを指定します。以下のどちらかを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MPW_FULL&nbsp;</td>
<td valign="top">&nbsp;送信データがすべて引き取られるまで待ちます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MPW_ASAP&nbsp;</td>
<td valign="top">&nbsp;1バイトでも送信できるまで待ちます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>result</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;実際に送信されたデータのバイト数を返すSceSize型変数へのポインタを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>timeout</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;マイクロ秒単位で指定した待ち時間の上限を格納したSceUInt型変数への&nbsp;<br>&nbsp;ポインタを指定します。NULLを指定した場合は無限に待ちます。&nbsp;<br>&nbsp;メッセージを受信できた時には、残り時間が返ります。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MPP_FULL">SCE_KERNEL_ERROR_MPP_FULL</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_SIZE">SCE_KERNEL_ERROR_ILLEGAL_SIZE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MODE">SCE_KERNEL_ERROR_ILLEGAL_MODE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MPPID">SCE_KERNEL_ERROR_UNKNOWN_MPPID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_CANCEL">SCE_KERNEL_ERROR_WAIT_CANCEL</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>mppid</i>で示されたメッセージパイプに<i>sendbuf</i>を先頭アドレスとするメッセージデータを送信します。メッセージパイプに付属しているバッファのサイズが0の場合と非0の場合で送信動作が変わります。<br></div>
<div style="margin-left:35px;"><ul>
<li> メッセージパイプのバッファのサイズが0の場合<br>送信スレッドから受信スレッドへ直接データコピーが行われます。<i>waitmode</i>がSCE_KERNEL_MPW_FULLの場合は、受信スレッドによって送信メッセージがすべて引き取られるまでWAIT状態になり、メッセージパイプのメッセージ送信待ち行列につながれます。<i>waitmode</i>がSCE_KERNEL_MPW_ASAPの場合は、受信スレッドによって<i>1</i>バイトでもデータが引き取られればただちに戻ります。受信待ち状態のスレッドがひとつも存在しない場合のみWAIT状態になり、メッセージパイプのメッセージ送信待ち行列につながれます。
<li> メッセージパイプのバッファサイズが非0の場合<br>バッファを介して間接的にデータコピーが行われます。<i>sendsize</i>がパイプバッファサイズよりも大きい場合はエラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_SIZE">SCE_KERNEL_ERROR_ILLEGAL_SIZE</a>)になります。<i>waitmode</i>がSCE_KERNEL_MPW_FULLの場合は、メッセージパイプのバッファに<i>sendsize</i>分の空きがあれば、バッファにデータをすべてコピーしてただちに戻ります。バッファに十分な空きがない場合は、空きができるまでWAIT状態になり、メッセージパイプのメッセージ送信待ち行列につながれます。<i>waitmode</i>がSCE_KERNEL_MPW_ASAPの場合は、メッセージパイプのバッファに<i>1</i>バイトでも空きがあれば、バッファに入るだけのデータをコピーしてただちに戻ります。バッファがいっぱいの場合は、データを引き取れる状態になるまでWAIT状態になり、メッセージパイプのメッセージ送信待ち行列につながれます。
</ul></div>
<div style="margin-left:50px;"><br>実際に送信できたメッセージの長さは、<i>result</i>が指すSceSize型の変数に返されます。<i>waitmode</i>にSCE_KERNEL_MPW_FULLを指定した場合、送信動作が正常終了してsceKernelSendMsgPipe()が<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a>を返すと、この長さは<i>sendsize</i>と等しくなりますが、送信メッセージが受信スレッドによって完全に引き取られないうちにタイムアウトや待ち状態の強制解除などによって送信が中断された場合、または<i>waitmode</i>にSCE_KERNEL_MPW_ASAPを指定した場合は、<i>sendsize</i>より小さな値が返されることがあります。<br><i>timeout</i>を指定するとマイクロ秒単位で指定されたタイムアウト動作を設定します。<i>timeout</i>がNULLだった場合にはタイムアウト動作は行いません。<br><i>timeout</i>を指定した場合、サービスコール終了時<i>timeout</i>が示す値が更新されることに注意してください。時間内に条件が成立した場合は残り時間で更新されます。成立しなかった場合は<i>timeout</i>が0で更新され、この場合はエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a>で戻ります。<br>sceKernelSendMsgPipeCB()は、sceKernelSendMsgPipe()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。<br>メッセージ送信待ちの間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br>sceKernelTrySendMsgPipe()は、sceKernelSendMsgPipe()からWAIT状態に入る機能を取り除いたサービスコールです。<i>waitmode</i>がSCE_KERNEL_MPW_FULLで送信メッセージをすべて引き取れるだけのメッセージパイプバッファや受信待ちスレッドがない場合、または<i>waitmode</i>がSCE_KERNEL_MPW_ASAPでメッセージを<i>1</i>バイトも引き取ることができない場合には、エラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MPP_FULL">SCE_KERNEL_ERROR_MPP_FULL</a>)で戻ります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReceiveMsgPipe"></a><a name="sceKernelReceiveMsgPipeCB"></a><a name="sceKernelTryReceiveMsgPipe"></a>
<a name="sceKernelReceiveMsgPipe / sceKernelReceiveMsgPipeCB / sceKernelTryReceiveMsgPipe"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReceiveMsgPipe / sceKernelReceiveMsgPipeCB / sceKernelTryReceiveMsgPipe<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージパイプから受信<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReceiveMsgPipe </b>(
	SceUID <i>mppid</i>,
	void *<i>recvbuf,</i>
	SceSize <i>recvsize</i>,
	int <i>waitmode</i>,
	SceSize *<i>result</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelReceiveMsgPipeCB </b>(
	SceUID <i>mppid</i>,
	void *<i>recvbuf,</i>
	SceSize <i>recvsize</i>,
	int <i>waitmode</i>,
	SceSize *<i>result</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelTryReceiveMsgPipe </b>(
	SceUID <i>mppid</i>,
	void *<i>recvbuf</i>,
	SceSize<i> recvsize</i>,
	int <i>waitmode</i>,
	SceSize <i>*result</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelReceiveMsgPipe&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelReceiveMsgPipeCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;sceKernelTryReceiveMsgPipe&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し可能&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;(割り込み禁止&nbsp;/&nbsp;許可状態に依存しない)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>mppid</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;受信メッセージパイプを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>recvbuf</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;受信データの格納アドレスを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>recvsize</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;受信するデータの最大バイト数を指定します。&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;<i>waitmode</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;待ちモードを指定します。以下のどちらかを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MPW_FULL&nbsp;</td>
<td valign="top">&nbsp;受信バッファがいっぱいになるまで待ちます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_MPW_ASAP&nbsp;</td>
<td valign="top">&nbsp;1バイトでも受信できるまで待ちます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>result</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;実際に受信したデータのバイト数を返すSceSize型変数へのポインタを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>timeout</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;マイクロ秒単位で指定した待ち時間の上限を格納したSceUInt型変数への&nbsp;<br>&nbsp;ポインタを指定します。&nbsp;<br>&nbsp;NULLを指定した場合は無限に待ちます。&nbsp;<br>&nbsp;メッセージを受信できた時には、残り時間が返ります。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MPP_EMPTY">SCE_KERNEL_ERROR_MPP_EMPTY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_SIZE">SCE_KERNEL_ERROR_ILLEGAL_SIZE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MODE">SCE_KERNEL_ERROR_ILLEGAL_MODE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MPPID">SCE_KERNEL_ERROR_UNKNOWN_MPPID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_CANCEL">SCE_KERNEL_ERROR_WAIT_CANCEL</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>mppid</i>で示されたメッセージパイプからメッセージを受信し、<i>recvbuf</i>を先頭アドレスとする受信バッファに格納します。メッセージパイプに付属しているバッファのサイズが0の場合と非0の場合で受信動作が変わります。<br><br></div>
<div style="margin-left:35px;"><ul>
<li> メッセージパイプのバッファのサイズが0の場合<br>送信スレッドから受信スレッドへ直接データコピーが行われます。<i>waitmode</i>がSCE_KERNEL_MPW_FULLの場合は、<i>recvsize</i>で指定したサイズのデータを受信するまでWAIT状態になり、メッセージパイプのメッセージ受信待ち行列につながれます。<i>waitmode</i>がSCE_KERNEL_MPW_ASAPの場合は、送信待ちスレッドが存在する場合にはデータを最大<i>recvsize</i>バイトまで受信して、すぐに戻ります。送信待ちスレッドがない場合のみWAIT状態になり、メッセージパイプのメッセージ受信待ち行列につながれます。
<li> メッセージパイプのバッファサイズが非0の場合<br>バッファを介して間接的にデータコピーが行われます。<i>recvsize</i>がパイプバッファサイズよりも大きい場合はエラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_SIZE">SCE_KERNEL_ERROR_ILLEGAL_SIZE</a>)になります。<i>waitmode</i>がSCE_KERNEL_MPW_FUL<i>L</i>の場合は、メッセージパイプのバッファに<i>recvsize</i>バイトのデータがあれば、バッファからデータを受け取ってただちに戻ります。バッファにあるデータのサイズが<i>recvsize</i>バイト未満の場合は、<i>recvsize</i>バイト以上のデータがバッファに入るまでWAIT状態になり、メッセージパイプのメッセージ受信待ち行列につながれます。
</ul></div>
<div style="margin-left:50px;"><br><i>waitmode</i>がSCE_KERNEL_MPW_ASAPの場合は、メッセージパイプのバッファに1バイトでもデータがあれば、最大recvsizeバイトまで受信してただちに戻ります。<br>バッファが空の場合は、メッセージパイプへの送信が行われるまでWAIT状態になり、メッセージパイプのメッセージ受信待ち行列につながれます。<br><br>実際に受信できたメッセージの長さは、<i>result</i>が指すSceSize型の変数に返されます。<i>waitmode</i>にSCE_KERNEL_MPW_FULLを指定した場合、受信動作が正常終了してsceKernelReceiveMsgPipe()が<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a>を返すと、この長さは<i>recvsize</i>と等しくなりますが、受信したデータのサイズがrecvsizeに満たないうちにタイムアウトや待ち状態の強制解除などによって受信が中断された場合、または<i>waitmode</i>にSCE_KERNEL_MPW_ASAPを指定した場合には、recvsizeより小さな値が返されることがあります。<br><br>sceKernelReceiveMsgPipeCB()は、sceKernelReceiveMsgPipe()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。<br>メッセージ受信待ちの間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br><br>sceKernelTryReceiveMsgPipe()は、sceKernelReceiveMsgPipe()からWAIT状態に入る機能を取り除いたサービスコールです。<i>waitmode</i>がSCE_KERNEL_MPW_FULLでメッセージパイプのバッファと送信待ちスレッドの持つデータをすべて集めてもサイズが<i>recvsize</i>に満たない場合、または<i>waitmode</i>がSCE_KERNEL_MPW_ASAPでメッセージパイプが空、かつそのメッセージパイプに送信待ちスレッドが存在しない場合には、エラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_MPP_EMPTY">SCE_KERNEL_ERROR_MPP_EMPTY</a>)で戻ります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCancelMsgPipe"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCancelMsgPipe<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージパイプ受信待ちのキャンセル<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceKernelCancelMsgPipe </b>(
	SceUID <i>mppid</i>,
	int *<i>numSendWaitThreads</i>,
	int *<i>numReceiveWaitThreads</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mppid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージパイプID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numSendWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;送信待ち状態を解除されたスレッドの個数を受け取る&nbsp;&nbsp;<br>&nbsp;&nbsp;変数へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numReceiveWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;受信待ち状態を解除されたスレッドの個数を受け取る&nbsp;&nbsp;<br>&nbsp;&nbsp;変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MPPID">SCE_KERNEL_ERROR_UNKNOWN_MPPID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>mppid</i>で指定したメッセージパイプで待っているスレッドの待ち状態を解除します。<br>更に、メッセージパイプのバッファに残っているデータをクリアします。待ち状態を解除されたスレッドは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSendMsgPipe">sceKernelSendMsgPipe</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReceiveMsgPipe">sceKernelReceiveMsgPipe</a>()の返り値で解除されたことが判断できます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferMsgPipeStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferMsgPipeStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[同期・通信機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>メッセージパイプ状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferMsgPipeStatus </b>(
	SceUID <i>mppid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMppInfo">SceKernelMppInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mppid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するメッセージパイプID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージパイプの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMppInfo">SceKernelMppInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_MPPID">SCE_KERNEL_ERROR_UNKNOWN_MPPID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">メッセージパイプの状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelMppInfo">SceKernelMppInfo</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateVpl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateVpl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>可変長メモリプール生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelCreateVpl</b>(
	const char *<i>name</i>,
	SceUID <i>mpid</i>,
	SceUInt <i>attr</i>,
	SceSize <i>size</i>,
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelVplOptParam">SceKernelVplOptParam</a> *<i>optParam</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;可変長メモリプールの名前を指定します。&nbsp;<br>&nbsp;デバッグ時にオペレータが見て識別する目的で使うので、&nbsp;<br>&nbsp;ユニークな名前であるかのチェックは特にしません。&nbsp;<br>&nbsp;名前の最大長は31バイトです。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>mpid</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;メモリプールを置くメモリパーティションのIDを指定します。&nbsp;<br>&nbsp;SCE_KERNEL_PRIMARY_USER_PARTITIONを指定してください。&nbsp;</td>
</tr>
<tr>
<td rowspan= 6  valign="top">&nbsp;<i>attr</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;可変長メモリプールの属性を指定します。&nbsp;<br>&nbsp;以下のどちらかを指定する必要があります。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_VA_THFIFO&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングは&nbsp;<br>&nbsp;FIFOで行います。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_VA_THPRI&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングは&nbsp;<br>&nbsp;スレッドの優先度で行います。&nbsp;</td>
</tr>
<tr>
<td colspan= 2  valign="top">&nbsp;また、オプションで、以下の指定を論理和で追加できます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_VA_MEMBTM&nbsp;</td>
<td valign="top">&nbsp;メモリプールをメモリボトム&nbsp;<br>&nbsp;(大きいアドレス)に近い方から確保します。&nbsp;<br>&nbsp;未指定の場合はメモリのトップ&nbsp;<br>&nbsp;(若いアドレス)に近い方から確保します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_VA_THPASS&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドがすでにキューイングしている&nbsp;<br>&nbsp;状態でも、後続スレッドの方がメモリ要求量&nbsp;<br>&nbsp;が少なかったとき、後着スレッドに対して&nbsp;<br>&nbsp;追い越して先にメモリ確保をみとめます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>size</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;可変長メモリプールの全体サイズ(バイト数)を指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>optParam</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;将来の拡張用の引数です。NULLを指定して下さい。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;vplid( vplid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;可変長メモリプールのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MEMSIZE">SCE_KERNEL_ERROR_ILLEGAL_MEMSIZE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">可変長のメモリブロックを獲得できるメモリプールを作成します。可変長メモリプールからは、メモリプールのサイズを越えない任意のサイズのメモリブロックを獲得できますが、後述の固定長メモリプールに比べて処理時間がかかります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelVplOptParam">SceKernelVplOptParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteVpl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteVpl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>可変長メモリプール削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteVpl </b>(
	SceUID <i>vplid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除する可変長メモリプールIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VPLID">SCE_KERNEL_ERROR_UNKNOWN_VPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vplid</i>で示した可変長メモリプールを削除します。このメモリプールから確保されたメモリブロックのうち返却されていないものが存在してもエラーにはなりません。<br>メモリプール削除後に未返却のメモリブロックを使用した場合のシステムの動作は保証されません。メモリプール削除後に未返却のメモリブロックが使われることが無いようにアプリケーションプログラムを作成する必要があります。メモリ獲得待ちのキューに登録されていたスレッドにはエラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a>)が返されます。<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelAllocateVpl"></a><a name="sceKernelAllocateVplCB"></a><a name="sceKernelTryAllocateVpl"></a>
<a name="sceKernelAllocateVpl / sceKernelAllocateVplCB / sceKernelTryAllocateVpl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelAllocateVpl / sceKernelAllocateVplCB / sceKernelTryAllocateVpl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>可変長メモリブロック獲得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelAllocateVpl </b>(
	SceUID <i>vplid</i>,
	SceSize <i>size</i>,
	void **<i>blockp</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelAllocateVplCB </b>(
	SceUID <i>vplid</i>,
	SceSize <i>size</i>,
	void **<i>blockp</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelTryAllocateVpl </b>(
	SceUID <i>vplid</i>,
	SceSize <i>size</i>,
	void **<i>blockp</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelAllocateVpl&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelAllocateVplCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;sceKernelTryAllocateVpl&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し可能&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;(割り込み禁止&nbsp;/&nbsp;許可状態に依存しない)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリブロックを獲得する可変長メモリプールIDを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリブロックサイズをバイト数で指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>blockp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;獲得したメモリブロックのアドレスが入る変数へのポインタを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>timeout</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;マイクロ秒単位で指定した待ち時間の上限を格納したSceUInt型変数への&nbsp;&nbsp;<br>&nbsp;&nbsp;ポインタを指定します。NULLを指定した場合は無限に待ちます。&nbsp;&nbsp;<br>&nbsp;&nbsp;メモリブロックを獲得できた時には、残り時間が返ります。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MEMSIZE">SCE_KERNEL_ERROR_ILLEGAL_MEMSIZE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VPLID">SCE_KERNEL_ERROR_UNKNOWN_VPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_CANCEL">SCE_KERNEL_ERROR_WAIT_CANCEL</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vplid</i>で示した可変長メモリプールから<i>size</i>バイトのメモリブロックを獲得します。<br>獲得したメモリブロックの内容は不定です。sceKernelAllocateVpl()サービスコールの場合、指定したメモリプールからメモリブロックを獲得できなければ、sceKernelAllocateVpl()を呼び出したスレッドはWAIT状態(メモリ獲得待ち状態)になり、メモリを獲得できるようになるまで待ちます。<br><i>timeout</i>を指定するとマイクロ秒単位で指定されたタイムアウト動作を設定します。<i>timeout</i>がNULLだった場合にはタイムアウト動作は行いません。<br><i>timeout</i>を指定した場合、サービスコール終了時<i>timeout</i>が示す値が更新されることに注意してください。時間内に条件が成立した場合は残り時間で更新されます。成立しなかった場合は<i>timeout</i>が0で更新され、この場合はエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a>で戻ります。<br>sceKernelAllocateVplCB()は、sceKernelAllocateVpl()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。<br>メモリ獲得待ちの間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br>sceKernelTryAllocateVpl()サービスコールは、sceKernelAllocateVpl()サービスコールからWAIT状態にはいる機能を取り除いたサービスコールです。<br>sceKernelAllocateVpl()と異なりメモリが獲得できない場合エラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a>)で戻ります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelFreeVpl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelFreeVpl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>可変長メモリブロック返却<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelFreeVpl </b>(
	SceUID <i>vplid</i>,
	void *<i>block</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリブロックを返却する可変長メモリプールIDを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>block</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;返却するメモリブロックのアドレスを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK">SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VPLID">SCE_KERNEL_ERROR_UNKNOWN_VPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>block</i>で示されるメモリブロックをメモリプール<i>vplid</i>に返却します。<br>返却によりメモリプールに空きができた場合、メモリ獲得待ちでWAIT状態にあった別のスレッドが、メモリを獲得してWAIT状態が解除されることがあります。<br>メモリブロックが、指定されたメモリプールから獲得されたものでない場合はエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK">SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK</a>になります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCancelVpl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCancelVpl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>可変長メモリプールの割り当て待ちのキャンセル<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceKernelCancelVpl </b>(
	SceUID <i>vplid</i>,
	int *<i>numWaitThreads</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;可変長メモリプールID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;待ち状態を解除されたスレッドの個数を受け取る変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VPLID">SCE_KERNEL_ERROR_UNKNOWN_VPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vplid</i>で指定した可変長メモリプールで待っているスレッドの待ち状態を解除します。待ち状態を解除されたスレッドは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelAllocateVpl">sceKernelAllocateVpl</a>()の返り値で解除されたことが判断できます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferVplStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferVplStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>可変長メモリプール状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferVplStatus </b>(
	SceUID <i>vplid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelVplInfo">SceKernelVplInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するメモリプールID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリプールの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelVplInfo">SceKernelVplInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VPLID">SCE_KERNEL_ERROR_UNKNOWN_VPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">可変長メモリプール状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelVplInfo">SceKernelVplInfo</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateFpl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateFpl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>固定長メモリプール生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelCreateFpl</b>(
	const char *<i>name</i>,
	SceUID <i>mpid</i>,
	SceUInt <i>attr</i>,
	SceSize <i>blockSize</i>,
	int <i>numBlocks</i>,
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelFplOptParam">SceKernelFplOptParam</a> *<i>optParam</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;固定長メモリプールの名前を指定します。&nbsp;<br>&nbsp;デバッグ時にオペレータが見て識別する目的で使うので、&nbsp;<br>&nbsp;ユニークな名前であるかのチェックは特にしません。&nbsp;<br>&nbsp;名前の最大長は31バイトです。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>mpid</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;メモリプールを置くメモリパーティションのIDを指定します。&nbsp;<br>&nbsp;SCE_KERNEL_PRIMARY_USER_PARTITIONを指定してください。&nbsp;</td>
</tr>
<tr>
<td rowspan= 5  valign="top">&nbsp;<i>attr</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;固定長メモリプールの属性を指定します。&nbsp;<br>&nbsp;以下のどちらかを指定する必要があります。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_FA_THFIFO&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングは&nbsp;<br>&nbsp;FIFOで行います。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_FA_THPRI&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングは&nbsp;<br>&nbsp;スレッドの優先度で行います。&nbsp;</td>
</tr>
<tr>
<td colspan= 2  valign="top">&nbsp;また、オプションで、以下の指定を論理和で追加できます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_FA_MEMBTM&nbsp;</td>
<td valign="top">&nbsp;メモリプールをメモリボトム&nbsp;<br>&nbsp;(大きいアドレス)に近い方から確保します。&nbsp;<br>&nbsp;未指定の場合はメモリのトップ&nbsp;<br>&nbsp;(若いアドレス)に近い方から確保します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>blockSize</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;固定長メモリプールから獲得できるメモリブロックのサイズを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>numBlocks</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;固定長メモリプールから獲得できるメモリブロックの個数を指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>optParam</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;作成する固定長メモリプールの付加データを指定する、&nbsp;<br>&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelFplOptParam">SceKernelFplOptParam</a>構造体へのポインタを指定します。&nbsp;<br>&nbsp;必ず<i>optParam</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelFplOptParam">SceKernelFplOptParam</a>)を&nbsp;<br>&nbsp;代入して呼び出してください。&nbsp;<br>&nbsp;付加データが不要な場合は、NULLを指定してください。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;fplid(fplid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;固定長メモリプールのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MEMSIZE">SCE_KERNEL_ERROR_ILLEGAL_MEMSIZE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT">SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">固定長のメモリブロックを獲得できるメモリプールを作成します。固定長メモリプールは可変長メモリプールと異なり、一回に獲得できるメモリブロックのサイズが固定長で短い処理時間でメモリを獲得できます。<br><br>作成されたメモリプールから獲得されるメモリブロックは4バイトアラインメントが保証されていますが、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelFplOptParam">SceKernelFplOptParam</a>構造体に付加データを設定し、構造体のアドレスを<i>optParam</i>引数に与えることで、任意のアラインメントを指定することができます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelFplOptParam">SceKernelFplOptParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteFpl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteFpl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>固定長メモリプール削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteFpl </b>(
	SceUID <i>fplid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除する固定長メモリプールIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_FPLID">SCE_KERNEL_ERROR_UNKNOWN_FPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>fplid</i>で示した固定長メモリプールを削除します。このメモリプールから確保されたメモリブロックのうち返却されていないものが存在してもエラーにはなりません。メモリプール削除後に未返却のメモリブロックを使用した場合のシステムの動作は保証されません。メモリプール削除後に未返却のメモリブロックが使われることが無いようにアプリケーションプログラムを作成する必要があります。メモリ獲得待ちのキューに登録されていたスレッドにはエラーが返されます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelAllocateFpl"></a><a name="sceKernelAllocateFplCB"></a><a name="sceKernelTryAllocateFpl"></a>
<a name="sceKernelAllocateFpl / sceKernelAllocateFplCB / sceKernelTryAllocateFpl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelAllocateFpl / sceKernelAllocateFplCB / sceKernelTryAllocateFpl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>固定長メモリブロック獲得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelAllocateFpl </b>(
	SceUID <i>fplid</i>,
	void **<i>blockp</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelAllocateFplCB </b>(
	SceUID <i>fplid</i>,
	void **<i>blockp</i>,
	SceUInt *<i>timeout</i>
);
int <b>sceKernelTryAllocateFpl </b>(
	SceUID <i>fplid</i>,
	void **<i>blockp</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelAllocateFpl&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelAllocateFplCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 3  valign="top">&nbsp;sceKernelTryAllocateFpl&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し可能&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;(割り込み禁止&nbsp;/&nbsp;許可状態に依存しない)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリブロックを獲得する固定長メモリプールIDを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>blockp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;獲得したメモリブロックのアドレスが入る変数へのポインタを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>timeout</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;マイクロ秒単位で指定した待ち時間の上限を格納したSceUInt型変数へのポインタを&nbsp;&nbsp;<br>&nbsp;&nbsp;指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;NULLを指定した場合は無限に待ちます。獲得できたときには、残り時間が返ります。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_FPLID">SCE_KERNEL_ERROR_UNKNOWN_FPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_CANCEL">SCE_KERNEL_ERROR_WAIT_CANCEL</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>fplid</i>で示した固定長メモリプールからメモリブロックを一つ獲得します。<br>獲得するメモリブロックのサイズは、固定長メモリプール生成時に指定されたブロックサイズになります。獲得したメモリブロックの内容は不定です。sceKernelAllocateFpl()サービスコールの場合、指定したメモリプールからメモリブロックを獲得できなければ、sceKernelAllocateFpl()を呼び出したスレッドはWAIT状態(メモリ獲得待ち状態)になり、メモリを獲得できるようになるまで待ちます。<br><i>timeout</i>を指定するとマイクロ秒単位で指定されたタイムアウト動作を設定します。<i>timeout</i>がNULLだった場合にはタイムアウト動作は行いません。<br><i>timeout</i>を指定した場合、サービスコール終了時<i>timeout</i>が示す値が更新されることに注意してください。時間内に条件が成立した場合は残り時間で更新されます。成立しなかった場合は<i>timeout</i>が0で更新され、この場合はエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a>で戻ります。<br>sceKernelAllocateFplCB()は、sceKernelAllocateFpl()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。<br>メモリ獲得待ちの間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br>sceKernelTryAllocateFpl()サービスコールは、sceKernelAllocateFpl()サービスコールからWAIT状態にはいる機能を取り除いたサービスコールです。<br>sceKernelAllocateFpl()と異なりメモリが獲得できない場合エラー(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a>)で戻ります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelFreeFpl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelFreeFpl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>固定長メモリブロック返却<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelFreeFpl </b>(
	SceUID <i>fplid</i>,
	void *<i>block</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリブロックを返却するを固定長メモリプールIDを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>block</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;返却するメモリブロックのアドレスを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK">SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_FPLID">SCE_KERNEL_ERROR_UNKNOWN_FPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>block</i>で示されるメモリブロックをメモリプール<i>fplid</i>に返却します。<br>返却によりメモリプールに空きができた場合、メモリ獲得待ちでWAIT状態にあった別のスレッドが、メモリを獲得してWAIT状態が解除されることがあります。メモリブロックが、指定されたメモリプールから獲得されたものでない場合はエラー<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK">SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK</a>になります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCancelFpl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCancelFpl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>固定長メモリプールの割り当て待ちのキャンセル<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>sceKernelCancelFpl </b>(
	SceUID <i>fplid</i>,
	int *<i>numWaitThreads</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;固定長メモリプールID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>numWaitThreads</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;待ち状態を解除されたスレッドの個数を受け取る変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_FPLID">SCE_KERNEL_ERROR_UNKNOWN_FPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>fplid</i>で指定した固定長メモリプールで待っているスレッドの待ち状態を解除します。待ち状態を解除されたスレッドは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelAllocateFpl">sceKernelAllocateFpl</a>()の返り値で解除されたことが判断できます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferFplStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferFplStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>固定長メモリプール状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferFplStatus </b>(
	SceUID <i>fplid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelFplInfo">SceKernelFplInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するメモリプールID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリプールの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelFplInfo">SceKernelFplInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_FPLID">SCE_KERNEL_ERROR_UNKNOWN_FPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">固定長メモリプール状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelFplInfo">SceKernelFplInfo</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateTlspl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateTlspl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>TLSメモリプール生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelCreateTlspl</b>(
	const char *<i>name</i>,
	SceUID <i>mpid</i>,
	SceUInt <i>attr</i>,
	SceSize <i>blockSize</i>,
	int <i>numBlocks</i>,
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelTlsplOptParam">SceKernelTlsplOptParam</a> *<i>optParam</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="top">&nbsp;<i>name</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;TLSメモリプールの名前を指定します。&nbsp;<br>&nbsp;デバッグ時にオペレータが見て識別する目的で使うので、&nbsp;<br>&nbsp;ユニークな名前であるかのチェックは特にしません。&nbsp;<br>&nbsp;名前の最大長は31バイトです。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>mpid</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;TLSメモリプールを置くメモリパーティションのIDを指定します。&nbsp;<br>&nbsp;SCE_KERNEL_PRIMARY_USER_PARTITIONを指定してください。&nbsp;</td>
</tr>
<tr>
<td rowspan= 5  valign="top">&nbsp;<i>attr</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;TLSメモリプールの属性を指定します。&nbsp;<br>&nbsp;以下のどちらかを指定する必要があります。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TA_THFIFO&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングは&nbsp;<br>&nbsp;FIFOで行います。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TA_THPRI&nbsp;</td>
<td valign="top">&nbsp;待ちスレッドのキューイングは&nbsp;<br>&nbsp;スレッドの優先度で行います。&nbsp;</td>
</tr>
<tr>
<td colspan= 2  valign="top">&nbsp;また、オプションで、以下の指定を論理和で追加できます。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TA_MEMBTM&nbsp;</td>
<td valign="top">&nbsp;TLSメモリプールをメモリボトム&nbsp;<br>&nbsp;(大きいアドレス)に近い方から確保します。&nbsp;<br>&nbsp;未指定の場合はメモリのトップ&nbsp;<br>&nbsp;(若いアドレス)に近い方から確保します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>blockSize</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;TLSメモリプールから獲得できるTLSメモリブロックのサイズを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>numBlocks</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;TLSメモリプールから獲得できるTLSメモリブロックの個数を指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>optParam</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;作成するTLSメモリプールの付加データを指定する、&nbsp;<br>&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelTlsplOptParam">SceKernelTlsplOptParam</a>構造体へのポインタを指定します。&nbsp;<br>&nbsp;必ず<i>optParam</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelTlsplOptParam">SceKernelTlsplOptParam</a>)を&nbsp;<br>&nbsp;代入して呼び出してください。&nbsp;<br>&nbsp;付加データが不要な場合は、NULLを指定してください。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;tlsplid(tlsplid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;TLSメモリプールのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_MEMSIZE">SCE_KERNEL_ERROR_ILLEGAL_MEMSIZE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT">SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UTLS_FULL">SCE_KERNEL_ERROR_UTLS_FULL</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">固定長のTLSメモリブロックを獲得できるTLSメモリプールを作成します。TLSメモリプールは、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetTlsAddr">sceKernelGetTlsAddr</a>()関数でスレッドに固有なTLSメモリブロックを要求してきたスレッドに対して獲得させます。<br><br>作成されたTLSメモリプールから獲得されるTLSメモリブロックは4バイトアラインメントが保証されていますが、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelTlsplOptParam">SceKernelTlsplOptParam</a>構造体に付加データを設定し、構造体のアドレスを<i>optParam</i>引数に与えることで、任意のアラインメントを指定することができます。<br><br>TLSメモリプールはシステム全体で最大16個まで生成することができます。16個を超えて生成しようとすると、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UTLS_FULL">SCE_KERNEL_ERROR_UTLS_FULL</a>エラーが発生します。1個のTLSメモリプールを使用できるスレッドが16個までという意味ではありません。あるTLSメモリプールを使用できるスレッドの個数は<i>numBlocks</i>引数で指定された個数になります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelTlsplOptParam">SceKernelTlsplOptParam</a>, <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetTlsAddr">sceKernelGetTlsAddr</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteTlspl"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteTlspl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>TLSメモリプール削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteTlspl </b>(
	SceUID <i>tlsplid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>tlsplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除するTLSメモリプールIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_TLSPLID">SCE_KERNEL_ERROR_UNKNOWN_TLSPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UTLS_BUSY">SCE_KERNEL_ERROR_UTLS_BUSY</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>tlsplid</i>で示したTLSメモリプールを削除します。このTLSメモリプールからTLSメモリブロックを確保したスレッドが動作していると、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UTLS_BUSY">SCE_KERNEL_ERROR_UTLS_BUSY</a>エラーになります。ただし、自スレッドのみがこのTLSメモリプール使用していた場合に限っては、例外的にsceKernelDeleteTlspl()でTLSメモリプールを削除することができます。<br><br>メモリ獲得待ちのキューに登録されていたスレッドにはエラーが返され、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetTlsAddr">sceKernelGetTlsAddr</a>()関数の戻り値はNULLになります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetTlsAddr"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetTlsAddr<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>TLSメモリブロック獲得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
void *<b>sceKernelGetTlsAddr </b>(
	SceUID <i>tlsplid</i>
);
</font></pre></div>
<div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み 許可状態で呼ぶこと)<br>マルチスレッドセーフである<br>要ディスパッチ許可<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>tlsplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;TLSメモリブロックを獲得するTLSメモリプールIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">TLSメモリブロックの先頭アドレスを返します。<br>何らかの理由でTLSメモリブロック獲得に失敗した場合、NULLを返します。<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>tlsplid</i>で示したTLSメモリプールからTLSメモリブロックを獲得します。すでにそのスレッドが獲得済みのTLSメモリブロックを持っていた場合はそのアドレスを返します。<br>獲得するTLSメモリブロックのサイズは、TLSメモリプール生成時に指定されたブロックサイズになります。TLSメモリブロックの内容はスレッドが始めてTLSメモリブロックを獲得したときに0で初期化されています。sceKernelGetTlsAddr()サービスコールの場合、指定したTLSメモリプールからTLSメモリブロックを獲得できなければ、sceKernelGetTlsAddr()を呼び出したスレッドはWAIT状態(メモリ獲得待ち状態)になり、メモリを獲得できるようになるまで待ちます。<br><br>指定された<i>tlsplid</i>が不正だった場合、呼び出しコンテキストが不正だった場合や、割り込み禁止やディスパッチ禁止状態で呼び出した場合、WAIT状態を<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReleaseWaitThread">sceKernelReleaseWaitThread</a>()関数でキャンセルされた場合、WAIT状態の間にTLSメモリプールが削除された場合など、エラーの場合にはNULL値が返ります。<br><br>獲得したTLSメモリブロックは、スレッドがDORMANT状態になると自動的にTLSメモリプールに返却されます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferTlsplStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferTlsplStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[メモリプール管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>TLSメモリプール状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferTlsplStatus </b>(
	SceUID <i>tlsplid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelTlsplInfo">SceKernelTlsplInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>tlsplid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するTLSメモリプールID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;TLSメモリプールの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelTlsplInfo">SceKernelTlsplInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_TLSPLID">SCE_KERNEL_ERROR_UNKNOWN_TLSPLID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">TLSメモリプール状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelTlsplInfo">SceKernelTlsplInfo</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetSystemTime"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetSystemTime<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>システム時刻の参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelGetSystemTime </b>(
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>clock</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;システム時刻の上位<i>32bit</i>が格納されます&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;システム時刻の下位<i>32bit</i>が格納されます&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">システム稼働開始時からの経過時間(システム時刻)を取得します。システム時刻は1マイクロ秒単位です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetSystemTimeWide"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetSystemTimeWide<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>システム時刻を64ビット幅で参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
unsigned long long <b>sceKernelGetSystemTimeWide</b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">システム時刻<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">システム稼働開始時からの経過時間(システム時刻)を取得します。<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetSystemTime">sceKernelGetSystemTime</a>()との違いは、結果を直接unsigned long long値として返すことです。<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetSystemTimeLow"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetSystemTimeLow<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>システム時刻の下位32bit部分の参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUInt <b>sceKernelGetSystemTimeLow</b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">システム時刻の下位32ビット<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">システム稼働開始時からの経過時間(システム時刻)の下位32ビットを取得します。<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetSystemTime">sceKernelGetSystemTime</a>()や<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetSystemTimeWide">sceKernelGetSystemTimeWide</a>()よりも短い実行時間で取得することが可能です。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDelayThread"></a><a name="sceKernelDelayThreadCB"></a>
<a name="sceKernelDelayThread / sceKernelDelayThreadCB"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDelayThread / sceKernelDelayThreadCB<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドの遅延<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDelayThread </b>(
	SceUInt <i>usec</i>
);
int <b>sceKernelDelayThreadCB </b>(
	SceUInt <i>usec</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelDelayThread&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelDelayThreadCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>usec</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;停止時間をマイクロ秒単位で指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">自スレッドの実行を一時停止し、時間経過待ち状態に入ります。時間経過待ち状態は、WAIT状態の一つですので、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReleaseWaitThread">sceKernelReleaseWaitThread</a>()によって時間経過待ち状態を解除することができます。停止時間の指定はマイクロ秒単位で指定しますが、100マイクロ秒以下の値を指定した場合には100マイクロ秒程度に切り上げられます。複数のスレッドのsceKernelDelayThread()の終了時刻が近接している(200マイクロ秒以下)場合、遅い方の時刻にまとめて待ち状態から復帰することがあります。<br>sceKernelDelayThreadCB()は、sceKernelDelayThread()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。<br>時間経過待ちの間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDelaySysClockThread"></a><a name="sceKernelDelaySysClockThreadCB"></a>
<a name="sceKernelDelaySysClockThread / sceKernelDelaySysClockThreadCB"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDelaySysClockThread / sceKernelDelaySysClockThreadCB<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドの遅延<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDelaySysClockThread </b>(
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>clock</i>
);
int <b>sceKernelDelaySysClockThreadCB </b>(
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>clock</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelDelaySysClockThread&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr>
<tr>
<td rowspan= 4  valign="top">&nbsp;sceKernelDelaySysClockThreadCB&nbsp;</td>
<td valign="top">&nbsp;割り込みハンドラから呼び出し不可&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;スレッドから呼び出し可能&nbsp;<br>&nbsp;(割り込み許可状態で呼ぶこと)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;マルチスレッドセーフである&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;要ディスパッチ許可&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;システムクロック換算の停止時間の上位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;システムクロック換算の停止時間の下位32bit&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">自スレッドの実行を一時停止し、時間経過待ち状態に入ります。時間経過待ち状態は、WAIT状態の一つですので、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelReleaseWaitThread">sceKernelReleaseWaitThread</a>()によって時間経過待ち状態を解除することができます。停止時間の指定はマイクロ秒単位で指定しますが、100マイクロ秒以下の値を指定した場合には100マイクロ秒程度に切り上げられます。複数のスレッドの<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDelayThread">sceKernelDelayThread</a>()の終了時刻が近接している(200マイクロ秒以下)場合、遅い方の時刻にまとめて待ち状態から復帰することがあります。時間の指定の仕方が異なるだけで、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDelayThread">sceKernelDelayThread</a>()とほぼ同じ機能です。<br>sceKernelDelaySysClockThreadCB()は、sceKernelDelaySysClockThread()に、待ち状態に入っている間にコールバック通知の有無をチェックする機能を追加したサービスコールです。<br>時間経過待ちの間に自スレッドのコールバックに対して通知が行われると、一旦待ち状態から抜けてコールバック関数を実行した後、再び待ち状態に入ります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSetAlarm"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSetAlarm<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>アラームハンドラの設定<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelSetAlarm</b>(
	SceUInt <i>usec</i>,
	SceUInt(*<i>handler</i>)(void*),
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>usec</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ハンドラ起動までの時間をマイクロ秒単位で指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>handler</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アラームハンドラのエントリポイント&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アラームハンドラと一般ルーチンが共有するメモリへのポインタ。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;almid(almid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アラームのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定時間経過後に呼び出されるアラームハンドラを設定します。アラームハンドラは、割り込みハンドラに似て引数をひとつ持ち、スレッド独立部として呼び出されます。経過時間の指定はシステムクロック単位で指定しますが、100マイクロ秒以下の値を指定した場合には100マイクロ秒程度に切り上げられます。複数のスレッドの<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDelayThread">sceKernelDelayThread</a>()の終了時刻やアラームの時間満了が近接している(200マイクロ秒以下)場合、遅い方の時刻にまとめて処理されることがあります。アラームハンドラは指定時間経過後に呼び出されたときのハンドラ自身の返り値によって、解除されるか引き続きアラーム動作をするかが決まります。また後述の<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCancelAlarm">sceKernelCancelAlarm</a>()で、指定時間経過を待たずに解除することもできます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCancelAlarm">sceKernelCancelAlarm</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#alarmhandler">alarmhandler</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSetSysClockAlarm"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSetSysClockAlarm<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>アラームハンドラの設定<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelSetSysClockAlarm</b>(
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>clock</i>,
	SceUInt (*<i>handler</i>)(void*),
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ハンドラ起動までの時間の上位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ハンドラ起動までの時間の下位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>handler</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アラームハンドラのエントリポイント&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アラームハンドラと一般ルーチンが共有するメモリへのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;almid(almid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アラームのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定時間経過後に呼び出されるアラームハンドラを設定します。アラームハンドラは、割り込みハンドラに似て引数をひとつ持ち、スレッド独立部として呼び出されます。経過時間の指定はシステムクロック単位で指定しますが、100マイクロ秒以下の値を指定した場合には100マイクロ秒程度に切り上げられます。複数のスレッドの<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDelayThread">sceKernelDelayThread</a>()の終了時刻やアラームの時間満了が近接している(200マイクロ秒以下)場合、遅い方の時刻にまとめて処理されることがあります。アラームハンドラは指定時間経過後に呼び出されたときのハンドラ自身の返り値によって、解除されるか引き続きアラーム動作をするかが決まります。また後述の<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCancelAlarm">sceKernelCancelAlarm</a>()で、指定時間経過を待たずに解除することもできます。時間の指定の仕方が異なるだけで、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetAlarm">sceKernelSetAlarm</a>()とほぼ同じ機能です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a>, <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCancelAlarm">sceKernelCancelAlarm</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#alarmhandler">alarmhandler</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="alarmhandler"></a>
<table width="100%"><td width="70%"><font size=6>alarmhandler<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>アラームハンドラのプロトタイプ<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUInt <b>alarmhandler</b>(
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラのコンテキストで呼び出されます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetAlarm">sceKernelSetAlarm</a>()で指定された<i>common</i>が渡されます。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;このアラームハンドラを削除する。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;clock(clock&gt;=1)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;このアラームハンドラを返り値で示すクロック後、再び呼び出す。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">アラームハンドラは、その返り値(マイクロ秒単位)により再び呼び出しを受けることを指定できます。アラームハンドラが戻す値が0の場合は、そのアラームハンドラは削除されます。アラームハンドラが戻す値が1以上の場合は、ハンドラの今回の呼び出し予定時刻にその値が足しこまれて次の呼び出し予定時刻を決定します。ただし、100マイクロ秒以下の値の場合には100マイクロ秒程度に切り上げられます。<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetAlarm">sceKernelSetAlarm</a>()の節で説明したようにハンドラの呼び出しは必ずしも正確に指定した時刻に行われるわけではなく、遅れる場合がありますが、次のハンドラ呼び出し時刻は実際にハンドラが呼び出された時刻ではなく、呼び出し予定時刻を基準に計算されるので、呼び出しの遅れが累積することはありません。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_6_3">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">アラームハンドラは割り込みハンドラの一種です。したがってシステムのサービスコールの利用には制限があります。「マルチスレッドマネージャ管理下でのシステム状態」の節の「スレッド独立部から発行するサービスコール」を参照してください。<br>また、アラームハンドラからグローバルデータ(グローバル変数および文字列リテラル等)への直接アクセスは、アラームハンドラを含むモジュールの作成時のコンパイルオプション(-G 0 以外の場合)によっては不可能な場合があります。グローバルデータへのアクセスが必要な場合は<i>common</i>引数によって明示的にグローバルデータのアドレスを引き渡すことを推奨します。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCancelAlarm"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCancelAlarm<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>アラームハンドラの解除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelCancelAlarm </b>(
	SceUID <i>almid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>almid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;解除するアラームのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_ALMID">SCE_KERNEL_ERROR_UNKNOWN_ALMID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetAlarm">sceKernelSetAlarm</a>()で設定したアラームハンドラを、時間経過を待たずに解除します。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferAlarmStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferAlarmStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>アラーム状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferAlarmStatus </b>(
	SceUID <i>almid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelAlarmInfo">SceKernelAlarmInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>almid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照するアラームID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アラームの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelAlarmInfo">SceKernelAlarmInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_ALMID">SCE_KERNEL_ERROR_UNKNOWN_ALMID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">アラームの状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelAlarmInfo">SceKernelAlarmInfo</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelUSec2SysClock"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelUSec2SysClock<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>マイクロ秒をシステムクロック値に変換<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelUSec2SysClock </b>(
	unsigned int <i>usec</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>clock</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>usec</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換したいマイクロ秒の値を指定します&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換した結果の上位32bitが格納されます&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換した結果の下位32bitが格納されます&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">マイクロ秒をシステムクロック値に変換するユーティリティ関数です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelUSec2SysClockWide"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelUSec2SysClockWide<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>マイクロ秒を64bitのシステムクロック値に変換<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
unsigned long long <b>sceKernelUSec2SysClockWide</b>(
	unsigned int <i>usec</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>usec</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換したいマイクロ秒の値を指定します&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;clock&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換した結果&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">マイクロ秒をシステムクロック値に変換するユーティリティ関数です。<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelUSec2SysClock">sceKernelUSec2SysClock</a>()との違いは、結果を直接unsigned long long値として返すことです。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSysClock2USec"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSysClock2USec<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>システムクロック値を実時間に変換<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSysClock2USec </b>(
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>clock</i>,
	int *<i>sec</i>,
	int *<i>usec</i>
);
</font></pre></div>
<div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換したいシステムクロック値の上位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換したいシステムクロック値の下位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sec</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換した結果の秒の単位を格納する変数へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>usec</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換した結果のマイクロ秒の単位を格納する変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">システムクロック値をマイクロ秒に変換するユーティリティ関数です。<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSysClock2USecWide"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSysClock2USecWide<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[時間/ソフトタイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>64bitのシステムクロック値を実時間に変換<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSysClock2USecWide </b>(
	unsigned long long <i>clock</i>,
	int *<i>sec</i>,
	int *<i>usec</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換したいシステムクロック値&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sec</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換した結果の秒の単位を格納する変数へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>usec</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;変換した結果のマイクロ秒の単位を格納する変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">システムクロック値をマイクロ秒に変換するユーティリティ関数です。<br>クロック指定の仕方が異なるだけで、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSysClock2USec">sceKernelSysClock2USec</a>()とほぼ同じ機能です。<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCreateVTimer"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCreateVTimer<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマ生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUID <b>sceKernelCreateVTimer</b>(
	const char *<i>name</i>,
	const <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelVTimerOptParam">SceKernelVTimerOptParam</a> *<i>optParam</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマの名前を指定します。デバッグ時にオペレータが見て識別する目的で&nbsp;&nbsp;<br>&nbsp;&nbsp;使うので、ユニークな名前であるかのチェックは特にしません。&nbsp;&nbsp;<br>&nbsp;&nbsp;名前の最大長は31バイトです。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>optParam</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;将来の拡張用の引数です。NULLを指定して下さい。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;vtid(vtid&gt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマのID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">仮想タイマを生成します。返り値として、生成された仮想タイマのIDを返します。生成直後の仮想タイマは停止状態です。仮想タイマのカウントを開始するには、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelStartVTimer">sceKernelStartVTimer</a>()を使用します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelVTimerOptParam">SceKernelVTimerOptParam</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDeleteVTimer"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDeleteVTimer<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマ削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDeleteVTimer </b>(
	SceUID <i>vtid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;削除する仮想タイマIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VTID">SCE_KERNEL_ERROR_UNKNOWN_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマを削除します。対象仮想タイマに設定したハンドラも解除されます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetVTimerBase"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetVTimerBase<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマの基準時刻の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelGetVTimerBase </b>(
	SceUID <i>vtid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>base</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;基準時刻を取得する仮想タイマIDを指定します&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>base</i>-&gt;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;基準時刻の上位32bitが格納されます&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>base</i>-&gt;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;基準時刻の下位32bitが格納されます&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VTID">SCE_KERNEL_ERROR_UNKNOWN_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマの基準時刻、すなわちその仮想タイマの時刻ゼロに対応するシステム時刻の値を取得します。<br>仮想タイマを割り当てた直後はカウント値はゼロに初期化されているので、通常、仮想タイマの基準時刻は<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelStartVTimer">sceKernelStartVTimer</a>()でタイマを起動した時刻と一致しています。<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelStopVTimer">sceKernelStopVTimer</a>()で仮想タイマを一時停止したり、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetVTimerTime">sceKernelSetVTimerTime</a>()で仮想タイマ時刻を操作した場合には、基準時刻が仮タイマを起動した時刻と一致しなくなります。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetVTimerBaseWide"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetVTimerBaseWide<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマの基準時刻をunsigned long long型で取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
unsigned long long <b>sceKernelGetVTimerBaseWide</b>(
	SceUID <i>vtid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;基準時刻を取得する仮想タイマIDを指定します&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;base(base!=-1)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマの基準時刻&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;-1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;不正な仮想タイマID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマの基準時刻、すなわちその仮想タイマの時刻ゼロに対応するシステム時刻の値を取得します。<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetVTimerBase">sceKernelGetVTimerBase</a>()との違いは、結果を直接unsigned long long値として返すことです。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetVTimerTime"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetVTimerTime<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマの現在時刻の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelGetVTimerTime </b>(
	SceUID <i>vtid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>clock</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;基準時刻を取得する仮想タイマIDを指定します&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;現在時刻の上位32bitが格納されます&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;現在時刻の下位32bitが格納されます&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VTID">SCE_KERNEL_ERROR_UNKNOWN_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマの現在時刻を取得します。時刻は1マイクロ秒単位です。<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetVTimerTimeWide"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetVTimerTimeWide<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマの現在時刻をunsigned long long型で取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
unsigned long long <b>sceKernelGetVTimerTimeWide</b>(
	SceUID <i>vtid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;基準時刻を取得する仮想タイマIDを指定します&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;clock(clock!=-1)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマの現在時刻&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;-1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;不正な仮想タイマID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマの現在時刻を取得します。<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelGetVTimerTime">sceKernelGetVTimerTime</a>()との違いは、結果を直接unsigned long long値として返すことです。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSetVTimerTime"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSetVTimerTime<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマの現在時刻の設定<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSetVTimerTime </b>(
	SceUID <i>vtid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>clock</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;基準時刻を取得する仮想タイマIDを指定します。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;設定時刻の上位32bitを指定します。返り値として、&nbsp;&nbsp;<br>&nbsp;&nbsp;設定前の時刻の上位32bitが格納されます。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>-&gt;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;設定時刻の下位32bitを指定します。返り値として、&nbsp;&nbsp;<br>&nbsp;&nbsp;設定前の時刻の下位32bitが格納されます。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VTID">SCE_KERNEL_ERROR_UNKNOWN_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマの現在時刻を設定します。仮想タイマにハンドラが設定されているとき、ハンドラの呼び出し予定時刻を過ぎた時刻を現在時刻に設定すると、設定した直後にハンドラが呼び出されます。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSetVTimerTimeWide"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSetVTimerTimeWide<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマの現在時刻をunsigned long long型で設定<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
unsigned long long <b>sceKernelSetVTimerTimeWide</b>(
	SceUID <i>vtid</i>,
	unsigned long long <i>clock</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;基準時刻を取得する仮想タイマIDを指定します&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>clock</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマに設定する時刻&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;clock(clock!=-1)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;設定前の仮想タイマの現在時刻&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;-1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;不正な仮想タイマID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマの現在時刻を設定します。時刻指定の仕方が異なるだけで、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetVTimerTime">sceKernelSetVTimerTime</a>()とほぼ同じ機能です。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelStartVTimer"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelStartVTimer<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマの起動<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelStartVTimer </b>(
	SceUID <i>vtid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;起動する仮想タイマIDを指定します&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマを起動した&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマはすでに動作中だった&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VTID">SCE_KERNEL_ERROR_UNKNOWN_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_VTID">SCE_KERNEL_ERROR_ILLEGAL_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマのカウントを開始します。<br>このサービスコールは割り込みハンドラから呼び出すことができますが、仮想タイマのハンドラ関数内で、自分自身の仮想タイマIDを指定して仮想タイマを起動することはできません。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelStopVTimer"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelStopVTimer<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマの停止<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelStopVTimer </b>(
	SceUID <i>vtid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;停止する仮想タイマIDを指定します&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマはすでに停止中だった&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマを停止した&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VTID">SCE_KERNEL_ERROR_UNKNOWN_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_VTID">SCE_KERNEL_ERROR_ILLEGAL_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマのカウントを停止します。<br>このサービスコールは割り込みハンドラから呼び出すことができますが、仮想タイマのハンドラ関数内で、自分自身の仮想タイマIDを指定して仮想タイマを停止することはできません。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSetVTimerHandler"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSetVTimerHandler<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマハンドラの設定<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSetVTimerHandler </b>(
	SceUID <i>vtid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>schedule</i>,
	SceUInt (*<i>handler</i>)(SceUID, <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *, <a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *, void *),
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマIDを指定します&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>schedule</i>-&gt;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ハンドラ起動時刻の上位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>schedule</i>-&gt;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ハンドラ起動時刻の下位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>handler</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマハンドラのエントリポイント&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマハンドラに渡される引数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VTID">SCE_KERNEL_ERROR_UNKNOWN_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_VTID">SCE_KERNEL_ERROR_ILLEGAL_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマの時刻が<i>schedule</i>になったときに呼び出されるハンドラを設定します。複数のスレッドの<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDelayThread">sceKernelDelayThread</a>()の終了時刻やアラームの時間満了が近接している(200マイクロ秒以下)場合、遅い方の時刻にまとめて処理されることがあります。<br>このサービスコールは割り込みハンドラから呼び出すことができますが、仮想タイマのハンドラ関数内で、自分自身の仮想タイマIDを指定して仮想タイマハンドラを設定することはできません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#vtimerhandler">vtimerhandler</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vtimerhandler"></a>
<table width="100%"><td width="70%"><font size=6>vtimerhandler<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマハンドラのプロトタイプ<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUInt <b>vtimerhandler</b>(
	SceUID <i>vtid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>schedule</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSysClock">SceKernelSysClock</a> *<i>actual</i>,
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラのコンテキストで呼び出されます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>schedule</i>-&gt;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;予定されていたハンドラ起動時刻の上位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>schedule</i>-&gt;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;予定されていたハンドラ起動時刻の下位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>actual</i>-&gt;<i>hi</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;実際のハンドラ起動時刻の上位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>actual</i>-&gt;<i>low</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;実際のハンドラ起動時刻の下位32bit&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetVTimerHandler">sceKernelSetVTimerHandler</a>()で指定された<i>common</i>が渡されます&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;このハンドラを解除する&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;clock(clock&gt;=1)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;指定した時間後(マイクロ秒単位)に、このハンドラを再び呼び出す&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">仮想タイマハンドラは、あらかじめ<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetVTimerHandler">sceKernelSetVTimerHandler</a>()で指定した時刻に呼び出されます。呼び出される時刻は正確ではなく、予定時刻よりも遅れる場合がありますが、どれだけ遅れて呼び出されたかは<i>actual</i>から<i>schedule</i>を減じて求めることができます。仮想タイマハンドラの再呼び出しは、ハンドラ関数の返り値に応じて決定されます。<br>ハンドラ関数が0を返せば、そのハンドラの登録は解除されます(仮想タイマ自体は削除されずに残ります)。ハンドラ関数が1以上の値を返せば、今回の呼び出し予定時刻にその値(マイクロ秒単位)を加えた値が次回の呼び出し予定時刻となって、再呼び出しが起こります。ただし、100マイクロ秒以下の値を指定した場合は、100マイクロ秒程度に切り上げられます。仮想タイマハンドラの呼び出しは設定した予定時刻よりも遅れる場合がありますが、次のハンドラ呼び出し時刻は実際にハンドラが呼び出された時刻ではなく、呼び出し予定時刻を基準に計算されるので、呼び出しの遅れが累積することはありません。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_7_4">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">仮想タイマハンドラは割り込みハンドラの一種です。したがってシステムのサービスコールの利用には制限があります。「マルチスレッドマネージャ管理下でのシステム状態」の節の「スレッド独立部から発行するサービスコール」を参照してください。<br>また、仮想タイマハンドラからグローバルデータ(グローバル変数および文字列リテラル等)への直接アクセスは、仮想タイマハンドラを含むモジュールの作成時のコンパイルオプション(-G 0 以外の場合)によっては不可能な場合があります。仮想タイマハンドラへのアクセスが必要な場合は<i>common</i>引数によって明示的にグローバルデータのアドレスを引き渡すことを推奨します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetVTimerHandler">sceKernelSetVTimerHandler</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelSetVTimerHandlerWide"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelSetVTimerHandlerWide<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>64bit引数の仮想タイマハンドラの設定<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelSetVTimerHandlerWide </b>(
	SceUID <i>vtid</i>,
	unsigned long long <i>schedule</i>,
	SceUInt (*<i>handler</i>)(SceUID, unsigned long long *, unsigned long long *, void *),
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマIDを指定します&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>schedule</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ハンドラ起動時刻&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>handler</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマハンドラのエントリポイント&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマハンドラに渡される引数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VTID">SCE_KERNEL_ERROR_UNKNOWN_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_VTID">SCE_KERNEL_ERROR_ILLEGAL_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマの時刻が<i>schedule</i>になったときに呼び出されるハンドラを設定します。時刻指定の仕方が異なるだけで、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetVTimerHandler">sceKernelSetVTimerHandler</a>()とほぼ同じ機能です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#vtimerhandlerwide">vtimerhandlerwide</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vtimerhandlerwide"></a>
<table width="100%"><td width="70%"><font size=6>vtimerhandlerwide<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>64ビット引数の仮想タイマハンドラのプロトタイプ<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
SceUInt <b>vtimerhandlerwide</b>(
	SceUID <i>vtid</i>,
	unsigned long long *<i>schedule</i>,
	unsigned long long *<i>actual</i>,
	void *<i>common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラのコンテキストで呼び出されます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>schedule</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;予定されていたハンドラ起動時刻を格納したunsigned long long変数へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>actual</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;実際のハンドラ起動時刻を格納したunsigned long long変数へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetVTimerHandlerWide">sceKernelSetVTimerHandlerWide</a>()で指定された<i>common</i>が渡されます&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;このハンドラを解除する&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;clock(clock&gt;=1)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;指定した時間後(マイクロ秒単位)に、このハンドラを再び呼び出す&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">仮想タイマハンドラが<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetVTimerHandlerWide">sceKernelSetVTimerHandlerWide</a>()によって設定された場合に呼び出される仮想タイマハンドラは、このプロトタイプを使用します。呼び出し予定時刻、実際の起動時刻を渡すための型以外の違いはありません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSetVTimerHandlerWide">sceKernelSetVTimerHandlerWide</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelCancelVTimerHandler"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelCancelVTimerHandler<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマハンドラの解除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelCancelVTimerHandler </b>(
	SceUID <i>vtid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマIDを指定します&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VTID">SCE_KERNEL_ERROR_UNKNOWN_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_VTID">SCE_KERNEL_ERROR_ILLEGAL_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>vtid</i>で指定した仮想タイマに設定したハンドラを解除します。<br>このサービスコールは割り込みハンドラから呼び出すことができますが、仮想タイマのハンドラ関数内で、自分自身の仮想タイマIDを指定して仮想タイマハンドラを解除することはできません。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferVTimerStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferVTimerStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[仮想タイマ管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>仮想タイマ状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferVTimerStatus </b>(
	SceUID <i>vtid</i>,
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelVTimerInfo">SceKernelVTimerInfo</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>vtid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照する仮想タイマID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;仮想タイマの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelVTimerInfo">SceKernelVTimerInfo</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_UNKNOWN_VTID">SCE_KERNEL_ERROR_UNKNOWN_VTID</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">仮想タイマの状態を参照します。このサービスコールはデバッグ支援のために用意されています。このサービスコールで取得できる情報は刻一刻と変化します。このサービスコールを頻繁に使用し、取得した情報で制御を変えるようなプログラミングは推奨できません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelVTimerInfo">SceKernelVTimerInfo</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelReferSystemStatus"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelReferSystemStatus<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[システム管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>システム状態参照<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelReferSystemStatus </b>(
	<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSystemStatus">SceKernelSystemStatus</a> *<i>info</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>info</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;システムの状態を受け取る構造体変数へのポインタを指定します。&nbsp;&nbsp;<br>&nbsp;&nbsp;必ず、<i>info</i>-&gt;<i>size</i>にsizeof(<a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSystemStatus">SceKernelSystemStatus</a>)を代入して呼び出してください。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">システムの状態を参照します。このサービスコールはいつでも呼び出し可能です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SceKernelSystemStatus">SceKernelSystemStatus</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetThreadmanIdList"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetThreadmanIdList<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[システム管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドマネージャの管理下のIDリスト取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelGetThreadmanIdList </b>(
	int <i>type</i>,
	SceUID *<i>readbuf</i>,
	int <i>readbufsize</i>,
	int *<i>idcount</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td rowspan= 27  valign="top">&nbsp;<i>type</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;取得したいIDリストを以下のいずれかで指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_Thread&nbsp;</td>
<td valign="top">&nbsp;全スレッドのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_SleepThread&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelSleepThread">sceKernelSleepThread</a>()実行中の&nbsp;<br>&nbsp;スレッドのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_DelayThread&nbsp;</td>
<td valign="top">&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDelayThread">sceKernelDelayThread</a>()実行中の&nbsp;<br>&nbsp;スレッドのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_SuspendThread&nbsp;</td>
<td valign="top">&nbsp;SUSPEND状態のスレッドの&nbsp;<br>&nbsp;リストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_DormantThread&nbsp;</td>
<td valign="top">&nbsp;DORMANT状態のスレッドの&nbsp;<br>&nbsp;リストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_Semaphore&nbsp;</td>
<td valign="top">&nbsp;セマフォのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_EventFlag&nbsp;</td>
<td valign="top">&nbsp;イベントフラグのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_Mbox&nbsp;</td>
<td valign="top">&nbsp;メッセージボックスのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_Vpl&nbsp;</td>
<td valign="top">&nbsp;可変長メモリプールのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_Fpl&nbsp;</td>
<td valign="top">&nbsp;固定長メモリプールのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_Mpipe&nbsp;</td>
<td valign="top">&nbsp;メッセージパイプのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_Callback&nbsp;</td>
<td valign="top">&nbsp;コールバックのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_ThreadEventHandler&nbsp;</td>
<td valign="top">&nbsp;スレッドイベントハンドラの&nbsp;<br>&nbsp;リストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_Alarm&nbsp;</td>
<td valign="top">&nbsp;アラームハンドラのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_VTimer&nbsp;</td>
<td valign="top">&nbsp;仮想タイマのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_Mutex&nbsp;</td>
<td valign="top">&nbsp;ミューテックスのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_LwMutex&nbsp;</td>
<td valign="top">&nbsp;軽量ミューテックスのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;SCE_KERNEL_TMID_Tlspl&nbsp;</td>
<td valign="top">&nbsp;TLSメモリブロックのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;セマフォID&nbsp;</td>
<td valign="top">&nbsp;指定したセマフォで待ちに&nbsp;<br>&nbsp;入っているスレッドのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;イベントフラグID&nbsp;</td>
<td valign="top">&nbsp;指定したイベントフラグで待ちに&nbsp;<br>&nbsp;入っているスレッドのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;ミューテックスID&nbsp;</td>
<td valign="top">&nbsp;指定したミューテックスで待ちに&nbsp;<br>&nbsp;入っているスレッドのリストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;軽量ミューテックスID&nbsp;</td>
<td valign="top">&nbsp;指定した軽量ミューテックスで&nbsp;<br>&nbsp;待ちに入っているスレッドの&nbsp;<br>&nbsp;リストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;メッセージボックスID&nbsp;</td>
<td valign="top">&nbsp;指定したメッセージボックスで&nbsp;<br>&nbsp;待ちに入っているスレッドの&nbsp;<br>&nbsp;リストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;可変長メモリプールID&nbsp;</td>
<td valign="top">&nbsp;指定した可変長メモリプールで&nbsp;<br>&nbsp;待ちに入っているスレッドの&nbsp;<br>&nbsp;リストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;固定長メモリプールID&nbsp;</td>
<td valign="top">&nbsp;指定した固定長メモリプールで&nbsp;<br>&nbsp;待ちに入っているスレッドの&nbsp;<br>&nbsp;リストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;TLSメモリプールID&nbsp;</td>
<td valign="top">&nbsp;指定したTLSメモリプールで&nbsp;<br>&nbsp;待ちに入っているスレッドの&nbsp;<br>&nbsp;リストの取得&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>readbuf</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;IDのリストを格納するSceUID型配列の先頭へのポインタを指定します。&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>readbufsize</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;<i>readbuf</i>のサイズ(格納可能ID数)&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<i>idcount</i>&nbsp;</td>
<td colspan= 2  valign="top">&nbsp;指定したタイプのIDの数を取得する変数へのポインタ。&nbsp;<br>&nbsp;NULLを指定した場合は、IDの数は取得しません。&nbsp;</td>
</tr></table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;count&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;count&gt;=0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッファに読み込めたエントリ数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_TYPE">SCE_KERNEL_ERROR_ILLEGAL_TYPE</a><br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a><br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">このサービスコールはデバッグ支援のために用意されています。スレッドマネージャの管理する、スレッド、セマフォ、イベントフラグ等のIDのリストを取得します。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelGetThreadmanIdType"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelGetThreadmanIdType<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[システム管理機能]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スレッドマネージャの管理下のIDの型を取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelGetThreadmanIdType </b>(
	SceUID <i>uid</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能(割り込み禁止 / 許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;型を取得したいIDを指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>マクロ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_Thread&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDはスレッドである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_Semaphore&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDはセマフォである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_EventFlag&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDはイベントフラグである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_Mbox&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDはメッセージボックスである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_Vpl&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDは可変長メモリプールである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_Fpl&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDは固定長メモリプールである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_Mpipe&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDはメッセージパイプである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_Callback&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDはコールバックである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_ThreadEventHandler&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDはスレッドイベントハンドラである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_Alarm&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDはアラームハンドラである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_VTimer&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDは仮想タイマである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_Mutex&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDはミューテックスである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_LwMutex&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDは軽量ミューテックスである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_TMID_Tlspl&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDはTLSメモリプールである&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;IDはスレッドマネージャによって管理&nbsp;&nbsp;<br>&nbsp;&nbsp;されていない&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">スレッドマネージャの管理する、スレッド、セマフォ、イベントフラグ等のIDから、そのIDの型を取得します。<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="エラーコード一覧"></a>
<table width="100%"><td width="70%"><font size=6>エラーコード一覧<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[エラーコード]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>PSP&reg;スレッドマネージャAPIの返すエラーコード<br></div><br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>マクロ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>説明</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;正常&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_CONTEXT">SCE_KERNEL_ERROR_ILLEGAL_CONTEXT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020064&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;割り込みハンドラからの&nbsp;&nbsp;<br>&nbsp;&nbsp;呼び出しだった&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_CPUDI">SCE_KERNEL_ERROR_CPUDI</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020066&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;既に割り込み禁止だった&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_PERM">SCE_KERNEL_ERROR_ILLEGAL_PERM</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800200d1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;許可属性が正しくない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT">SCE_KERNEL_ERROR_ILLEGAL_ARGUMENT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800200d2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;引数が不正&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_ADDR">SCE_KERNEL_ERROR_ILLEGAL_ADDR</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800200d3&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アドレスが不正&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_NO_MEMORY">SCE_KERNEL_ERROR_NO_MEMORY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020190&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリ不足&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_ATTR">SCE_KERNEL_ERROR_ILLEGAL_ATTR</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020191&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>attr</i>の指定が不正&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_ENTRY">SCE_KERNEL_ERROR_ILLEGAL_ENTRY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020192&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スレッドの<i>entry</i>アドレスが&nbsp;&nbsp;<br>&nbsp;&nbsp;不正&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_PRIORITY">SCE_KERNEL_ERROR_ILLEGAL_PRIORITY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020193&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;優先度の指定が不正&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_STACK_SIZE">SCE_KERNEL_ERROR_ILLEGAL_STACK_SIZE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020194&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スタックサイズの指定が不正&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_MODE">SCE_KERNEL_ERROR_ILLEGAL_MODE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020195&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>mode</i>引数の値が不正&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_MASK">SCE_KERNEL_ERROR_ILLEGAL_MASK</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020196&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>mask</i>引数の値が不正&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_THID">SCE_KERNEL_ERROR_ILLEGAL_THID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020197&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;指定のスレッドは正しくない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_THID">SCE_KERNEL_ERROR_UNKNOWN_THID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020198&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象スレッドが存在しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_SEMID">SCE_KERNEL_ERROR_UNKNOWN_SEMID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80020199&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象セマフォが存在しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_EVFID">SCE_KERNEL_ERROR_UNKNOWN_EVFID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8002019a&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象イベントフラグが存在&nbsp;&nbsp;<br>&nbsp;&nbsp;しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_MBXID">SCE_KERNEL_ERROR_UNKNOWN_MBXID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8002019b&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象メッセージボックスが&nbsp;&nbsp;<br>&nbsp;&nbsp;存在しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_FPLID">SCE_KERNEL_ERROR_UNKNOWN_FPLID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8002019d&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象固定長メモリプールが&nbsp;&nbsp;<br>&nbsp;&nbsp;存在しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_VPLID">SCE_KERNEL_ERROR_UNKNOWN_VPLID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8002019c&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象可変長メモリプールが&nbsp;&nbsp;<br>&nbsp;&nbsp;存在しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_MPPID">SCE_KERNEL_ERROR_UNKNOWN_MPPID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8002019e&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象メッセージパイプが存在&nbsp;&nbsp;<br>&nbsp;&nbsp;しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_ALMID">SCE_KERNEL_ERROR_UNKNOWN_ALMID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8002019f&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象アラームが存在しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_TEID">SCE_KERNEL_ERROR_UNKNOWN_TEID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201a0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象スレッドイベント&nbsp;&nbsp;<br>&nbsp;&nbsp;ハンドラが存在しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_CBID">SCE_KERNEL_ERROR_UNKNOWN_CBID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201a1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象コールバックが存在&nbsp;&nbsp;<br>&nbsp;&nbsp;しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_DORMANT">SCE_KERNEL_ERROR_DORMANT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201a2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象のスレッドは&nbsp;&nbsp;<br>&nbsp;&nbsp;DORMANT状態だった&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_SUSPEND">SCE_KERNEL_ERROR_SUSPEND</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201a3&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象のスレッドは&nbsp;&nbsp;<br>&nbsp;&nbsp;SUSPEND状態だった&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_NOT_DORMANT">SCE_KERNEL_ERROR_NOT_DORMANT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201a4&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象のスレッドは&nbsp;&nbsp;<br>&nbsp;&nbsp;DORMANT状態ではなかった&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_NOT_SUSPEND">SCE_KERNEL_ERROR_NOT_SUSPEND</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201a5&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象のスレッドは&nbsp;&nbsp;<br>&nbsp;&nbsp;SUSPEND状態ではなかった&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_NOT_WAIT">SCE_KERNEL_ERROR_NOT_WAIT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201a6&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象のスレッドは&nbsp;&nbsp;<br>&nbsp;&nbsp;WAIT状態ではなかった&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_CAN_NOT_WAIT">SCE_KERNEL_ERROR_CAN_NOT_WAIT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201a7&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ディスパッチ禁止状態で&nbsp;&nbsp;<br>&nbsp;&nbsp;待ち状態に入ろうとした&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_WAIT_TIMEOUT">SCE_KERNEL_ERROR_WAIT_TIMEOUT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201a8&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;WAIT状態はタイムアウト&nbsp;&nbsp;<br>&nbsp;&nbsp;した&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_WAIT_CANCEL">SCE_KERNEL_ERROR_WAIT_CANCEL</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201a9&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;WAIT状態はキャンセル&nbsp;&nbsp;<br>&nbsp;&nbsp;された&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_RELEASE_WAIT">SCE_KERNEL_ERROR_RELEASE_WAIT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201aa&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;WAIT状態は強制解除された&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_THREAD_TERMINATED">SCE_KERNEL_ERROR_THREAD_TERMINATED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201ac&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象のスレッドは&nbsp;&nbsp;<br>&nbsp;&nbsp;強制終了された&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_SEMA_ZERO">SCE_KERNEL_ERROR_SEMA_ZERO</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201ad&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;セマフォの資源が&nbsp;&nbsp;<br>&nbsp;&nbsp;獲得できない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_SEMA_OVF">SCE_KERNEL_ERROR_SEMA_OVF</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201ae&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;セマフォカウンタが&nbsp;&nbsp;<br>&nbsp;&nbsp;最大値に達して更新できない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_EVF_COND">SCE_KERNEL_ERROR_EVF_COND</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201af&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;イベントフラグの待ち条件が&nbsp;&nbsp;<br>&nbsp;&nbsp;不成立だった&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_EVF_MULTI">SCE_KERNEL_ERROR_EVF_MULTI</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201b0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;イベントフラグは多重待ちを&nbsp;&nbsp;<br>&nbsp;&nbsp;許さない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_EVF_ILPAT">SCE_KERNEL_ERROR_EVF_ILPAT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201b1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;イベントフラグの待ち&nbsp;&nbsp;<br>&nbsp;&nbsp;パターンが不正&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_MBOX_NOMSG">SCE_KERNEL_ERROR_MBOX_NOMSG</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201b2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージボックスに&nbsp;&nbsp;<br>&nbsp;&nbsp;メッセージがなかった&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_MPP_FULL">SCE_KERNEL_ERROR_MPP_FULL</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201b3&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージパイプがいっぱい&nbsp;&nbsp;<br>&nbsp;&nbsp;でこれ以上送信できない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_MPP_EMPTY">SCE_KERNEL_ERROR_MPP_EMPTY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201b4&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージパイプが空で&nbsp;&nbsp;<br>&nbsp;&nbsp;メッセージが受信できない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_WAIT_DELETE">SCE_KERNEL_ERROR_WAIT_DELETE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201b5&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;WAIT対象のオブジェクトが&nbsp;&nbsp;<br>&nbsp;&nbsp;削除された&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK">SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201b6&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;解放するメモリブロックが&nbsp;&nbsp;<br>&nbsp;&nbsp;メモリプールに属していない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_MEMSIZE">SCE_KERNEL_ERROR_ILLEGAL_MEMSIZE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201b7&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メモリのサイズ指定が不正&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_TYPE">SCE_KERNEL_ERROR_ILLEGAL_TYPE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201bb&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;指定した<i>type</i>は正しくない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_SIZE">SCE_KERNEL_ERROR_ILLEGAL_SIZE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201bc&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;指定した<i>size</i>は正しくない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_COUNT">SCE_KERNEL_ERROR_ILLEGAL_COUNT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201bd&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;指定した<i>count</i>は正しくない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_VTID">SCE_KERNEL_ERROR_UNKNOWN_VTID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201be&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象仮想タイマが存在しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_VTID">SCE_KERNEL_ERROR_ILLEGAL_VTID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201bf&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;指定の仮想タイマIDは&nbsp;&nbsp;<br>&nbsp;&nbsp;正しくない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_ILLEGAL_KTLSID">SCE_KERNEL_ERROR_ILLEGAL_KTLSID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201c0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;指定のKTLSIDは正しくない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_KTLS_FULL">SCE_KERNEL_ERROR_KTLS_FULL</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201c1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;これ以上KTLSは&nbsp;&nbsp;<br>&nbsp;&nbsp;確保できない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_KTLS_BUSY">SCE_KERNEL_ERROR_KTLS_BUSY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201c2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;KTLSは使用中&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_MUTEXID">SCE_KERNEL_ERROR_UNKNOWN_MUTEXID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201c3&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象ミューテックスが&nbsp;&nbsp;<br>&nbsp;&nbsp;存在しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_MUTEX_FAILED_TO_OWN">SCE_KERNEL_ERROR_MUTEX_FAILED_TO_OWN</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201c4&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ミューテックスの資源が&nbsp;&nbsp;<br>&nbsp;&nbsp;獲得できない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_MUTEX_NOT_OWNED">SCE_KERNEL_ERROR_MUTEX_NOT_OWNED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201c5&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;所有していない&nbsp;&nbsp;<br>&nbsp;&nbsp;ミューテックスを開放&nbsp;&nbsp;<br>&nbsp;&nbsp;しようとした&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_MUTEX_LOCK_OVF">SCE_KERNEL_ERROR_MUTEX_LOCK_OVF</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201c6&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ミューテックスが&nbsp;&nbsp;<br>&nbsp;&nbsp;ロックカウント値が大きく&nbsp;&nbsp;<br>&nbsp;&nbsp;なりすぎて更新できない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_MUTEX_UNLOCK_UDF">SCE_KERNEL_ERROR_MUTEX_UNLOCK_UDF</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201c7&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ミューテックスをロックした&nbsp;&nbsp;<br>&nbsp;&nbsp;回数以上にアンロック&nbsp;&nbsp;<br>&nbsp;&nbsp;しようとした&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_MUTEX_RECURSIVE">SCE_KERNEL_ERROR_MUTEX_RECURSIVE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201c8&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ミューテックスは再帰的&nbsp;&nbsp;<br>&nbsp;&nbsp;ロックを許さない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_MBOX_LOOP">SCE_KERNEL_ERROR_MBOX_LOOP</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201c9&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;メッセージボックスで重複&nbsp;&nbsp;<br>&nbsp;&nbsp;するメッセージ送信が検出&nbsp;&nbsp;<br>&nbsp;&nbsp;された&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_LWMUTEXID">SCE_KERNEL_ERROR_UNKNOWN_LWMUTEXID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201ca&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象軽量ミューテックスが&nbsp;&nbsp;<br>&nbsp;&nbsp;存在しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_LWMUTEX_FAILED_TO_OWN">SCE_KERNEL_ERROR_LWMUTEX_FAILED_TO_OWN</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201cb&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;軽量ミューテックスの資源が&nbsp;&nbsp;<br>&nbsp;&nbsp;獲得できない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_LWMUTEX_NOT_OWNED">SCE_KERNEL_ERROR_LWMUTEX_NOT_OWNED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201cc&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;所有していない&nbsp;&nbsp;<br>&nbsp;&nbsp;軽量ミューテックスを開放&nbsp;&nbsp;<br>&nbsp;&nbsp;しようとした&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_LWMUTEX_LOCK_OVF">SCE_KERNEL_ERROR_LWMUTEX_LOCK_OVF</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201cd&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;軽量ミューテックスが&nbsp;&nbsp;<br>&nbsp;&nbsp;ロックカウント値が大きく&nbsp;&nbsp;<br>&nbsp;&nbsp;なりすぎて更新できない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_LWMUTEX_UNLOCK_UDF">SCE_KERNEL_ERROR_LWMUTEX_UNLOCK_UDF</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201ce&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;軽量ミューテックスをロック&nbsp;&nbsp;<br>&nbsp;&nbsp;した回数以上にアンロック&nbsp;&nbsp;<br>&nbsp;&nbsp;しようとした&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_LWMUTEX_RECURSIVE">SCE_KERNEL_ERROR_LWMUTEX_RECURSIVE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201cf&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;軽量ミューテックスは再帰的&nbsp;&nbsp;<br>&nbsp;&nbsp;ロックを許さない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UNKNOWN_TLSPLID">SCE_KERNEL_ERROR_UNKNOWN_TLSPLID</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201d0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;対象TLSメモリプールが&nbsp;&nbsp;<br>&nbsp;&nbsp;存在しない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UTLS_FULL">SCE_KERNEL_ERROR_UTLS_FULL</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201d1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;これ以上TLSメモリプールは&nbsp;&nbsp;<br>&nbsp;&nbsp;確保できない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_UTLS_BUSY">SCE_KERNEL_ERROR_UTLS_BUSY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x800201d2&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;UTLSは使用中&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<p><p><hr>
<div ALIGN="right">
    &copy;2010 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
