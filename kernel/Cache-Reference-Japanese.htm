<html lang="jp">
<head>
<title>Cache-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=Shift_JIS>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&reg; Programmer Tool Runtime Library Release 6.6.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
キャッシュ操作ユーティリティ
</h1></center>
</a>
<!-- sce_hd1 -->
<div style="margin-left:50px;"><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelIsCachedAddr"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelIsCachedAddr<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[アドレス操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>キャッシュアドレスかどうか判別<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ int <b>sceKernelIsCachedAddr </b>(
	const void *<i>v</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アドレス判別するユーザー空間仮想アドレス&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">キャッシュアドレス(kuseg0セグメント)での仮想アドレスであったとき1、非キャッシュアドレス(kuseg1セグメント)での仮想アドレスであったとき0を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">引数<i>v</i>で指定されたアドレスを、CPUキャッシュの対象となるkuseg0セグメントでの仮想アドレスかどうか判別します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelMakeCachedAddr">sceKernelMakeCachedAddr</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelIsUncachedAddr"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelIsUncachedAddr<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[アドレス操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>非キャッシュアドレスかどうか判別<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ int <b>sceKernelIsUncachedAddr </b>(
	const void *<i>v</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アドレス判別するユーザー空間仮想アドレス&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">非キャッシュアドレス(kuseg1セグメント)での仮想アドレスであったとき1、キャッシュアドレス(kuseg0セグメント)での仮想アドレスであったとき0を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">引数<i>v</i>で指定されたアドレスを、CPUキャッシュの対象とならないkuseg1セグメントでの仮想アドレスかどうか判別します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelMakeUncachedAddr">sceKernelMakeUncachedAddr</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelMakeCachedAddrUIntPtr"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelMakeCachedAddrUIntPtr<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[アドレス操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>キャッシュアドレスの生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelMakeCachedAddrUIntPtr </b>(
	const void *<i>v</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アドレス変換するユーザー空間仮想アドレス&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">キャッシュアドレス(kuseg0セグメント)での仮想アドレスをunsigned int型で返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">引数<i>v</i>で指定されたアドレスを、CPUキャッシュの対象となるkuseg0セグメントでの仮想アドレスに変換します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelIsCachedAddr">sceKernelIsCachedAddr</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelMakeCachedAddr"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelMakeCachedAddr<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[アドレス操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>キャッシュアドレスの生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ void *<b>sceKernelMakeCachedAddr </b>(
	const void *<i>v</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アドレス変換するユーザー空間仮想アドレス&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">キャッシュアドレス(kuseg0セグメント)での仮想アドレスを返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">引数<i>v</i>で指定されたアドレスを、CPUキャッシュの対象となるkuseg0セグメントでの仮想アドレスに変換します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelIsCachedAddr">sceKernelIsCachedAddr</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelMakeUncachedAddrUIntPtr"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelMakeUncachedAddrUIntPtr<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[アドレス操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>非キャッシュアドレスの生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ unsigned int <b>sceKernelMakeUncachedAddrUIntPtr </b>(
	const void *<i>v</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アドレス変換するユーザー空間仮想アドレス&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">非キャッシュアドレス(kuseg1セグメント)での仮想アドレスをunsigned int型で返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">引数<i>v</i>で指定されたアドレスを、CPUキャッシュの対象とならないkuseg1セグメントでの仮想アドレスに変換します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelIsUncachedAddr">sceKernelIsUncachedAddr</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelMakeUncachedAddr"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelMakeUncachedAddr<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[アドレス操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>非キャッシュアドレスの生成<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ void *<b>sceKernelMakeUncachedAddr </b>(
	const void *<i>v</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>v</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アドレス変換するユーザー空間仮想アドレス&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">非キャッシュアドレス(kuseg1セグメント)での仮想アドレスを返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">引数<i>v</i>で指定されたアドレスを、CPUキャッシュの対象とならないkuseg1セグメントでの仮想アドレスに変換します。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelIsUncachedAddr">sceKernelIsUncachedAddr</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDcacheCreateDirtyExclusiveRange"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDcacheCreateDirtyExclusiveRange<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定されたアドレス範囲をダーティ状態でDキャッシュ上にアロケート<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ void <b>sceKernelDcacheCreateDirtyExclusiveRange </b>(
	void *<i>start</i>,
	unsigned int <i>size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>start</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ライトアロケートする領域開始アドレス(64の倍数)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ライトアロケートする領域サイズ(64の倍数)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたアドレス範囲をダーティ状態としてDキャッシュに乗せます。このとき、メインメモリからデータのフェッチは行いません。64バイトのDキャッシュライン全体に対して書き込みを行う事が分かっている場合、メインメモリからDキャッシュへのフィルを省略することで高速化することができます。<br><br>ALLEGREX CPUのキャッシュは仮想アドレスによるタグチェック方式ですので、引数<i>start</i>の示すアドレスはキャッシュ領域(kuseg0セグメント)でなくてはなりません。sceKernelDcacheCreateDirtyExclusiveRange()関数はALLEGREX CPUのCACHE命令のCreateDirtyExclusive(D)オペレーションによって実現されます。非キャッシュアドレスを指定してCreateDirtyExclusive(D)オペレーションを実行することは不定動作となりますので、sceKernelDcacheCreateDirtyExclusiveRange()関数では非キャッシュアドレスの場合なにも動作を行いません。<br><br>引数<i>start</i>, <i>size</i>で示される領域の先頭および終端が、64バイトのアラインメント境界から外れていたとき、指定された領域外のラインが巻き添えでフェッチされます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">__builtin_allegrex_cache()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDcacheFillRange"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDcacheFillRange<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定されたアドレス範囲をDキャッシュに乗せる<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ void <b>sceKernelDcacheFillRange</b>(
	void *<i>start</i>,
	unsigned int <i>size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>start</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プリフェッチする領域開始アドレス(64の倍数)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プリフェッチする領域サイズ(64の倍数)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたアドレス範囲をDキャッシュに乗せます。予めデータをDキャッシュ上にプリフェッチしておくことで演算中のストールを減らす事ができます。<br><br>ALLEGREX CPUのキャッシュは仮想アドレスによるタグチェック方式ですので、引数<i>start</i>の示すアドレスはキャッシュ領域(kuseg0セグメント)でなくてはなりません。sceKernelDcacheFillRange()関数はALLEGREX CPUのCACHE命令のFill(D)オペレーションによって実現されます。非キャッシュアドレスを指定してFill(D)オペレーションを実行してもメリットはなにもないため、sceKernelDcacheFillRange()関数では非キャッシュアドレスの場合なにも動作を行いません。<br><br>ALLEGREX CPUでは、バスからDキャッシュへのフェッチはノンブロッキングで行われますが、CPUパイプラインではDキャッシュからのノンブロッキング動作、ヒットアンダーミス動作は行いません。一般的には、sceKernelDcacheFillRange()関数のようにまとまった範囲をプリフェッチするのではなく、演算を行うループ中で1ラインずつの__builtin_allegrex_cache(SCE_ALLEGREX_CACHEOP_FILL_D)を挿入していた方が効率は上がります。<br><br>引数<i>start</i>, <i>size</i>で示される領域の先頭および終端が、64バイトのアラインメント境界から外れていたとき、指定された領域外のラインが巻き添えでフェッチされます。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_1">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">Dキャッシュにヒットしているメモリに対してCACHE命令のFill(D)オペレーションを行うと、書き込み動作を行っていないにもかかわらず当該キャッシュラインがダーティ状態になってしまうというALLEGREX CPUの動作制約があります。ダーティ状態になったキャッシュラインは、いずれキャッシュラインがリプレイすられるときにメモリに書き出しするライトバック動作が行われます。<br>このため、すでにヒットしているアドレス範囲を指定してsceKernelDcacheFillRange()関数を使用することは、いたずらにダーティなラインを増やし、あとあと不要なライトバック動作を行ってしまうために性能の低下を招きます。すでにヒットしている範囲に多重にsceKernelDcacheFillRange()を使用しないようにしてください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">__builtin_allegrex_cache()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDcacheInvalidateRange"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDcacheInvalidateRange<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定された範囲のDキャッシュのインバリデート<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDcacheInvalidateRange</b>(
	void *<i>start</i>,
	unsigned int <i>size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>start</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;インバリデートする領域開始アドレス(64の倍数)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;インバリデートする領域サイズ(64の倍数)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Dキャッシュの指定された範囲をインバリデート(無効化)します。Dキャッシュ内のダーティなラインがあった場合、内容がメモリに書き出されずに捨てられます。<br><br>sceKernelDcacheInvalidateRange()関数は以下のような場合に使用します。<br></div>
<div style="margin-left:35px;"><ul>
<li> DMACやVFPUライトバッファによって書き込まれるメモリエリアをキャッシュミスヒット状態にし、確実にメモリから再読み出しさせる場合
</ul></div>
<div style="margin-left:50px;"><br>引数<i>start</i>, <i>size</i>で示される領域の先頭および終端が、64バイトのアラインメント境界から外れていたとき、指定された領域外のラインが巻き添えでメモリにライトバックおよびインバリデートされます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelDcacheWritebackInvalidateAll">sceKernelDcacheWritebackInvalidateAll</a>(), <a href="../kernel/Cache-Reference-Japanese.htm#sceKernelDcacheWritebackInvalidateRange">sceKernelDcacheWritebackInvalidateRange</a>(), __builtin_allegrex_cache()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelMemcpy"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelMemcpy<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定されたアドレス範囲をメモリコピー<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
void *<b>sceKernelMemcpy</b> (
	void *<i>dest</i>,
	const void *<i>src</i>,
	unsigned int <i>size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>dest</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コピー先開始アドレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>src</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コピー元開始アドレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コピーするバイト数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>dest</i>と同じ値を返します<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたアドレス範囲の種類を見て、最適と思われる方式でメモリコピーを行います。データキャッシュが有効な領域であればCreateDirtyExclusive(ALLEGREX CPUのCACHE命令のCreateDirtyExclusive(D)オペレーション)を使用します。そうでなければ、ワード単位のメモリコピーと非アラインメントロードストア命令を用いてコピーを行います。<br>引数<i>dest</i>, <i>size</i>で指定される範囲と、引数<i>src, size</i>で指定される範囲を重複させることはできません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">memcpy(), <a href="../peripheral/DMAC-Reference-Japanese.htm#sceDmacMemcpy">sceDmacMemcpy</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelMemset"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelMemset<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定されたアドレス範囲を指定バイトでフィル<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
void *<b>sceKernelMemset</b> (
	void *<i>start</i>,
	int <i>c</i>,
	unsigned int <i>size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>start</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;フィルする領域開始アドレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>c</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;フィルするデータバイト&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;フィルする領域サイズ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>start</i>と同じ値を返します<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたアドレス範囲の種類を見て、最適と思われる方式でメモリフィルを行います。データキャッシュが有効な領域であればCreateDirtyExclusive(ALLEGREX CPUのCACHE命令のCreateDirtyExclusive(D)オペレーション)を使用します。そうでなければ、ワード単位のストア命令と非アラインメントロードストア命令を用いてコピーを行います。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">memset()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDcacheMemcpyInline"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDcacheMemcpyInline<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定されたアドレス範囲をメモリコピー<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ void <b>sceKernelDcacheMemcpyInline</b>(
	void *<i>dest,</i>
	const void *<i>src,</i>
	unsigned int <i>size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>dest</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コピー先開始アドレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>src</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コピー元開始アドレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コピーするバイト数&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたアドレス範囲をCreateDirtyExclusive(ALLEGREX CPUのCACHE命令のCreateDirtyExclusive(D)オペレーション)を使用して高速にメモリコピーします。引数<i>dest</i>, <i>size</i>で指定される範囲と、引数<i>src, size</i>で指定される範囲を重複させることはできません。引数<i>dest, src</i>はどちらも4バイトアラインメントである必要があります。<br><br>ALLEGREX CPUのキャッシュは仮想アドレスによるタグチェック方式ですので、引数<i>dest</i>, <i>src</i>の示すアドレスはキャッシュ領域(kuseg0セグメント)でなくてはなりません。非キャッシュアドレスを指定してCreateDirtyExclusive(D)オペレーションを実行することは不定動作となりますので、引数<i>dest</i>, <i>src</i>に非キャッシュアドレスが指定された場合、<a href="../kernel/Cache-Reference-Japanese.htm#sceKernelDcacheMemsetInline">sceKernelDcacheMemsetInline</a>()関数はCACHE命令を用いずにバイト単位のコピー動作を行います。このときの動作は非常に低速になるので注意してください。<br><br>この関数はコンパイラによってはインライン展開されます。このため、関数呼び出しのコストがかからない分、高速に実行されるバイナリが生成される可能性があります。ただし、バイナリサイズが増大するため、通常は<a href="../kernel/Cache-Reference-Japanese.htm#sceKernelMemset">sceKernelMemset</a>()を使用することをお薦めします。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">memcpy(), <a href="../peripheral/DMAC-Reference-Japanese.htm#sceDmacMemcpy">sceDmacMemcpy</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDcacheMemsetInline"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDcacheMemsetInline<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定されたアドレス範囲を指定バイトでフィル<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
static __inline__ void <b>sceKernelDcacheMemsetInline</b>(
	void *<i>start</i>,
	int <i>c</i>,
	unsigned int <i>size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>start</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;フィルする領域開始アドレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>c</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;フィルするデータバイト&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;フィルする領域サイズ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたアドレス範囲をCreateDirtyExclusive機能(ALLEGREX CPUのCACHE命令のCreateDirtyExclusive(D)オペレーション)を使用して指定バイトでメモリフィル動作を高速に行います。<br><br>ALLEGREX CPUのキャッシュは仮想アドレスによるタグチェック方式ですので、引数<i>start</i>の示すアドレスはキャッシュ領域(kuseg0セグメント)でなくてはなりません。非キャッシュアドレスを指定してCreateDirtyExclusive(D)オペレーションを実行することは不定動作となりますので、引数<i>start</i>に非キャッシュアドレスが指定された場合、sceKernelDcacheMemsetInline()関数はCACHE命令を用いずにバイト単位のフィル動作を行います。このときの動作は非常に低速になるので注意してください。<br><br>この関数はコンパイラによってはインライン展開されます。このため、関数呼び出しのコストがかからない分、高速に実行されるバイナリが生成される可能性があります。ただし、バイナリサイズが増大するため、通常は<a href="../kernel/Cache-Reference-Japanese.htm#sceKernelMemset">sceKernelMemset</a>()を使用することをお薦めします。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">memset(), <a href="../kernel/Cache-Reference-Japanese.htm#sceKernelMemset">sceKernelMemset</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDcacheProbe"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDcacheProbe<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定されたアドレスのDキャッシュのプローブ<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDcacheProbe</b> (
	const void *<i>probe</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>probe</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プローブするアドレス&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_DCACHE_PROBE_HIT_DIRTY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;キャッシュされていて、かつダーティ状態&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_DCACHE_PROBE_HIT&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;キャッシュされていた&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_DCACHE_PROBE_MISS&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;キャッシュされていない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定された仮想アドレスがDキャッシュ上にキャッシュされているかどうか調べます。CPUが当該ラインをキャッシュしていた場合、SCE_KERNEL_DCACHE_PROBE_HITまたはSCE_KERNEL_DCACHE_PROBE_HIT_DIRTYが返ります。<br><br>sceKernelDcacheProbe()関数がSCE_KERNEL_DCACHE_PROBE_HIT_DIRTYを返した場合、当該ラインにCPUがストア動作を行ったあとライトバックされていないことを意味します。DMACなど、CPU以外のバスマスタに読み出しを行わせる場合には、明示的にDキャッシュをライトバックする必要があります。<br>sceKernelDcacheProbe()関数がSCE_KERNEL_DCACHE_PROBE_HITを返した場合は、当該ラインがDキャッシュにフィルされたあとCPUがストア動作を行っていないことを意味します。この状態では少なくともCPUからの書き込みによってメモリの内容が変化することはないので、Dキャッシュをライトバックする必要はありません。ただし、DMAなどCPU以外のバスマスタに書き込みを行わせる場合には、明示的にDキャッシュをインバリデートする必要があります。<br><br>ALLEGREX CPUのキャッシュは仮想アドレスによるタグチェック方式ですので、引数<i>probe</i>の示すアドレスはキャッシュ領域(kuseg0セグメント)でなくてはなりません。<br><br>sceKernelDcacheProbe()関数はデバッグ用途に使用することを想定しています。たとえば、Dキャッシュがコヒーレントであるはずの場所で、目的のメモリがダーティ状態になっていないかどうかを調べる場合などに使用できます。PSP&reg;実機でも動作しますが推奨しません。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_2">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">Dキャッシュにヒットしているメモリに対してCACHE命令のFill(D)オペレーションまたはFill with Lock(D)オペレーションを行うと、書き込み動作を行っていないにもかかわらず当該キャッシュラインがダーティ状態になってしまうというALLEGREX CPUの動作制約があります。このときsceKernelDcacheProbe()関数はSCE_KERNEL_DCACHE_PROBE_HIT_DIRTYを返すようになってしまう点にご注意ください。<br>すでにヒットしていることが予見できるアドレスに対してFill(D)オペレーションを行うことは性能の低下を招きますので、推奨できません。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDcacheProbeRange"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDcacheProbeRange<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定された範囲のDキャッシュのプローブ<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDcacheProbeRange</b> (
	void *<i>start</i>,
	unsigned int <i>size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>start</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プローブする領域開始アドレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プローブする領域サイズ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_DCACHE_PROBE_HIT_DIRTY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;部分的にもキャッシュされていて、&nbsp;&nbsp;<br>&nbsp;&nbsp;かつダーティ状態のラインが存在&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_DCACHE_PROBE_HIT&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;部分的にもキャッシュされていた&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_DCACHE_PROBE_MISS&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;全くキャッシュされていない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Dキャッシュの指定されたアドレス範囲がキャッシュされているかどうか調べます。CPUが当該ラインをキャッシュしていた場合、SCE_KERNEL_DCACHE_PROBE_HITまたはSCE_KERNEL_DCACHE_PROBE_HIT_DIRTYが返ります。<br>sceKernelDcacheProbeRange()関数がSCE_KERNEL_DCACHE_PROBE_HIT_DIRTYを返した場合、当該エリア内にCPUがストア動作を行ったあとライトバックされていないラインが含まれていることを意味します。DMACなど、CPU以外のバスマスタに読み出しを行わせる場合には、明示的にDキャッシュをライトバックする必要があります。<br>sceKernelDcacheProbeRange()関数がSCE_KERNEL_DCACHE_PROBE_HITを返した場合は、当該エリア内にDキャッシュにフィルされたあとCPUがストア動作を行っていないラインが含まれていることを意味します。この状態では少なくともCPUからの書き込みによってメモリの内容が変化することはないので、Dキャッシュをライトバックする必要はありません。ただし、DMAなどCPU以外のバスマスタに書き込みを行わせる場合には、明示的にDキャッシュをインバリデートする必要があります。<br><br>ALLEGREX CPUのキャッシュは仮想アドレスによるタグチェック方式ですので、引数<i>probe</i>の示すアドレスはキャッシュ領域(kuseg0セグメント)でなくてはなりません。<br><br>sceKernelDcacheProbeRange()関数はデバッグ用途に使用することを想定しています。たとえば、Dキャッシュがコヒーレントであるはずの場所で、目的のメモリがダーティ状態になっていないかどうかを調べる場合などに使用できます。PSP&reg;実機でも動作しますが推奨しません。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_3">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">Dキャッシュにヒットしているメモリに対してCACHE命令のFill(D)オペレーションまたはFill with Lock(D)オペレーションを行うと、書き込み動作を行っていないにもかかわらず当該キャッシュラインがダーティ状態になってしまうというALLEGREX CPUの動作制約があります。このときsceKernelDcacheProbeRange()関数はSCE_KERNEL_DCACHE_PROBE_HIT_DIRTYを返すようになってしまう点にご注意ください。<br>すでにヒットしていることが予見できるアドレスに対してFill(D)オペレーションを行うことは性能の低下を招きますので、推奨できません。<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDcacheWritebackAll"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDcacheWritebackAll<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Dキャッシュ全域のライトバック<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
void <b>sceKernelDcacheWritebackAll</b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Dキャッシュの全域をライトバック(書き出し)します。Dキャッシュ内のダーティなラインがメインメモリに書き出され、Dキャッシュとメインメモリ間のコヒーレンシが確立されます。<br><br>sceKernelDcacheWritebackAll()関数ではキャッシュのライトバック操作のみを行い、インバリデート操作は行いません。したがって、Dキャッシュにキャッシュされていたデータはそのままキャッシュ上に残ります。<br><br>sceKernelDcacheWritebackAll()関数は以下のような場合に使用します。<br></div>
<div style="margin-left:35px;"><ul>
<li> キャッシュドアドレスで生成したコマンドリストをGraphics Engineに解釈させるとき
<li> キャッシュドアドレスよりフレームバッファへの書き込みを行った場合、フレームバッファの表示アドレスを更新するとき
</ul></div>
<div style="margin-left:50px;"><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelDcacheWritebackInvalidateAll">sceKernelDcacheWritebackInvalidateAll</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDcacheWritebackInvalidateAll"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDcacheWritebackInvalidateAll<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Dキャッシュ全域のライトバックおよびインバリデート<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
void <b>sceKernelDcacheWritebackInvalidateAll</b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Dキャッシュの全域をライトバック(書き出し)およびインバリデート(無効化)します。Dキャッシュ内のダーティなラインがメインメモリに書き出され、全ラインがインバリデート状態になります。<br>Dキャッシュが空になるため、この直後はすべてのアドレスでDキャッシュミスヒットします。<br>sceKernelDcacheWritebackInvalidateAll()関数は以下のような場合に使用します。<br></div>
<div style="margin-left:35px;"><ul>
<li> キャッシュドアドレスで生成したコマンドリストをGraphics Engineに解釈させるとき
<li> キャッシュドアドレスよりフレームバッファへの書き込みを行った場合、フレームバッファの表示アドレスを更新するとき
</ul></div>
<div style="margin-left:50px;"><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelDcacheWritebackAll">sceKernelDcacheWritebackAll</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDcacheWritebackInvalidateRange"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDcacheWritebackInvalidateRange<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定された範囲のDキャッシュライトバックおよびインバリデート<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDcacheWritebackInvalidateRange</b>(
	const void *<i>start</i>,
	unsigned int <i>size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>start</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ライトバックおよびインバリデートする領域開始アドレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ライトバックおよびインバリデートする領域サイズ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Dキャッシュの指定された範囲をライトバック(書き出し)およびインバリデート(無効化)します。Dキャッシュ内のダーティなラインはメインメモリに書き出され、Dキャッシュとメインメモリ間のコヒーレンシが確立されてから無効化されます。<br><br>ALLEGREX CPUのキャッシュは仮想アドレスによるタグチェック方式ですので、引数<i>start</i>の示すアドレスはキャッシュ領域(kuseg0セグメント)でなくてはなりません。<br><br>sceKernelDcacheWritebackInvalidateRange()関数は以下のような場合に使用します。<br></div>
<div style="margin-left:35px;"><ul>
<li> キャッシュドアドレスで生成したコマンドリストをGraphics Engineに解釈させるとき
<li> キャッシュドアドレスよりフレームバッファへの書き込みを行った場合、フレームバッファの表示アドレスを更新するとき
</ul></div>
<div style="margin-left:50px;"><br>引数<i>start</i>, <i>size</i>で示される領域の先頭および終端が、64バイトのアラインメント境界から外れていたとき、指定された領域外のラインが巻き添えでメモリにライトバックおよびインバリデートされます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelDcacheWritebackRange">sceKernelDcacheWritebackRange</a>(), __builtin_allegrex_cache()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelDcacheWritebackRange"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelDcacheWritebackRange<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Dキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定された範囲のDキャッシュライトバック<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelDcacheWritebackRange </b>(
	const void *<i>start</i>,
	unsigned int <i>size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>start</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ライトバックする領域開始アドレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ライトバックする領域サイズ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Dキャッシュの指定されたアドレス範囲をライトバック(書き出し)します。Dキャッシュ内のダーティなラインがメインメモリに書き出され、指定された範囲でDキャッシュとメインメモリ間のコヒーレンシが確立されます。<br><br>ALLEGREX CPUのキャッシュは仮想アドレスによるタグチェック方式ですので、引数<i>start</i>の示すアドレスはキャッシュ領域(kuseg0セグメント)でなくてはなりません。<br><br>sceKernelDcacheWritebackRange()関数は以下のような場合に使用します。<br></div>
<div style="margin-left:35px;"><ul>
<li> キャッシュドアドレスで生成したコマンドリストをGraphics Engineに解釈させるとき
<li> キャッシュドアドレスよりフレームバッファへの書き込みを行った場合、フレームバッファの表示アドレスを更新するとき
</ul></div>
<div style="margin-left:50px;"><br>引数<i>start</i>, <i>size</i>で示される領域の先頭および終端が、64バイトのアラインメント境界から外れていたとき、指定された領域外のラインが巻き添えでメモリにライトバックされます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelDcacheWritebackInvalidateRange">sceKernelDcacheWritebackInvalidateRange</a>(), __builtin_allegrex_cache()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelIcacheInvalidateAll"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelIcacheInvalidateAll<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Iキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Iキャッシュ全域のインバリデート<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
void <b>sceKernelIcacheInvalidateAll</b>(
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Iキャッシュの全域をインバリデート(無効化)します。<br><br>sceKernelIcacheInvalidateAll()関数は以下のような場合に使用します。<br></div>
<div style="margin-left:35px;"><ul>
<li> カーネルのモジュールロード関数以外の方法で生成した実行コードに制御を移す時
</ul></div>
<div style="margin-left:50px;"><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelIcacheInvalidateRange">sceKernelIcacheInvalidateRange</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelIcacheInvalidateRange"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelIcacheInvalidateRange<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Iキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>指定された範囲のIキャッシュインバリデート<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelIcacheInvalidateRange </b>(
	const void *<i>start</i>,
	unsigned int <i>size</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>start</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;インバリデートする領域開始アドレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;インバリデートする領域サイズ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定されたアドレス範囲をIキャッシュよりインバリデート(無効化)します。<br>インバリデートされたアドレスはキャッシュ内に存在しなくなるため、次回そのアドレスに対するインストラクションコード読み出しが発生した際にはIキャッシュミスヒットが発生します。<br><br>ALLEGREX CPUのキャッシュは仮想アドレスによるタグチェック方式ですので、引数<i>start</i>の示すアドレスはキャッシュ領域(kuseg0セグメント)でなくてはなりません。<br><br>sceKernelIcacheInvalidateRange()関数は以下のような場合に使用します。<br></div>
<div style="margin-left:35px;"><ul>
<li> カーネルのモジュールロード関数以外の方法で生成した実行コードに制御を移す時
</ul></div>
<div style="margin-left:50px;"><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Cache-Reference-Japanese.htm#sceKernelIcacheInvalidateAll">sceKernelIcacheInvalidateAll</a>(), __builtin_allegrex_cache()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelIcacheProbe"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelIcacheProbe<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Iキャッシュ操作]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Iキャッシュのプローブ<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelIcacheProbe</b> (
	const void *<i>probe</i>
);
</font></pre></div>
<div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>スレッドから呼び出し可能(割り込み禁止、許可状態に依存しない)<br>マルチスレッドセーフである<br></div>
        <div style="margin-left:50px;"><pre><font size=3>
</font></pre></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>probe</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プローブするアドレス&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>説明</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_ICACHE_PROBE_HIT&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;キャッシュされていた&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_ICACHE_PROBE_MISS&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;キャッシュされていない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">指定された仮想アドレスがIキャッシュ上にキャッシュされているかどうかを調べます。<br><br>ALLEGREX CPUのキャッシュは仮想アドレスによるタグチェック方式ですので、引数<i>probe</i>の示すアドレスはキャッシュ領域(kuseg0セグメント)でなくてはなりません。<br><br>sceKernelIcacheProbe()関数はデバッグ用途に使用することを想定しています。PSP&reg;実機でも動作しますが推奨しません。<br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
