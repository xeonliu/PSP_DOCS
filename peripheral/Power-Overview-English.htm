<html lang="en">
<head>
<title>Power-Overview</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
Power Service Overview
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd3 -->
<a name="Heading3_1">
<h2>
 1 <!-- hp --><b>Overview</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">The power service is a kernel mode service that provides the following power management functions for the PSP&trade;.<br><br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> Get the remaining percentage of battery life
<li> Transition to suspend mode and resume from suspend mode 
<li> Transition to hibernation state and resume from hibernation state (only for PSP-N1000 series systems with internal flash memory)
<li> Automatic power control
<li> POWER switch control
<li> Switch the dynamic operating clock frequency of the PSP&trade; system chip
</ul></div>

<!-- sce_hd4 -->
<a name="Heading4_1_1">
<h3>
<a href="#Heading3_1"> 1. </a>1 
<!-- hp1 --><b>Related Files</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following files are required to use the power service.<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Category</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Filename</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Stub library file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;power_stub.a&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Header file&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;powersvc.h&nbsp;&nbsp;<br>&nbsp;&nbsp;kernel.h&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- sce_hd4 -->
<a name="Heading4_1_2">
<h3>
<a href="#Heading3_1"> 1. </a>2 
<!-- hp1 --><b>Battery Icon Display</b><br>
</a>
</h3>
<div style="margin-left:50px;">For information related to the battery icon display and information acquisition, refer to the impulse driver.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_2">
<h2>
 2 <!-- hp --><b>Using a Callback to Get Battery Information</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_2_1">
<h3>
<a href="#Heading3_2"> 2. </a>1 
<!-- hp1 --><b>Overview</b><br>
</a>
</h3>
<div style="margin-left:50px;">The power service enables the following information to be periodically acquired by using a callback function.<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Standing by status&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_STANDINGBY">SCE_POWER_CALLBACKARG_STANDINGBY</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Resume completed status&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_RESUME_COMP">SCE_POWER_CALLBACKARG_RESUME_COMP</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Resuming status&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_RESUMING">SCE_POWER_CALLBACKARG_RESUMING</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Suspending status&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_SUSPENDING">SCE_POWER_CALLBACKARG_SUSPENDING</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;External power supply status&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_POWERONLINE">SCE_POWER_CALLBACKARG_POWERONLINE</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Low battery status&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_LOWBATTERY">SCE_POWER_CALLBACKARG_LOWBATTERY</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Battery equipped status&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_BATTERYEXIST">SCE_POWER_CALLBACKARG_BATTERYEXIST</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;Battery life (%)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;——&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">Do not reference bits that are not defined by SCE_POWER_CALLBACKARG_XXX.<br><br>The callback is called in the context of the thread that created the callback. The callback occurs when the thread that created the callback has entered a wait state due to a function with a CB suffix such as <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelWaitSemaCB">sceKernelWaitSemaCB</a>() or <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStartCB">sceDisplayWaitVblankStartCB</a>().<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_2">
<h3>
<a href="#Heading3_2"> 2. </a>2 
<!-- hp1 --><b>Usage Procedure</b><br>
</a>
</h3>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_2_1"><h4>
(1)&nbsp;<b>Library initialization</b><br></h4>
</a></div>
<div style="margin-left:67px;">The power service is implicitly initialized. It need not be explicitly initialized.<br></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_2_2"><h4>
(2)&nbsp;<b>Callback registration</b><br></h4>
</a></div>
<div style="margin-left:67px;">Callbacks are registered to receive notifications when a change occurs in a power-related phenomenon for the power service.<br></div>
        <div style="margin-left:80px;"><pre><font size=3>
SceUID uidCb;
uidCb = <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>("POWER", CallbackFunc, cookie);
<a href="../peripheral/Power-Reference-English.htm#scePowerRegisterCallback">scePowerRegisterCallback</a>(0, uidCb);
</font></pre></div>

<!-- sce_hd5 -->
<div style="margin-left:40px;"><a name="Heading5_2_2_3"><h4>
(3)&nbsp;<b>Callback processing</b><br></h4>
</a></div>
<div style="margin-left:67px;">For information about callback processing, refer to the description of the <a href="../peripheral/Power-Reference-English.htm#powercallback">powercallback</a>() function in the Power Service Reference.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_3">
<h3>
<a href="#Heading3_2"> 2. </a>3 
<!-- hp1 --><b>Precaution</b><br>
</a>
</h3>
<div style="margin-left:50px;">Although a callback function that was created with <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>() is called when a callback cause has occurred or when a wait function with a CB suffix is called, if a wait function with a CB suffix is further called from within the callback function at this time, the callback function calls will be nested. If the callback function is repeatedly called due to multiple nesting, the thread stack will overflow, which will cause the system to crash. Also, since control does not return to the original processing of that thread until all nesting levels have returned, the code processing flow may end up getting very complicated.<br>To reduce the risk that the stack might overflow, a wait function with a CB suffix should not be used within a callback function.<br><br>The timing for "POWER Switch Control", "Automatic Power Control" and "Power Control for Hibernation" which are described later, may vary due to differences in the execution environment.<br>If the application has potential timing-dependent problems, be careful because suspend/resume and hibernation may occasionally occur.<br><br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_3">
<h2>
 3 <!-- hp --><b>Using Special-Purpose Functions to Get Battery Information</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">Special-purpose functions can also be used to get the following battery information without using a callback.<br><br></div>
<div style="margin-left:90px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Function</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#scePowerIsPowerOnline">scePowerIsPowerOnline</a>()&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Get external power supply connection status&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#scePowerIsLowBattery">scePowerIsLowBattery</a>()&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Get low battery status&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#scePowerIsBatteryExist">scePowerIsBatteryExist</a>()&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Get battery equipped status&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#scePowerIsBatteryCharging">scePowerIsBatteryCharging</a>()&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Get battery charging status&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#scePowerGetBatteryLifePercent">scePowerGetBatteryLifePercent</a>()&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Get remaining percentage of battery life relative to fully charged status&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-English.htm#scePowerGetBatteryLifeTime">scePowerGetBatteryLifeTime</a>()&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Get estimated continuous remaining battery lifetime&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- sce_hd4 -->
<a name="Heading4_3_1">
<h3>
<a href="#Heading3_3"> 3. </a>1 
<!-- hp1 --><b>Getting Low Battery Status</b><br>
</a>
</h3>
<div style="margin-left:50px;">The <a href="../peripheral/Power-Reference-English.htm#scePowerIsLowBattery">scePowerIsLowBattery</a>() function can be used to check for a low battery status.<br>Low battery status means that the remaining battery life is short. The percentage until a low battery status occurs varies according to the battery capacity. When the battery is low, the POWER LED on the PSP&trade; console will blink.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_2">
<h3>
<a href="#Heading3_3"> 3. </a>2 
<!-- hp1 --><b>Getting Remaining Percentage of Battery Life</b><br>
</a>
</h3>
<div style="margin-left:50px;">The <a href="../peripheral/Power-Reference-English.htm#scePowerGetBatteryLifePercent">scePowerGetBatteryLifePercent</a>() function can be used to get an approximate value of the percentage of remaining battery life. If the function completes successfully, the remaining percentage of battery life relative to fully charged status is returned as a number from 0 to 100.<br>Polling for verifying the remaining percentage of battery life or for determining the battery equipped status should be done infrequently. Note that there is a slight time delay between when the status of the AC power supply connection or the battery equipped status changes and when the remaining percentage of battery life or the remaining battery lifetime can be obtained. During that period, an information acquisition error such as SCE_POWER_ERROR_DETECTING (getting battery information) or SCE_POWER_ERROR_NO_BATTERY (not battery equipped) may be returned.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_3">
<h3>
<a href="#Heading3_3"> 3. </a>3 
<!-- hp1 --><b>Getting the Estimated Continuous Remaining Battery Lifetime</b><br>
</a>
</h3>
<div style="margin-left:50px;">The <a href="../peripheral/Power-Reference-English.htm#scePowerGetBatteryLifeTime">scePowerGetBatteryLifeTime</a>() function can be used to get the estimated continuous remaining battery lifetime in minutes.<br>When the power is being supplied from an external power supply (AC adapter), the <a href="../peripheral/Power-Reference-English.htm#scePowerGetBatteryLifeTime">scePowerGetBatteryLifeTime</a>() function returns 0 since the continuous remaining time cannot be estimated.<br>Also, an SCE_POWER_ERROR_DETECTING error will occur immediately after the battery or AC connection status changes. Note that the estimated value may not be stable for a short while after the connection status changes.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_4">
<h2>
 4 <!-- hp --><b>POWER Switch Control</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">The power service controls the POWER switch on the PSP&trade; system unit.<br>Sliding the POWER switch will cause transitions between power on, standby, suspend, and resume processing. Suspend or standby processing due to the POWER switch is automatically handled by the power service. <br>Note that although the POWER switch is physically combined with the HOLD switch, the system considers it to be separate from the POWER switch.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_1">
<h3>
<a href="#Heading3_4"> 4. </a>1 
<!-- hp1 --><b>State Transitions Caused by the POWER Switch</b><br>
</a>
</h3>
<div style="margin-left:50px;">The POWER switch can be used to transition the PSP&trade; state between power on, standby, and suspend. State transitions occur due to the following operations.<br></div>

<!-- sce_hd6 -->
<a name="Heading6_4_1_1">
<div style="margin-left:63px;"><h4><b>Power On</b><br><br></h4></a></div>
<div style="margin-left:80px;">If the user slides the POWER switch when the power is off, power on (cold boot) processing is performed.<br></div>

<!-- sce_hd6 -->
<a name="Heading6_4_1_2">
<div style="margin-left:63px;"><h4><b>Standby</b><br><br></h4></a></div>
<div style="margin-left:80px;">If the user slides the POWER switch and holds it for at least two seconds when the power is on, the PSP&trade; enters standby state and power-off processing is performed.<br></div>

<!-- sce_hd6 -->
<a name="Heading6_4_1_3">
<div style="margin-left:63px;"><h4><b>Suspend</b><br><br></h4></a></div>
<div style="margin-left:80px;">If the user slides the POWER switch and holds it for less than two seconds while the PSP&trade; is in power-on state, power-off processing is performed.<br></div>

<!-- sce_hd6 -->
<a name="Heading6_4_1_4">
<div style="margin-left:63px;"><h4><b>Resume</b><br><br></h4></a></div>
<div style="margin-left:80px;">If the user slides the POWER switch while the PSP&trade; is in suspend state, resume processing is performed.<br><br></div>

<div align=center>
<p>
<img src="gif/Power-Overview-English001.gif">
</div>
<br>
<div style="margin-left:80px;"><br></div>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd3 -->
<a name="Heading3_5">
<h2>
 5 <!-- hp --><b>Automatic Power Control</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">The power service also performs power control for reasons other than operation of the POWER switch.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_1">
<h3>
<a href="#Heading3_5"> 5. </a>1 
<!-- hp1 --><b>Suspend Requests from a Program</b><br>
</a>
</h3>
<div style="margin-left:50px;">The power service can accept suspend requests from a program. This enables you to use the power service together with an RTC alarm provided by the RTC service. If you use the <a href="../peripheral/RTC-Reference-English.htm#sceRtcSetAlarmTick">sceRtcSetAlarmTick</a>() function of the RTC service to specify a scheduled wakeup time together with the <a href="../peripheral/Power-Reference-English.htm#scePowerRequestSuspend">scePowerRequestSuspend</a>() function of the power service, you can force the system to enter suspend state until the specified time. The <a href="../peripheral/Power-Reference-English.htm#scePowerRequestSuspend">scePowerRequestSuspend</a>() function should only be used together with an RTC alarm. Any other use is prohibited.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_2">
<h3>
<a href="#Heading3_5"> 5. </a>2 
<!-- hp1 --><b>Automatic Suspension</b><br>
</a>
</h3>
<div style="margin-left:50px;">The power service automatically suspends the PSP&trade; for the reasons listed below.<br>Automatic suspension only occurs when an AC power supply is not connected to the PSP&trade;. To test these operations with the development tool, be sure to use the battery emulator.<br><br></div>
<div style="margin-left:40px;"><ul>
<li> The user left the PSP&trade; unattended for the auto-sleep interval that was previously set in PSP&trade; system software, while the unit was running on battery (in the current implementation, this function is ineffective while a game program is running)
<li> The remaining battery life of the PSP&trade; has become too short
</ul></div>

<!-- sce_hd4 -->
<a name="Heading4_5_3">
<h3>
<a href="#Heading3_5"> 5. </a>3 
<!-- hp1 --><b>Automatic Standby</b><br>
</a>
</h3>
<div style="margin-left:50px;">The power service automatically performs standby processing for the following reason.<br><br></div>
<div style="margin-left:40px;"><ul>
<li> The battery ran out while the PSP&trade; was in suspend state
</ul></div>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd3 -->
<a name="Heading3_6">
<h2>
 6 <!-- hp --><b>Power Control for Hibernation</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">PSP-N1000 series systems with internal flash memory are equipped with a hibernation feature. Control for the hibernation feature is processed by the power service just like normal suspend/resume. It is not possible for an application to distinguish hibernation from normal suspend/resume.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_6_1">
<h3>
<a href="#Heading3_6"> 6. </a>1 
<!-- hp1 --><b>Hibernation Request from the User</b><br>
</a>
</h3>
<div style="margin-left:50px;">If the user presses the PS button during a game on a PSP-N1000 series system and selects "Suspend game" from the impose screen that is displayed, the power service will run the hibernation feature, which writes the state of the game that is running (hibernation data) to internal flash memory and then returns to system software.<br>At this time, the same suspend sequence as for normal suspend processing is started and a callback such as <a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_SUSPENDING">SCE_POWER_CALLBACKARG_SUSPENDING</a> is reported to the application. Note that since this is not the end of the game, the termination callback that was registered by the <a href="../kernel/Loadexec-Reference-English.htm#sceKernelRegisterExitCallback">sceKernelRegisterExitCallback</a>() function is not reported.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_6_2">
<h3>
<a href="#Heading3_6"> 6. </a>2 
<!-- hp1 --><b>Resume from Hibernation State</b><br>
</a>
</h3>
<div style="margin-left:50px;">If a game is interrupted and hibernation is running, the "Restart game" icon will appear on the PSP&trade; system software screen. If the user selects this icon, system software terminates and the power service will run resume processing using the hibernation data recorded in the internal flash memory.<br>At this time, the same resume sequence as for normal resume processing is started and a callback such as <a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_RESUMING">SCE_POWER_CALLBACKARG_RESUMING</a> or <a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_RESUME_COMP">SCE_POWER_CALLBACKARG_RESUME_COMP</a> is reported to the application. Note that the hibernation data is automatically deleted during the resume operation.<br>A resume from hibernation state differs from a resume from normal suspend state in that when the system returns from hibernation state, the network time that is obtained by the <a href="../peripheral/RTC-Reference-English.htm#sceRtcGetCurrentNetworkTick">sceRtcGetCurrentNetworkTick</a>() function is disabled.<br><br>Note that the icon that is displayed here is generated from the frame buffer that was being displayed when hibernation began. For example, if data in the frame buffer is intentionally set to display a black screen, when the application detects a callback such as <a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_SUSPENDING">SCE_POWER_CALLBACKARG_SUSPENDING</a>, the icon may become a black screen.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_6_3">
<h3>
<a href="#Heading3_6"> 6. </a>3 
<!-- hp1 --><b>Automatic Hibernation</b><br>
</a>
</h3>
<div style="margin-left:50px;">The power service automatically causes the PSP-N1000 series system to hibernate for the reason listed below.<br><br></div>
<div style="margin-left:40px;"><ul>
<li> The remaining battery life is running low
</ul></div>
<div style="margin-left:50px;"><br>Automatic hibernation only occurs when an AC power supply is not connected to the PSP-N1000 series system and no hibernation data exists. If any hibernation data still remains, automatic hibernation will not occur.<br><br>Automatic hibernation may also occur when the PSP-N1000 series system is put into suspend state by normal suspend processing. If the remaining battery life becomes low while the PSP-N1000 series system is in suspend state, the PSP-N1000 series system power supply is automatically turned on and the system transitions to standby state after the hibernation data is written.<br></div>

<!-- sce_hd3 -->
<a name="Heading3_7">
<h2>
 7 <!-- hp --><b>Power Lock</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">To prevent the power from being interrupted during an access to the Memory Stick&trade;, you can use a power lock to delay the start of suspend/power off (standby) processing. Although the device driver automatically performs lock/unlock processing, the application can also lock/unlock the power in a similar manner.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_7_1">
<h3>
<a href="#Heading3_7"> 7. </a>1 
<!-- hp1 --><b>Locking With the sceKernelPowerLock() / sceKernelPowerUnlock() functions</b><br>
</a>
</h3>
<div style="margin-left:50px;">The application can set a lock by calling the <a href="../peripheral/Power-Reference-English.htm#sceKernelPowerLock">sceKernelPowerLock</a>() function and cancel a lock by calling the <a href="../peripheral/Power-Reference-English.htm#sceKernelPowerUnlock">sceKernelPowerUnlock</a>() function. Since power locking and unlocking are nested operations, the <a href="../peripheral/Power-Reference-English.htm#sceKernelPowerLock">sceKernelPowerLock</a>() and <a href="../peripheral/Power-Reference-English.htm#sceKernelPowerUnlock">sceKernelPowerUnlock</a>() functions are always used as a pair.<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3><a href="../peripheral/Power-Reference-English.htm#sceKernelPowerLock">sceKernelPowerLock</a>(SCE_KERNEL_POWER_LOCK_DEFAULT);
	:
// Processing for preventing the power from being interrupted
	:
<a href="../peripheral/Power-Reference-English.htm#sceKernelPowerUnlock">sceKernelPowerUnlock</a>(SCE_KERNEL_POWER_LOCK_DEFAULT);
</font></pre></div>

<!-- sce_hd4 -->
<a name="Heading4_7_2">
<h3>
<a href="#Heading3_7"> 7. </a>2 
<!-- hp1 --><b>Locking With the sceIoOpen() Function</b><br>
</a>
</h3>
<div style="margin-left:50px;">Also, if SCE_O_PWLOCK is specified when a file is opened with the sceIoOpen() function, the PSP&trade; will enter a power-locked state until that file is closed.<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>// Prevent a power interruption while a file is being created
fd = sceIoOpen(pszFileName, SCE_O_CREAT | SCE_O_WRONLY | SCE_O_TRUNC | SCE_O_PWLOCK);
sceIoWrite(fd, buf, size):
sceIoClose(fd);
</font></pre></div>

<!-- sce_hd4 -->
<a name="Heading4_7_3">
<h3>
<a href="#Heading3_7"> 7. </a>3 
<!-- hp1 --><b>Precaution</b><br>
</a>
</h3>
<div style="margin-left:50px;">If the power remains locked for a long period of time, the usability of the PSP&trade; will be significantly decreased. This is because while the lock is active, the user will be unable to use the POWER switch to shut off the power. In particular, if the remaining battery runs down while the power is locked, the forced suspend operation that is automatically started by the system will no longer function.<br>For example, it is inappropriate to apply the lock on a screen while waiting for key input from the player.<br>You should not set the lock function excessively, and only use it for appropriate purposes such as protecting the operation of writing to a Memory Stick&trade;.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_8">
<h2>
 8 <!-- hp --><b>Suppression of Power Saving Features </b>
<hr noshade>
</h2>

<div style="margin-left:50px;">The PSP&trade; system software has a power save configuration for automatically turning off the backlighting or automatically causing a transition to sleep (suspend) state if there is no operation from the controller for a certain period of time.<br>The power service can suppress the transition to power save mode in the following cases by canceling the timer until startup is performed in the power save configuration.<br><br></div>
<div style="margin-left:40px;"><ul>
<li> A movie is playing and you do not want to turn off the backlight even though there has been no key input for a long time
<li> You want to turn on the backlight, which had been previously turned off, when there is a connection from another PSP&trade; via the WLAN
</ul></div>
<div style="margin-left:50px;"><br>The <a href="../peripheral/Power-Reference-English.htm#sceKernelPowerTick">sceKernelPowerTick</a>() function is used to suppress power save mode. However, this function only cancels a timer. To maintain a condition in which power save mode is suppressed continuously, call the <a href="../peripheral/Power-Reference-English.htm#sceKernelPowerTick">sceKernelPowerTick</a>() function periodically during the desired period (for example, at 1V intervals) .<br><br>Note that the controller service will automatically call the <a href="../peripheral/Power-Reference-English.htm#sceKernelPowerTick">sceKernelPowerTick</a>() function when the button input state changes. This processing is also performed automatically when headphones are attached or removed, or a Memory Stick&trade; is inserted or removed. Whether or not the <a href="../peripheral/Power-Reference-English.htm#sceKernelPowerTick">sceKernelPowerTick</a>() function is to be explicitly called from the application for any other cause is a decision that is left to the individual application.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_8_1">
<h3>
<a href="#Heading3_8"> 8. </a>1 
<!-- hp1 --><b>Suppression of LCD Power Saving and Automatic Suspension</b><br>
</a>
</h3>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-English.htm#SCE_KERNEL_POWER_TICK_DEFAULT">SCE_KERNEL_POWER_TICK_DEFAULT</a> is used for normal power save suppression.<br></div>
        <div style="margin-left:80px;"><pre><font size=3>
// Prevent power save mode
<a href="../peripheral/Power-Reference-English.htm#sceKernelPowerTick">sceKernelPowerTick</a>(<a href="../peripheral/Power-Reference-English.htm#SCE_KERNEL_POWER_TICK_DEFAULT">SCE_KERNEL_POWER_TICK_DEFAULT</a>);
</font></pre></div>

<!-- sce_hd4 -->
<a name="Heading4_8_2">
<h3>
<a href="#Heading3_8"> 8. </a>2 
<!-- hp1 --><b>Suppression of LCD Power Saving</b><br>
</a>
</h3>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-English.htm#SCE_KERNEL_POWER_TICK_LCDONLY">SCE_KERNEL_POWER_TICK_LCDONLY</a> is used to suppress only power saving for the LCD backlight. Only the timer for turning off the LCD backlight during a continuous idle state is canceled, and the timer for performing automatic suspension is not canceled.<br></div>
        <div style="margin-left:80px;"><pre><font size=3>
// Prevent power saving for the LCD backlight
<a href="../peripheral/Power-Reference-English.htm#sceKernelPowerTick">sceKernelPowerTick</a>(<a href="../peripheral/Power-Reference-English.htm#SCE_KERNEL_POWER_TICK_LCDONLY">SCE_KERNEL_POWER_TICK_LCDONLY</a>);
</font></pre></div>

<!-- sce_hd4 -->
<a name="Heading4_8_3">
<h3>
<a href="#Heading3_8"> 8. </a>3 
<!-- hp1 --><b>Suppression of Automatic Sleep Mode</b><br>
</a>
</h3>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-English.htm#SCE_KERNEL_POWER_TICK_SUSPENDONLY">SCE_KERNEL_POWER_TICK_SUSPENDONLY</a> is used to suppress suspension only, caused by automatic sleep mode. Only the timer for performing automatic suspension during a continuous idle state is canceled, and the timer for turning off the LCD backlight is not canceled.<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>// Prevent power saving for automatic suspension
<a href="../peripheral/Power-Reference-English.htm#sceKernelPowerTick">sceKernelPowerTick</a>(<a href="../peripheral/Power-Reference-English.htm#SCE_KERNEL_POWER_TICK_SUSPENDONLY">SCE_KERNEL_POWER_TICK_SUSPENDONLY</a>);
</font></pre></div>

<!-- sce_hd4 -->
<a name="Heading4_8_4">
<h3>
<a href="#Heading3_8"> 8. </a>4 
<!-- hp1 --><b>Precaution</b><br>
</a>
</h3>
<div style="margin-left:50px;">The timer for automatic sleep mode is associated with automatic sleep mode for the power saving configuration of the PSP&trade; system software. However, in the current implementation, since the automatic sleep function is not effective while a game program is running, there is no circumstance in which <a href="../peripheral/Power-Reference-English.htm#SCE_KERNEL_POWER_TICK_SUSPENDONLY">SCE_KERNEL_POWER_TICK_SUSPENDONLY</a> must be used. Be sure that either <a href="../peripheral/Power-Reference-English.htm#SCE_KERNEL_POWER_TICK_DEFAULT">SCE_KERNEL_POWER_TICK_DEFAULT</a> or <a href="../peripheral/Power-Reference-English.htm#SCE_KERNEL_POWER_TICK_LCDONLY">SCE_KERNEL_POWER_TICK_LCDONLY</a> is used for a normal game program.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_9">
<h2>
 9 <!-- hp --><b>Exclusive Control of Volatile Memory</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">Since the 4MiB of onboard eDRAM on the PSP&trade; system chip ends up being volatile when the PSP&trade; is in suspend state, 4MiB of memory is reserved from main memory for saving the eDRAM contents. The system software automatically saves and restores the eDRAM when the PSP&trade; is suspended and resumed.<br>In other words, these 4MiB of memory are used for the above purpose only when the PSP&trade; is suspended.<br>Therefore, this memory can be used for other purposes when the PSP&trade; is not suspended under the condition that this memory may be volatile. Normally, this memory is used by the utility, but a mechanism for exclusive control is provided so that it can also be used for other purposes.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_9_1">
<h3>
<a href="#Heading3_9"> 9. </a>1 
<!-- hp1 --><b>Declaring the Use of a Volatile Memory Area</b><br>
</a>
</h3>
<div style="margin-left:50px;">To use a volatile memory area, the <a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemLock">sceKernelVolatileMemLock</a>() function is used.<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3>void *pBuf;
unsigned int uiSize;

uidCb = <a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemLock">sceKernelVolatileMemLock</a>(SCE_KERNEL_VOLATILE_MEM_DEFAULT, &amp;pBuf, &amp;uiSize);
memset(pBuf, 0x00, uiSize);
</font></pre></div>

<!-- sce_hd4 -->
<a name="Heading4_9_2">
<h3>
<a href="#Heading3_9"> 9. </a>2 
<!-- hp1 --><b>Stopping the Use of a Volatile Memory Area</b><br>
</a>
</h3>
<div style="margin-left:50px;">To stop the use of a volatile memory area, the <a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>() function is used.<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3><a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>();
</font></pre></div>
<div style="margin-left:50px;"><br>After the <a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>() function is called, the relevant address can no longer be accessed.<br>The <a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>() function can only be called if the usage right has been obtained by calling <a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemLock">sceKernelVolatileMemLock</a>() or <a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemTryLock">sceKernelVolatileMemTryLock</a>(). If <a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>() is called without pairing it with one of these functions, exclusive control will fail, and the result of the operation cannot be guaranteed.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_9_3">
<h3>
<a href="#Heading3_9"> 9. </a>3 
<!-- hp1 --><b>Precaution</b><br>
</a>
</h3>
<div style="margin-left:50px;">If the user operates the POWER switch while volatile memory is being used for other than its original purpose due to a call to the <a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemLock">sceKernelVolatileMemLock</a>() function, the action will not be immediately reflected in the system state. To avoid reducing the usability of the PSP&trade;, if an <a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_SUSPENDING">SCE_POWER_CALLBACKARG_SUSPENDING</a> callback or <a href="../peripheral/Power-Reference-English.htm#SCE_POWER_CALLBACKARG_STANDINGBY">SCE_POWER_CALLBACKARG_STANDINGBY</a> callback occurs because the user operated the POWER switch and automatic sleep was invoked because of the power save timer, the <a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>() function must be called as soon as possible.<br><br>Note that use of volatile memory as a direct read buffer from the UMD&trade; is prohibited. When a seek or an internal retry occurs while reading from the UMD&trade;, the maximum size cannot be guaranteed in the worst case. Since it is difficult to implement an operation for calling the <a href="../peripheral/Power-Reference-English.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>() function quickly, you should avoid directly reading from the UMD&trade; to volatile memory.<br>To use volatile memory as cache memory for UMD&trade; reading, first temporarily read the data to normal memory and then copy the data to volatile memory.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_10">
<h2>
 10 <!-- hp --><b>Clock Control</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_10_1">
<h3>
<a href="#Heading3_10"> 10. </a>1 
<!-- hp1 --><b>Clock Frequencies on the PSP&trade; System Chip</b><br>
</a>
</h3>
<div style="margin-left:50px;">The clock frequencies can be changed for the PLL clock frequency, ALLEGREX CPU clock frequency, and bus clock frequency on the PSP&trade; system chip. Although each clock frequency can be set asynchronously, the following restrictions apply.<br><br></div>
<div style="margin-left:40px;"><ul>
<li> The PLL clock frequency can be set to any of the values 190 MHz, 222 MHz, 266 MHz, or 333 MHz. The initial value on startup is 222 MHz. For the PSP-1000, note that the PLL clock cannot be made to operate at 266 MHz or 333 MHz while the WLAN is in use.
<li> The CPU clock frequency of the ALLEGREX CPU core can be set in the range 1 to 333 MHz. However, it cannot be set higher than the PLL clock frequency. The initial value on startup is 222 MHz.
<li> The bus clock frequency is set to operate at 1/2 of the PLL clock frequency. Note that the function for changing the bus clock frequency was deleted from the specifications from version 3.50 onwards. 
</ul></div>
<div style="margin-left:50px;"><br>Various power service functions set the clock frequencies according to these restrictions. Note that a frequency may not be able to be set as specified from a user application due to settings made by a device driver that is running in the background.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_10_2">
<h3>
<a href="#Heading3_10"> 10. </a>2 
<!-- hp1 --><b>Hardware Controlled by the PLL Clock</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following hardware component operates with the PLL clock. This component runs at a maximum of 333 MHz.<br></div>
<div style="margin-left:40px;"><ul>
<li> DDR memory
</ul></div>

<!-- sce_hd4 -->
<a name="Heading4_10_3">
<h3>
<a href="#Heading3_10"> 10. </a>3 
<!-- hp1 --><b>Changing the PLL Clock Frequency</b><br>
</a>
</h3>
<div style="margin-left:50px;">To change the PLL clock frequency, call the <a href="../peripheral/Power-Reference-English.htm#scePowerSetClockFrequency">scePowerSetClockFrequency</a>() function and specify the clock frequency in MHz.<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3><a href="../peripheral/Power-Reference-English.htm#scePowerSetClockFrequency">scePowerSetClockFrequency</a>(333, 333, 166);

</font></pre></div>
<div style="margin-left:50px;">The <a href="../peripheral/Power-Reference-English.htm#scePowerSetClockFrequency">scePowerSetClockFrequency</a>() function not only changes the PLL clock frequency, but also changes the frequencies of the CPU clock and the bus clock. Each clock frequency must satisfy the constraints described above. Although the bus clock frequency is specified for the third argument, you should only specify a value that is half of the PLL clock frequency (111 when the PLL clock frequency is 222 MHz, 133 when it is 266 MHz, and 166 when it is 333 MHz).<br>Note that the time required to execute the <a href="../peripheral/Power-Reference-English.htm#scePowerSetClockFrequency">scePowerSetClockFrequency</a>() function itself may vary depending on the device type. To minimize the differences between various device types as much as possible, avoid making frequent changes to the PLL frequency. If you only need to change the CPU clock frequency, you can use the <a href="../peripheral/Power-Reference-English.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>() function, which executes faster than the <a href="../peripheral/Power-Reference-English.htm#scePowerSetClockFrequency">scePowerSetClockFrequency</a>() function.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_10_4">
<h3>
<a href="#Heading3_10"> 10. </a>4 
<!-- hp1 --><b>Valid PLL Clock Frequencies While the WLAN is in Use</b><br>
</a>
</h3>
<div style="margin-left:50px;">The PLL clock frequency that can be set while the WLAN is in use differs depending on whether the device type is a PSP-1000, or a PSP-2000 and later.<br>For the PSP-1000, the PLL clock frequency while the WLAN is in use is limited to a maximum of 222 MHz. The WLAN cannot be used and must be stopped if you want to set the PLL clock frequency to 266 MHz or 333 MHz.<br>For the PSP-2000 and later, the PLL clock frequency can be set to 266 MHz or 333 MHz while the WLAN is in use.<br>The device type on which the application is running can be checked by calling <a href="../peripheral/Power-Reference-English.htm#scePowerCheckWlanCoexistenceClock">scePowerCheckWlanCoexistenceClock</a>(). Do not use <a href="../peripheral/Power-Reference-English.htm#scePowerCheckWlanCoexistenceClock">scePowerCheckWlanCoexistenceClock</a>() for any other purpose.<br>With the PSP&trade; development tool DTP-T1000, boot parameter bit 11 can be selected on startup to cause the tool to operate either as a PSP-1000 or a PSP-2000 or later device. Be sure to verify that a program using PLL clock switching operates properly with both settings of bit 11.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_10_5">
<h3>
<a href="#Heading3_10"> 10. </a>5 
<!-- hp1 --><b>Hardware Controlled by the CPU Clock</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following components of the ALLEGREX CPU core operate with the CPU clock. These components run at a maximum of 333MHz.<br><br></div>
<div style="margin-left:40px;"><ul>
<li> Integer pipeline
<li> FPU pipeline
<li> VFPU pipeline
<li> I-cache
<li> D-cache
</ul></div>
<div style="margin-left:50px;"><br>However, when the bus interface of the ALLEGREX CPU accesses the system bus, the ALLEGREX CPU core excluding the bus interface switches to PLL clock frequency operation until the bus access is completed. This switch occurs automatically, and when the bus access is completed, the ALLEGREX CPU clock returns to the original CPU clock.<br><br>The PSP&trade; kernel has a special idle thread that is executed only when all other threads are in a WAIT state. When the PSP&trade; kernel transitions to the idle thread, a special instruction for stopping the CPU clock is executed. This means that the CPU clock is stopped while the idle thread is executing.<br>If the <a href="../peripheral/Power-Reference-English.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>() function is called to slow the frequency of the CPU clock, it will have the effect of shortening the time during which the idle thread is executing, and the time during which the CPU clock is stopped will also become shorter by the same amount. In other words, if busy loops aren't used and threads are quickly placed in WAIT states when there is nothing to do, power consumption can be minimized without using the <a href="../peripheral/Power-Reference-English.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>() function to lower the CPU clock. In other words, it is not necessary to explicitly call <a href="../peripheral/Power-Reference-English.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>() to lower the clock frequency.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_10_6">
<h3>
<a href="#Heading3_10"> 10. </a>6 
<!-- hp1 --><b>Changing the CPU Clock Frequency</b><br>
</a>
</h3>
<div style="margin-left:50px;">To change the CPU clock frequency, call the <a href="../peripheral/Power-Reference-English.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>() function and specify the clock frequency in MHz.<br><br></div>
        <div style="margin-left:80px;"><pre><font size=3><a href="../peripheral/Power-Reference-English.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>(111);
</font></pre></div>

<!-- sce_hd4 -->
<a name="Heading4_10_7">
<h3>
<a href="#Heading3_10"> 10. </a>7 
<!-- hp1 --><b>Hardware Controlled by the Bus Clock</b><br>
</a>
</h3>
<div style="margin-left:50px;">The following hardware components operate with the bus clock. These components run at a maximum of 166MHz.<br><br></div>
<div style="margin-left:40px;"><ul>
<li> VFPU write buffer
<li> Scratchpad memory
<li> Graphic Engine and Graphic Engine eDRAM
<li> DMA transfers for general-purpose memory copying
<li> DMA transfers for the Memory Stick&trade;, WLAN, USB, LCD, or audio
<li> DMA transfers for transfers to the MediaEngine
</ul></div>

<!-- sce_hd4 -->
<a name="Heading4_10_8">
<h3>
<a href="#Heading3_10"> 10. </a>8 
<!-- hp1 --><b>Changing the Bus Clock Frequency</b><br>
</a>
</h3>
<div style="margin-left:50px;">The bus clock frequency always operates at 1/2 the PLL clock frequency. The scePowerSetBusClockFrequency() function, which was included in earlier versions, has been removed.<br></div>

<!-- sce_hd4 -->
<a name="Heading4_10_9">
<h3>
<a href="#Heading3_10"> 10. </a>9 
<!-- hp1 --><b>CPU Busy Loops</b><br>
</a>
</h3>
<div style="margin-left:50px;">When the PSP&trade; kernel transitions to the idle thread, a special instruction for stopping the CPU clock is executed. If program code is written such that busy loops are used for timing and threads are not allowed to transition to WAIT state, then the kernel will not transition to the idle thread, the CPU clock will not stop, and the result is that power consumption will increase. Also, if a device driver thread that is running at a lower priority than the application is not properly scheduled, it may cause a delay in suspend/resume processing or a deadlock to occur.<br><br>For example, for a VSYNC wait, instead of writing<br></div>
        <div style="margin-left:80px;"><pre><font size=3>while (<a href="../peripheral/Display-Reference-English.htm#sceDisplayIsVblank">sceDisplayIsVblank</a>()==0);
</font></pre></div>
<div style="margin-left:50px;">the following should be used instead.<br></div>
        <div style="margin-left:80px;"><pre><font size=3><a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStart">sceDisplayWaitVblankStart</a>();
</font></pre></div>
<div style="margin-left:50px;"><br>To wait for the completion of asynchronous file I/O, instead of using sceIoPollAsync() as in this example<br></div>
        <div style="margin-left:80px;"><pre><font size=3>res = sceIoReadAsync(fd, buf, size);
if (!(res &lt; 0)) {
   while (1) {
        res = sceIoPollAsync(fd, &amp;result);
        if (res &lt; 0) {
            break;
        } else if (res==1) {
            res = result;
            break;
        }
   }
}
</font></pre></div>
<div style="margin-left:50px;">the sceIoWaitAsync() function should be used instead.<br></div>
        <div style="margin-left:80px;"><pre><font size=3>res = sceIoReadAsync(fd, buf, size);
if (!(res &lt; 0)) {
    res = sceIoWaitAsync(fd, &amp;result);
    if !((res &lt; 0)) {
        res = result;
    }
}
</font></pre></div>
<div style="margin-left:50px;">If you really want to use polling by calling the sceIoPollAsync() function, be sure to insert suitable calls to <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelDelayThread">sceKernelDelayThread</a>() so that the thread does not wastefully consume CPU time.<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_11">
<h2>
 11 <!-- hp --><b>UMD&trade; Drive Power Consumption </b>
<hr noshade>
</h2>

<div style="margin-left:50px;">The battery emulator can be used with the PSP&trade; development TOOL to monitor estimated power consumption. However, if a DVD is used, the power required for disc access is not measured.<br>Generally, access to the UMD&trade; consumes power when a seek occurs. An effective means of minimizing power consumption is to optimize sector placement in advance so that reading is performed by continuous accesses, as much as possible. It also helps (especially during streaming playback) to make the input buffer large so that reading can be performed in large units rather than splitting them into finer operations.<br>This will not only extend battery life, but it can also shorten loading time and significantly improve usability.<br><br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2010 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
