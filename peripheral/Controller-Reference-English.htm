<html lang="en">
<head>
<title>Controller-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
Controller Service Reference
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="Basic Button State Constants"></a>
<table width="100%"><td width="70%"><font size=6>Basic Button State Constants<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Basic button state constants<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
#define <i>constant-name <b>Value</i></b>

</font></pre></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;Constant Name&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;Value&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;Button&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_SELECT">SCE_CTRL_SELECT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SELECT &nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_START">SCE_CTRL_START</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;3)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;START&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_UP">SCE_CTRL_UP</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;4)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Up direction key&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Lup">SCE_CTRL_Lup</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_RIGHT">SCE_CTRL_RIGHT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;5)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Right direction key&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Lright">SCE_CTRL_Lright</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_DOWN">SCE_CTRL_DOWN</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;6)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Down direction key&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Ldown">SCE_CTRL_Ldown</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_LEFT">SCE_CTRL_LEFT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;7)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Left direction key&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Lleft">SCE_CTRL_Lleft</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_L">SCE_CTRL_L</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;8)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;L button&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_R">SCE_CTRL_R</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;9)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;R button&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_TRIANGLE">SCE_CTRL_TRIANGLE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;12)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Triangle button&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Rup">SCE_CTRL_Rup</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_CIRCLE">SCE_CTRL_CIRCLE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;13)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Circle button&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Rright">SCE_CTRL_Rright</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_CROSS">SCE_CTRL_CROSS</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;14)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;X button&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Rdown">SCE_CTRL_Rdown</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_SQUARE">SCE_CTRL_SQUARE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;15)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Square button&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Rleft">SCE_CTRL_Rleft</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These constants indicate the &quot;positions of the bits representing the pressed state of the basic buttons&quot; in the controller state information.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_CTRL_INTERCEPTED"></a>
<table width="100%"><td width="70%"><font size=6>SCE_CTRL_INTERCEPTED<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Controller intercepted constant<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
#define	SCE_CTRL_INTERCEPTED	(1&lt;&lt;16)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant indicates the &quot;position of the bit representing controller input interception&quot; in the controller state information. <br><br>Here, controller input interception refers to &quot;the state in which the intercept signal from the system enters the controller service.&quot; When this state is entered, controller input is not reported to the application. <br>This state may be entered when the PS button (HOME button) button is pressed by the user, and the pop-up menu provided by the PSP&trade; system software is running. However, even if the pop-up menu is running, the SCE_CTRL_INTERCEPTED bit is not set to 1 while the controller input interceptted signal has not entered the application. Note that it is merely a bit which corresponds to the interception of controller input, and not a bit which indicates that a pop-up is being displayed.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_CTRL_HOLD"></a>
<table width="100%"><td width="70%"><font size=6>SCE_CTRL_HOLD<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>POWER/HOLD switch state constant<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
#define	SCE_CTRL_HOLD		(1&lt;&lt;17)

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant indicates the &quot;position of the bit representing the lock state of the POWER/HOLD switch&quot; in the controller state information. <br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="Controller Mode Constants"></a>
<table width="100%"><td width="70%"><font size=6>Controller Mode Constants<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Controller mode constants<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
#define	SCE_CTRL_MODE_DIGITALONLY		0
#define	SCE_CTRL_MODE_DIGITALANALOG	1

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">SCE_CTRL_MODE_DIGITALONLY is a constant which indicates the digital buttons only mode, in which only the digital buttons are used, and the analog pad is not.<br><br>The SCE_CTRL_MODE_DIGITALANALOG is a constant which represents the digital/analog dual mode, in which the digital buttons and analog pad are both used.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlSetSamplingMode">sceCtrlSetSamplingMode</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceCtrlData"></a>
<table width="100%"><td width="70%"><font size=6>SceCtrlData<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Controller basic data<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
typedef struct SceCtrlData {
	unsigned int <i>TimeStamp</i>;
	unsigned int <i>Buttons</i>;
	unsigned char <i>Lx</i>;
	unsigned char <i>Ly</i>;
	unsigned char <i>Rsrv</i>[6];
} <b>SceCtrlData</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>TimeStamp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Time stamp during controller service read (&micro; sec)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>Buttons</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Controller state data&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>Lx</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Analog pad X axis (left 0x00 to right 0xff)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>Ly</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Analog pad Y axis (top 0x00 to bottom 0xff)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>Rsrv[6]</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Reserved&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This structure is for retrieving controller state data. <br><br>The time stamp for when data was retrieved from the controller service using functions such as <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>() is placed in the <i>TimeStamp</i> argument. <br>32-bit controller state data is placed in the <i>Buttons</i> argument. Using the <a href="../peripheral/Controller-Reference-English.htm#Basic Button State Constants">Basic Button State Constants</a> and the like, applications can ascertain the state of the respective buttons etc.<br>The analog pad coordinate data, with 0x80 taken to be the center, is placed in the <i>Lx</i> and <i>Ly</i> arguments.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlPeekBufferPositive">sceCtrlPeekBufferPositive</a>(), <a href="../peripheral/Controller-Reference-English.htm#sceCtrlPeekBufferNegative">sceCtrlPeekBufferNegative</a>(), <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>(), <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceCtrlLatch"></a>
<table width="100%"><td width="70%"><font size=6>SceCtrlLatch<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Controller latch data<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
typedef struct SceCtrlLatch {
	unsigned int <i>uiMake</i>;
	unsigned int <i>uiBreak</i>;
	unsigned int <i>uiPress</i>;
	unsigned int <i>uiRelease</i>;
} <b>SceCtrlLatch</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiMake</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Record of press start (release end)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiBreak</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Record of press end (release start)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiPress</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Record of becoming pressed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiRelease</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Record of becoming released&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This structure is for retrieving controller button latch data. <br><br>When the the conditions for the above members are satisfied, a 1 is stored in the position of the corresponding member in the controller service. This is the latch data, and is held globally by the system. <br>The latch data is cleared after the latch data is read using the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>() function. In other words, the stored latch data constitutes a record of the state after the last time that the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>() function was called. <br><br>The bit patterns in the table shown below are returned in the members of the latch data. There are no combinations other than these. The &quot;Details&quot; items all describe the movement of the buttons during the period from last time that the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>() function was last called until the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>() function was just called. &quot;State during Retrieval&quot; is the button state when the latch data was retrieved.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>make</b>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>break</b>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>press</b>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>release</b>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Meaning</b>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Details</b>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>During retrieval</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Released state continues&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The button has been continually released since the last time.&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Released&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pressed state continues&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The button has been continually pressed since the last time.&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pressed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Transitioned to released state&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The button was released from its previously pressed state, and has been continually released after that&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Released&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Transitioned to released state&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The button was released from its continually pressed state, and has been continually released after that&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Released&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Transitioned to pressed state&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The button was pressed from its previously released state, and has been continually pressed after that&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pressed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Transitioned to pressed state&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The button was pressed after being in the continually released state, and has been continually pressed after that&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pressed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pressed / released mutual transition&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The button entered both the pressed and released state. (Order unknown)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unknown&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlPeekLatch">sceCtrlPeekLatch</a>(), <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlSetSamplingMode"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlSetSamplingMode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Setting the controller mode<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlSetSamplingMode</b> (
	unsigned int <i>uiMode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiMode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Controller mode&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_CTRL_MODE_DIGITALONLY&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_CTRL_MODE_DIGITALANALOG&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns the old mode value which had been specified up to that point. <br>If an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Failure&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Digital buttons only mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Digital buttons / analog pad dual mode&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the controller mode. <br><br>In the <i>uiMode</i> argument, specify either the digital buttons only mode (SCE_CTRL_MODE_DIGITAL_ONLY), in which only the digital buttons are retrieved, or the digital buttons / analog pad dual mode (SCE_CTRL_MODE_DIGITALANALOG), in which the analog pad is used as well. <br>The default is the digital buttons only mode. <br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlGetSamplingMode">sceCtrlGetSamplingMode</a>(), SCE_CTRL_MODE_DIGITALONLY, SCE_CTRL_MODE_DIGITALANALOG<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlGetSamplingMode"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlGetSamplingMode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get controller mode<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlGetSamplingMode</b> (
	unsigned int *<i>puiMode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>puiMode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to the unsigned int variable which is to receive the controller mode&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns the mode value which had been set prior to modification.<br>If an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Failure&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function retrieves the controller mode which was set by using the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlSetSamplingMode">sceCtrlSetSamplingMode</a>() function.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlSetSamplingMode">sceCtrlSetSamplingMode</a>(), SCE_CTRL_MODE_DIGITALONLY, SCE_CTRL_MODE_DIGITALANALOG<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlSetSamplingCycle"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlSetSamplingCycle<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set sampling period<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlSetSamplingCycle</b> (
	unsigned int <i>uiCycle</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiCycle</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Specifies the sampling period in microseconds. &nbsp;&nbsp;<br>&nbsp;&nbsp;(Range is 0 or 5555-20000)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns the sampling period value which had been set prior to modification. <br>If an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Failure&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the period with which controller sampling is performed, in microseconds. <br><br>In the <i>uiCycle </i>argument, specify not the frequency but the period. <br>The default sampling period at application start-up is 0. If 0, sampling is performed in VSYNC period sampling mode, at the start time of each VBLANK period. <br>If a value from 5555 to 20000 (the range from about 180 to 50 Hz) is specified, sampling will be performed asynchronously to VSYNC in the specified microsecond units. <br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_1">
<div style="margin-left:40px;"><h4><b>Notes</b><br><br></h4></div></a>

<div style="margin-left:50px;">If the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>() and <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>() functions are called with a timing in which sampling was not completed, the thread will block, but if a VSYNC asynchronous sampling frequency was specified by the sceCtrlSetSamplingCycle() function, the blocking release timing of the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>() and <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>() functions will be asynchronous to VSYNC. <br>When calling <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStart">sceDisplayWaitVblankStart</a>() function etc. and <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>() function etc. from the same thread, sufficient care must be exercised in using VSYNC asynchronous mode.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlGetSamplingCycle">sceCtrlGetSamplingCycle</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlGetSamplingCycle"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlGetSamplingCycle<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get sampling cycle<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlGetSamplingCycle</b> (
	unsigned int *<i>puiCycle</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>puiCycle</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to the unsigned int variable which is to receive the sampling cycle.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Failure&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function retrieves the sampling period which was set by using the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlSetSamplingCycle">sceCtrlSetSamplingCycle</a>() function.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlSetSamplingCycle">sceCtrlSetSamplingCycle</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlSetIdleCancelThreshold"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlSetIdleCancelThreshold<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set idle cancel threshold<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlSetIdleCancelThreshold</b>(
	int <i>iUnHoldThreshold</i>,
	int <i>iHoldThreshold</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iUnHoldThreshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unhold threshold (-1 to 128)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iHoldThreshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Hold threshold (-1 to 128)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Failure&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the threshold for cancelling the idle timer for analog pad operation. <br><br>The idle timer represents a process for exercising power-saving functionality such as automatic backlight shut-off and automatic sleep. It specifies how much movement there must be on the analog pad in order for the idle timer to be cancelled. <br>The thresholds during unhold and during hold are respectively set to values from -1 to 128 by the arguments <i>iUnHoldThreshold</i> and <i>iHoldThreshold</i>. <br>If -1 is specified, analog pad operation does not result in the idle timer cancellation. This is the state by default. <br>If 0 is specified, idle timer cancellation is performed even if there is no analog pad operation, so the idle timer itself stops functioning. <br>If the maximum value of 128 has been specified, then when the user moves either X or Y on the analog pad to the maximum breadth, this will cause the idle timer to be cancelled. <br>Ideally the center value for X and Y when the analog pad is not in use would become 0x80, but in reality values close to the center must be discarded as a dead zone due to hysteresis, jitter, etc. For this reason, for the threshold value which is set using the sceCtrlSetIdleCancelThreshold() function as well, do not specify a value which is too small.<br>Moreover, regardless of the sceCtrlSetIdleCancelThreshold setting, analog pad operation will not result in the idle timer cancellation when SCE_CTRL_MODE_DIGITALONLY mode is specified by the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlSetSamplingMode">sceCtrlSetSamplingMode</a>() function.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlGetIdleCancelThreshold">sceCtrlGetIdleCancelThreshold</a>(), <a href="../peripheral/Power-Reference-English.htm#sceKernelPowerTick">sceKernelPowerTick</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlGetIdleCancelThreshold"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlGetIdleCancelThreshold<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get idle cancel threshold<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlGetIdleCancelThreshold</b>(
	int *<i>piUnHoldThreshold</i>,
	int *<i>piHoldThreshold</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>piUnHoldThreshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to the int variable which is to receive the unhold threshold&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>piHoldThreshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to the int variable which is to receive the hold threshold&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Failure&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function retrieves the threshold which was set by using the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlSetIdleCancelThreshold">sceCtrlSetIdleCancelThreshold</a>() function.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlSetIdleCancelThreshold">sceCtrlSetIdleCancelThreshold</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlPeekBufferPositive"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlPeekBufferPositive<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Retrieve controller state data by polling (positive logic)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlPeekBufferPositive</b> (
	<a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a> *<i>pData,</i>
	int <i>nBufs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pData</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffers to receive controller data&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nBufs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of buffers to receive controller data (1 to 64)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns the number of sets of controller data which were returned in <i>pData</i>. The value is in the range of 1 to <i>nBufs</i>. <br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function retrieves controller state data in positive logic. <br><br>With the sceCtrlPeekBufferPositive() function, in the <i>Buttons</i> member of the <a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a> structure placed in the <i>pData</i> argument, any bits which are 1 indicate that the button in question was pressed. <br>The most recent 64 sets of controller state information are held in the controller service, and the sceCtrlPeekBufferPositive() function retrieves from among these, by polling, the number of buffers specified in the <i>nBufs</i> argument, starting with the most recent one. <br>The contents of the buffers are updated by interrupt every time that the controller is sampled; the state of the buffers does not change as a result of calling the sceCtrlPeekBufferPositive() function. For this reason, note that, depending on the timing of the calls to the sceCtrlPeekBufferPositive() function, variations may arise in whether data is retrieved before or after the buffers are routinely updated at the VSYNC interval.<br><br></div>

<!-- Notes -->
<div style="margin-left:10px;"><b>Notes</b></div>
<hr noshade align="left" size=2 width=20%>
<br>

<!-- sce_title -->
<a Name ="HeadingT_4_2">
<div style="margin-left:40px;"><h4><b>Differences with Similar Functions</b><br><br></h4></div></a>

<div style="margin-left:50px;">With the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlPeekBufferNegative">sceCtrlPeekBufferNegative</a>() function, the controller state data will be 0 when the button in question is pressed. <br>With the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>() function, in order to retrieve the controller state data by blocking, recent data is retrieved by blocking the thread if the function was called earlier than the sampling interval.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a>, <a href="../peripheral/Controller-Reference-English.htm#sceCtrlPeekBufferNegative">sceCtrlPeekBufferNegative</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlPeekBufferNegative"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlPeekBufferNegative<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Retrieve controller state data by polling (negative logic)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlPeekBufferNegative</b> (
	<a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a> *<i>pData,</i>
	int <i>nBufs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pData</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffers to receive controller data&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nBufs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of buffers to receive controller data (1 to 64)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns the number of sets of controller data which were returned in <i>pData</i>. The value is in the range of 1 to <i>nBufs</i>. <br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function retrieves controller state data in negative logic. <br><br>With the sceCtrlPeekBufferNegative() function, in the <i>Buttons</i> member of the <a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a> structure placed in the <i>pData</i> argument, any bits which are 0 indicate that the button in question was pressed. <br>The most recent 64 sets of controller state information are held in the controller service, and the sceCtrlPeekBufferNegative() function retrieves from among these, by polling, the number of buffers specified in the <i>nBufs</i> argument, starting with the most recent one. <br>The contents of the buffers are updated by interrupt every time that the controller is sampled; the state of the buffers does not change as a result of calling the sceCtrlPeekBufferNegative() function. For this reason, note that, depending on the timing of the calls to the sceCtrlPeekBufferNegative() function, variations may arise in whether data is retrieved before or after the buffers are routinely updated at the VSYNC interval.<br><br></div>

<!-- Notes -->
<div style="margin-left:10px;"><b>Notes</b></div>
<hr noshade align="left" size=2 width=20%>
<br>

<!-- sce_title -->
<a Name ="HeadingT_4_3">
<div style="margin-left:40px;"><h4><b>Differences with Similar Functions</b><br><br></h4></div></a>

<div style="margin-left:50px;">With the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlPeekBufferPositive">sceCtrlPeekBufferPositive</a>() function, the controller state data will be 1 when the button in question is pressed. <br>With the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>() function, in order to retrieve the controller state data by blocking, recent data is retrieved by blocking the thread if the function was called earlier than the sampling interval.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a>, <a href="../peripheral/Controller-Reference-English.htm#sceCtrlPeekBufferPositive">sceCtrlPeekBufferPositive</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlReadBufferPositive"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlReadBufferPositive<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Retrieve controller state data by blocking (positive logic)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlReadBufferPositive</b> (
	<a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a> *<i>pData</i>,
	int <i>nBufs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pData</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffers to receive controller data&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nBufs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of buffers to receive controller data (1 to 64)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns the number of sets of controller state data which were returned in <i>pData</i>. The value is in the range of 1 to <i>nBufs</i>. <br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function retrieves controller state data in positive logic. <br><br>With the sceCtrlReadBufferPositive() function, in the <i>Buttons</i> member of the <a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a> structure placed in the <i>pData</i> argument, any bits which are 1 indicate that the button in question was pressed. <br>The most recent 64 sets of controller state information are held in the controller service, and the sceCtrlReadBufferPositive() function retrieves the number of buffers specified by the <i>nBufs</i> argument, starting from the current position of the read pointer, and then updates the read pointer. <br>If the controller was not sampled even once during the period from the last call to the sceCtrlReadBufferPositive() function or <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>() function until the current call to the sceCtrlReadBufferPositive() function, then the thread blocks in the sceCtrlReadBufferPositive() function until the controller is sampled again. Consequently, the return value will always be 1 or greater, and the most recent data will be retrieved. <br>In addition, when there will be situations in which, due to a processing lag or the like, the sceCtrlReadBufferPositive() function cannot be called at each specified sampling interval, set the value of <i>nBuf</i> to 2 or greater, and based on whether or not the return value is greater than 1, it will be possible to ascertain whether or not there was a processing lag.<br><br></div>

<!-- Notes -->
<div style="margin-left:10px;"><b>Notes</b></div>
<hr noshade align="left" size=2 width=20%>
<br>

<!-- sce_title -->
<a Name ="HeadingT_4_4">
<div style="margin-left:40px;"><h4><b>Differences with Similar Functions</b><br><br></h4></div></a>

<div style="margin-left:50px;">With the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>() function, the controller state data will be 0 when the button in question is pressed. <br>With the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlPeekBufferPositive">sceCtrlPeekBufferPositive</a>() function, in order to retrieve the controller state data by snooping, the latest sampling results are repeatedly retrieved without blocking the thread if the function was called earlier than the sampling interval.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a>, <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlReadBufferNegative"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlReadBufferNegative<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Retrieve controller state data by blocking (negative logic)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlReadBufferNegative</b> (
	<a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a> *<i>pData</i>,
	int <i>nBufs</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pData</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffers to receive controller data&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nBufs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of buffers to receive controller data (1 to 64)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns the number of sets of controller data which were returned in <i>pData</i>. The value is in the range of 1 to <i>nBufs</i>. <br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function retrieves controller state data in negative logic. <br><br>With the sceCtrlReadBufferNegative() function, in the <i>Buttons</i> member of the <a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a> structure placed in the <i>pData</i> argument, any bits which are 0 indicate that the button in question was pressed. <br>The most recent 64 sets of controller state information are held in the controller service, and the sceCtrlReadBufferNegative() function retrieves the number of buffers specified by the <i>nBufs</i> argument, starting from the current position of the read pointer, and then updates the read pointer. <br>If the controller was not sampled even once during the period from the last call to the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>() function or sceCtrlReadBufferNegative() function until the current call to the sceCtrlReadBufferNegative() function, then the thread blocks in the sceCtrlReadBufferNegative() function until the controller is sampled again. Consequently, the return value will always be 1 or greater, and the most recent data will be retrieved. <br>In addition, when there will be situations in which, due to a processing lag or the like, the sceCtrlReadBufferNegative() function cannot be called at each specified sampling interval, set the value of <i>nBuf</i> to 2 or greater, and based on whether or not the return value is greater than 1, it will be possible to ascertain whether or not there was a processing lag.<br><br></div>

<!-- Notes -->
<div style="margin-left:10px;"><b>Notes</b></div>
<hr noshade align="left" size=2 width=20%>
<br>

<!-- sce_title -->
<a Name ="HeadingT_4_5">
<div style="margin-left:40px;"><h4><b>Differences with Similar Functions</b><br><br></h4></div></a>

<div style="margin-left:50px;">With the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>() function, the controller state data will be 1 when the button in question is pressed. <br>With the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlPeekBufferNegative">sceCtrlPeekBufferNegative</a>() function, in order to retrieve the controller state data by snooping, the latest sampling results are repeatedly retrieved without blocking the thread if the function was called earlier than the sampling interval.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#SceCtrlData">SceCtrlData</a>, <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlPeekLatch"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlPeekLatch<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get latch data by snooping<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlPeekLatch</b> (
	<a href="../peripheral/Controller-Reference-English.htm#SceCtrlLatch">SceCtrlLatch</a> *<i>pLatch</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pLatch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffers to receive latch data&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns the number of times sampling was performed since the last time that the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>() function was called.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function reads latch data. <br><br>At each sampling interval, the controller service compares the pressed/released state of the digital buttons with the button pressed state from the previous time, and stores the changes globally in the system as latch data. The sceCtrlPeekLatch() function reads this latch data. <br>However, unlike the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>() function, the latch data is not cleared after it is read. For this reason, while a thread is using the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>() function, to retrieve the latch data from another thread, do so using the sceCtrlPeekLatch() function, which does not have any effect on other threads. <br>For information regarding the latch information which can be retrieved, see <a href="../peripheral/Controller-Reference-English.htm#SceCtrlLatch">SceCtrlLatch</a>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>(), <a href="../peripheral/Controller-Reference-English.htm#SceCtrlLatch">SceCtrlLatch</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlReadLatch"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlReadLatch<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get latch data<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlReadLatch</b> (
	<a href="../peripheral/Controller-Reference-English.htm#SceCtrlLatch">SceCtrlLatch</a> *<i>pLatch</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pLatch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffer to receive latch data&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns the number of times sampling was performed since the last time that the sceCtrlReadLatch() function was called.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function reads the most recent latch data. <br><br>At each sampling interval, the controller service compares the pressed/released state of the digital buttons with the button pressed state from the previous time, and stores the changes globally in the system as latch data. The sceCtrlReadLatch() function reads this latch data, and then clears the latch data. For this reason, to retrieve the latch data while another thread is using the sceCtrlReadLatch() function, do so using the <a href="../peripheral/Controller-Reference-English.htm#sceCtrlPeekLatch">sceCtrlPeekLatch</a>() function, which does not have any effect on other threads. <br>For information regarding the latch information which can be retrieved, see <a href="../peripheral/Controller-Reference-English.htm#SceCtrlLatch">SceCtrlLatch</a>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlPeekLatch">sceCtrlPeekLatch</a>(), <a href="../peripheral/Controller-Reference-English.htm#SceCtrlLatch">SceCtrlLatch</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlClearRapidFire"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlClearRapidFire<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Clear rapid-fire settings<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlClearRapidFire</b> (
	int <i>idx</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>idx</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Rule index for button rapid-fire (0 to 15)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function clears the digital button rapid-fire settings which were set using <a href="../peripheral/Controller-Reference-English.htm#sceCtrlSetRapidFire">sceCtrlSetRapidFire</a>(). <br><br>In the <i>idx</i> argument, select the rule index to clear.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlSetRapidFire">sceCtrlSetRapidFire</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlSetRapidFire"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlSetRapidFire<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set button rapid-fire rules<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlSetRapidFire</b> (
	int <i>idx,</i>
	unsigned int <i>uiMask</i>,
	unsigned int <i>uiTrigger</i>,
	unsigned int<i> uiTarget,</i>
	unsigned int <i>uiDelay,</i>
	unsigned int <i>uiMake</i>,
	unsigned int <i>uiBreak</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>idx</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Rule index for button rapid-fire (0 to 15)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiMask</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Comparison mask of button operation to be the rapid-fire trigger&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiTrigger</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Button operation to be the rapid-fire trigger&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiTarget</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Button on which rapid-fire input is to be performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiDelay</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Dead time of rapid-fire trigger (sampling frequency)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiMake</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Button press time (sampling frequency)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiBreak</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Button release time (sampling frequency)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the rules for the button rapid-fire functionality. <br><br>It will work on the actual unit as well, but is primarily intended for debugging. <br>Place a rule index number from 0 to 15 in the <i>idx</i> argument. Up to 16 patterns can be stored as rules. When the button input, masked by the <i>uiMask</i> argument, matches the <i>uiTrigger</i> argument, the button specified by the <i>uiTarget</i> argument is placed in the rapid-fire state. The <i>uiMask</i>, <i>uiTrigger</i>, and <i>uiTarget</i> arguments are all specified in positive logic. The <i>uiDelay</i> argument specifies the rapid-fire start timing, and <i>uiMake</i> and <i>uiBreak</i> specify the rapid-fire cycle.<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_5_6">
<div style="margin-left:40px;"><h4><b>Sample Settings</b><br><br></h4></div></a>

        <div style="margin-left:50px;"><pre><font size=3>sceCtrlSetRapidFire(0,
		(<a href="../peripheral/Controller-Reference-English.htm#SCE_CTRL_CIRCLE">SCE_CTRL_CIRCLE</a> | <a href="../peripheral/Controller-Reference-English.htm#SCE_CTRL_L">SCE_CTRL_L</a>),	// Mask [circle][L]
		<a href="../peripheral/Controller-Reference-English.htm#SCE_CTRL_CIRCLE">SCE_CTRL_CIRCLE</a>,	// If the [circle] button is in the pressed state
		<a href="../peripheral/Controller-Reference-English.htm#SCE_CTRL_SQUARE">SCE_CTRL_SQUARE</a>,	// Using the [square] button,
		10,			// after a 10-cycle delay,
		1, 1);			// with a (1+1)-cycle period: ON&rarr;OFF&rarr;

sceCtrlSetRapidFire(1,
		<a href="../peripheral/Controller-Reference-English.htm#SCE_CTRL_TRIANGLE">SCE_CTRL_TRIANGLE</a>,	// Mask [triangle]
		<a href="../peripheral/Controller-Reference-English.htm#SCE_CTRL_TRIANGLE">SCE_CTRL_TRIANGLE</a>,	// If the [triangle] button is in the pressed 
                                            state
		<a href="../peripheral/Controller-Reference-English.htm#SCE_CTRL_TRIANGLE">SCE_CTRL_TRIANGLE</a>,	// Using the [triangle] button,
		1,			// after a 1-cycle delay,
		2, 1);			// with a (2+1)cycle period:ON&rarr;ON&rarr;OFF &rarr;
</font></pre></div>
<div style="margin-left:50px;"><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-English.htm#sceCtrlClearRapidFire">sceCtrlClearRapidFire</a>()<br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
