<html lang="en">
<head>
<title>USB_Mic-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
USB Mic Reference
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBACC_NAME"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBACC_NAME<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Constant representing the USB accessory base driver name<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbacc.h&gt;
#define  SCE_USBACC_NAME	"USBAccBaseDriver"

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the name of the USB accessory base driver. <br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbStart">sceUsbStart</a>() , <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbStop">sceUsbStop</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBMIC_NAME"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBMIC_NAME<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Constant representing the USB mic driver name<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbmic.h&gt;
#define  SCE_USBMIC_NAME		"USBMicDriver"

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the name of the USB mic driver. <br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbStart">sceUsbStart</a>() , <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbStop">sceUsbStop</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USB_PID_MIC"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USB_PID_MIC<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Constant representing the USB mic's product ID<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbmic.h&gt;
#define  SCE_USB_PID_MIC		0x025B

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the USB mic's product ID<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbActivate">sceUsbActivate</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceUsbMicParam"></a>
<table width="100%"><td width="70%"><font size=6>SceUsbMicParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Codec settings<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbmic.h&gt;
typedef struct SceUsbMicParam {
	int <i>alc</i>;
	int <i>gain</i>;
	int <i>noiz</i>;
	int <i>hold</i>;
	int <i>decay</i>;
	int <i>attack</i>;
} <b>SceUsbMicParam</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>alc</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ALC ON/OFF state and target level&nbsp;&nbsp;<br>&nbsp;&nbsp;0: ALC = OFF&nbsp;&nbsp;<br>&nbsp;&nbsp;-6 to -29: ALC = ON and target level is -6 to -29 [dB]&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>gain</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input gain setting&nbsp;&nbsp;<br>&nbsp;&nbsp;Maximum gain when ALC = ON.&nbsp;&nbsp;<br>&nbsp;&nbsp;Valid settings are -12, -6, 0, +6, +12, +18, +24, and +30[dB]&nbsp;&nbsp;<br>&nbsp;&nbsp;Normal input gain when ALC = OFF.&nbsp;&nbsp;<br>&nbsp;&nbsp;    -17.25 to 0 to +30 [dB]&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>noiz</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Noise gate ON/OFF state and noise gate threshold level&nbsp;&nbsp;<br>&nbsp;&nbsp;0: Noise gate = OFF&nbsp;&nbsp;<br>&nbsp;&nbsp;(When ALC = OFF, <i>noiz</i> has no effect)&nbsp;&nbsp;<br>&nbsp;&nbsp;-76 to -30: Noise gate = ON and threshold level is -76 to -30 [dB]&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>hold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Time until ALC starts increasing the gain (When ALC = OFF, <i>hold</i> has no effect)&nbsp;&nbsp;<br>&nbsp;&nbsp;0: 0 [ms]&nbsp;&nbsp;<br>&nbsp;&nbsp;1 to 15: 2.667*(2^(hold-1)) [ms] ( 2.667 to 43691 [ms]&nbsp;&nbsp;<br>&nbsp;&nbsp;(*) The effect varies by a power of the value set&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>decay</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Time during which gain increases due to ALC (When ALC=OFF, <i>decay</i> has no effect)&nbsp;&nbsp;<br>&nbsp;&nbsp;0 to 10: 24.0*(2^(decay)) [ms] ( 24.0 to 24580 [ms]&nbsp;&nbsp;<br>&nbsp;&nbsp;(*) The effect varies by a power of the value set as shown in the above relation&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>attack</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Time during which gain decreases due to ALC (When ALC = OFF, <i>attack</i> has no effect)&nbsp;&nbsp;<br>&nbsp;&nbsp;0 to 10: 6.0*(2^(attack)) [ms] ( 6.0 to 6144 [ms]&nbsp;&nbsp;<br>&nbsp;&nbsp;(*) The effect varies by a power of the value set as shown in the above relation&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This structure represents codec setting parameters.<br>It is used as an argument of <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInitEx">sceUsbMicInputInitEx</a>().<br>The <i>alc</i>,<i> gain</i>, and<i> noiz</i> values are the same as the argument passed to <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInit">sceUsbMicInputInit</a>().<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInitEx">sceUsbMicInputInitEx</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbStart"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbStart<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Start USB driver<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usb.h&gt;
int <b>sceUsbStart</b>(
	const char <i>*name</i>,
	unsigned int <i>args,</i>
<i>	</i>const void <i>*argp</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Name of USB driver to be started&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>args</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, one of the following error codes, which are defined in usb.h, or an error code that is defined in kerror.h or psperror.h is returned.<br><br>SCE_USB_ERROR_ALREADY, SCE_USB_ERROR_NOTAVAIL<br>SCE_USB_ERROR_NOENT, SCE_USB_ERROR_INPROGRESS<br>SCE_USB_ERROR_INVAL<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is an API that is provided by the USB bus driver. It starts the USB driver named <i>name</i>.<br>To use this API, be sure to link usb_stub.a.<br><br>To use a USB mic, be sure to start the USB drivers in the following order.<br></div>
</ul>
<div style="margin-left:50px;"><ol>
<li VALUE=1> USB bus driver (SCE_USB_BUS_DRIVER_NAME)</li>
<li VALUE=2> USB accessory base driver (<a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBACC_NAME">SCE_USBACC_NAME</a>)</li>
<li VALUE=3> USB mic driver (<a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_NAME">SCE_USBMIC_NAME</a>)</li>
</ol></div>
<div style="margin-left:50px;"><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>// Start USB bus driver
if (sceUsbStart(SCE_USB_BUS_DRIVER_NAME, 0, NULL) &lt; 0) {
	// Error handling
}

// Start USB accessory base driver
if (sceUsbStart(<a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBACC_NAME">SCE_USBACC_NAME</a>, 0, NULL) &lt; 0) {
	// Error handling
}

// Start USB mic driver
if (sceUsbStart(<a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_NAME">SCE_USBMIC_NAME</a>, 0, NULL) &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbStop">sceUsbStop</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbStop"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbStop<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Stop USB driver<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usb.h&gt;
int <b>sceUsbStop(</b>
	const char <i>*name</i>,
	unsigned int <i>args,</i>
	const void <i>*argp</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Name of USB driver to be stopped&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>args</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, one of the following error codes, which are defined in usb.h, or an error code that is defined in kerror.h or psperror.h is returned.<br><br>SCE_USB_ERROR_ALREADY, SCE_USB_ERROR_NOTAVAIL<br>SCE_USB_ERROR_NOENT, SCE_USB_ERROR_INPROGRESS<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is an API that is provided by the USB bus driver. It stops the USB driver named <i>name</i>.<br>To use this API, be sure to link usb_stub.a.<br>To stop a USB driver, the <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbDeactivate">sceUsbDeactivate</a>() function must be used to deactivate the USB device first.<br><br>When using a USB mic, be sure to stop the USB drivers in the opposite order from when they were started with <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbStart">sceUsbStart</a>().<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>// Stop USB mic driver
if (sceUsbStop(<a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_NAME">SCE_USBMIC_NAME</a>, 0, NULL) &lt; 0) {
	// Error handling
}

// Stop USB accessory base driver
if (sceUsbStop(<a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBACC_NAME">SCE_USBACC_NAME</a>, 0, NULL) &lt; 0) {
	// Error handling
}
// Stop USB bus driver
if (sceUsbStop(SCE_USB_BUS_DRIVER_NAME, 0, NULL) &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbStart">sceUsbStart</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbActivate"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbActivate<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Activate USB device<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usb.h&gt;
int <b>sceUsbActivate</b>(
	unsigned int <i>idProduct</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>idProduct</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Product ID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, one of the following error codes, which are defined in usb.h, or an error code that is defined in kerror.h or psperror.h is returned.<br><br>SCE_USB_ERROR_ALREADY, SCE_USB_ERROR_NOENT, SCE_USB_ERROR_NOSPC<br>SCE_USB_ERROR_NOMEM, SCE_USB_ERROR_INPROGRESS<br>SCE_USB_ERROR_INVAL, SCE_USB_ERROR_NOTAVAIL<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is an API that is provided by the USB bus driver. It collects together plugged in USB drivers and activates them as one USB device. Until the drivers are activated as a USB device, they are not recognized by the host even if USB a cable is connected.<br>To use this API, be sure to link usb_stub.a.<br>To activate USB drivers as a USB device, the required USB drivers must be started in advance.<br><br>To use a USB mic, be sure to specify <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USB_PID_MIC">SCE_USB_PID_MIC</a>, which is defined in usbmic.h, for the product ID argument.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>if (sceUsbActivate(<a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USB_PID_MIC">SCE_USB_PID_MIC</a>) &lt; 0) {
	// Error handling
} else {
	printf("successfully activated\n");
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbDeactivate">sceUsbDeactivate</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbDeactivate"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbDeactivate<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Deactivate USB device<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usb.h&gt;
int <b>sceUsbDeactivate</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, one of the following error codes, which are defined in usb.h, or an error code that is defined in kerror.h or psperror.h is returned.<br><br>SCE_USB_ERROR_ALREADY, SCE_USB_ERROR_INPROGRESS<br>SCE_USB_ERROR_NOTAVAIL<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is an API that is provided by the USB bus driver. It deactivates a USB device.<br>To use this API, be sure to link usb_stub.a.<br>From the host, the USB device will appear to be in the same state as when the USB cable is removed.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>if (sceUsbDeactivate() &lt; 0) {
	// Error handling
} else {
	printf("successfully deactivated\n");
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbActivate">sceUsbActivate</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbAccGetAuthStat"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbAccGetAuthStat<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get USB accessory authentication status<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbacc.h&gt;
int <b>sceUsbAccGetAuthStat</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When the PSP&trade; is connected to a USB accessory, 0 is returned.<br>When it is connected to a USB host other than a USB accessory, an <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBACC_ERROR_NOT_ACCESSORY">SCE_USBACC_ERROR_NOT_ACCESSORY</a> error is returned, and when it is not recognized by the USB host (the USB specifications status is not SCE_USB_CONFIGURED), an SCE_USB_ERROR_NOTAVAIL error is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the USB accessory authentication status.<br>It should be used, for example, when the PSP&trade; is connected to a USB host other than a USB accessory such as a PC, to determine whether or not it is connected to a USB accessory by displaying a dialog prompting the user for a USB accessory connection<br><br>According to the USB specification, when a USB accessory that is not supported by the USB mic library is connected, the status will not become SCE_USB_CONFIGURED, and a <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBACC_ERROR_NOT_ACCESSORY">SCE_USBACC_ERROR_NOT_ACCESSORY</a> error will be returned instead.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int stat;
int ret;

ret = <a href="../peripheral/USB_Driver-Reference-English.htm#sceUsbWaitState">sceUsbWaitState</a>(SCE_USB_CONFIGURED, SCE_KERNEL_EW_AND, NULL);
if (ret &lt; 0) {
	// Error handling
}

stat = sceUsbAccGetAuthStat();
if (stat == SCE_OK) {
	// When connected to a USB accessory
} else if (stat == <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBACC_ERROR_NOT_ACCESSORY">SCE_USBACC_ERROR_NOT_ACCESSORY</a>) {
	// When connected to a USB host other than a USB accessory
} else {
	// When status is not SCE_USB_CONFIGURED
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBACC_ERROR_NOT_ACCESSORY">SCE_USBACC_ERROR_NOT_ACCESSORY</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbMicInputInit"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbMicInputInit<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Initialize mic input and set codec parameters<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbmic.h&gt;
int <b>sceUsbMicInputInit</b>(
	int <i>alc,</i>
	int <i>gain,</i>
	int <i>noiz</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>alc</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ALC ON/OFF state and target level&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>gain</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Maximum gain&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>noiz</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Noise gate ON/OFF state and noise gate threshold level&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, the following error code or an error code that is defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function initializes the mic input and sets codec parameters.<br>If this function is called while mic input is being executed, it stops the mic input and sets the parameters.<br><br>By setting <i>alc</i> to a negative value, this function will enable the Auto Level Control (ALC) .<br>ALC is a function that automatically adjusts the input level so that it is maintained at a pre-determined value when the volume is too low or too high. <br><i>alc</i> sets the target level using an integer value [dB], where 0 [dB] is the maximum.<br>The hardware specification supports values in the range -6 to -29 [dB]. The value can be set in steps of approximately 1 [dB].<br>If <i>alc</i> is set to a non-negative value, the ALC function is turned OFF.<br><br><i>gain</i> is used as the maximum gain setting for ALC when the ALC function is ON.<br>The hardware specification supports values in the range -12 to 0 to +30 [dB] in steps of 6 [dB]. Note that values in steps of 1 can be set, but the effective value will only be one of -12, -6, 0, +6, +12, +18, +24, and +30.<br><br>When ALC is OFF, <i>gain</i> should be set to the absolute value of the gain.<br>The hardware specification supports values in the range -18 to +30 [dB]. The value can be changed in steps of approximately 1 [dB].<br><br><i>noiz</i> is the setting for the noise gate function. This function prevents ALC from adjusting the gain for an input that is less than or equal to a pre-determined level. This prevents ALC from increasing the gain of hiss noise during periods of silence. The noise gate function is enabled only when ALC is ON.<br>When 0 is set for <i>noiz</i>, the noise gate function is turned OFF. When a negative value is set, the value set by the input level is taken as the threshold value, and gain adjustments by ALC will no longer be effective for input levels less than or equal to that threshold value.<br>The hardware specification supports values in the range -76 to -30 [dB]. The value can be changed in steps of approximately 1 [dB].<br><br>Example 1:  <br>For the following settings:  <i>alc</i> = -6, <i>gain</i> = +30, and <i>noiz</i> = -60,<br>no gain adjustment will be performed for an input level less than or equal to -60 [dB].<br>When the input level is -60 to -6 [dB], the gain is increased so that the level becomes -6   [dB], where the gain is increased by at most 30 [dB].<br><br>Example 2:<br>For the following settings:  <i>alc</i> = 0, <i>gain</i> = +12, and <i>noiz</i> = 0,<br>the level will be +12 [dB] regardless of the input signal level because ALC = OFF.<br>Since ALC = OFF, the noise gate function does not operate.<br>The <i>noiz</i> value is ignored.<br><br>Differences with <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInitEx">sceUsbMicInputInitEx</a>()<br>With <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInitEx">sceUsbMicInputInitEx</a>(), three more arguments can be set.<br>Otherwise, the same processing is performed.<br>The three arguments that cannot be set by using this function, are set to the following recommended values.<br><i>hold</i> = 0 &rarr; 0[ms]<br><i>decay</i> = 3 &rarr; 192[ms]<br><i>attack</i> = 2 &rarr; 24[ms]<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInitEx">sceUsbMicInputInitEx</a>()<br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbMicInputInitEx"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbMicInputInitEx<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Initialize mic input and set codec parameters<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbmic.h&gt;
int <b>sceUsbMicInputInitEx</b>(
	<a href="../peripheral/USB_Mic-Reference-English.htm#SceUsbMicParam">SceUsbMicParam</a> <i>*param</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>param</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to <a href="../peripheral/USB_Mic-Reference-English.htm#SceUsbMicParam">SceUsbMicParam</a> structure for representing codec settings&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, one of the following error codes or an error code that is defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_PRIV_REQUIRED">SCE_USBMIC_ERROR_PRIV_REQUIRED</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function initializes mic input and sets codec parameters in a similar manner as the <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInit">sceUsbMicInputInit</a>() function.<br>If this function is called while mic input is being executed, it stops the mic input and sets the parameters.<br><br>Differences with <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInit">sceUsbMicInputInit</a>()<br>In addition to <i>alc</i>, <i>gain</i>, and <i>noiz</i>, this function can set values for the <i>hold</i>, <i>decay</i>, and <i>attack</i> parameters. Otherwise, the same processing is performed.<br>For details about the parameters, see the description of the <a href="../peripheral/USB_Mic-Reference-English.htm#SceUsbMicParam">SceUsbMicParam</a> structure.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInit">sceUsbMicInputInit</a>()<br><a href="../peripheral/USB_Mic-Reference-English.htm#SceUsbMicParam">SceUsbMicParam</a><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_PRIV_REQUIRED">SCE_USBMIC_ERROR_PRIV_REQUIRED</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbMicInputBlocking"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbMicInputBlocking<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Mic input (blocking)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbmic.h&gt;
int <b>sceUsbMicInputBlocking</b>(
	int <i>len,</i>
	int <i>frequency,</i>
	void <i>*datapointer</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>len</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of input samples (multiple of 64)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>frequency</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sampling frequency of acquired data (one of 44100, 22050, or 11025)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>datapointer</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to storage destination of acquired data&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, the number of acquired samples is returned.<br>If an error occurs, one of the following error codes or an error code that is defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a>,<br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INVALID_SIZE">SCE_USBMIC_ERROR_INVALID_SIZE</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_PRIV_REQUIRED">SCE_USBMIC_ERROR_PRIV_REQUIRED</a>,<br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INPUT_BUSY">SCE_USBMIC_ERROR_INPUT_BUSY</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INVALID_FREQUENCY">SCE_USBMIC_ERROR_INVALID_FREQUENCY</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs mic input. The thread will be in WAIT state until input has completed or an error occurs.<br>Before this function is executed, a function such as <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInit">sceUsbMicInputInit</a>() must be used to initialize mic input. If mic input has not been initialized, an SCE_ERROR_NOT_INITIALIZED error is returned.<br>Mic input can be explicitly ended by setting <i>datapointer</i> to NULL.<br><br>If a USB mic is not connected or if suspend processing was performed during mic input, an <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a> error is returned. Be sure to take an action such as prompting the user to connect a USB mic and requesting input again.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define SAMPLES  4096

short InputBuf[SAMPLES];  /* Input buffer */
int ret;

/* Initialize ALC_Target=-12[dB] MaxGain=+30[dB] NoiseGateThreshold=-60[dB] */
if ((ret = <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInit">sceUsbMicInputInit</a>(-12, 30, -60)) &lt; 0) {
	// Error handling
}

/* Perform mic input */
if ((ret = sceUsbMicInputBlocking(SAMPLES, 44100, InputBuf)) &lt; 0) {
	// Error handling
}

/* End mic input */
if ((ret = sceUsbMicInputBlocking(SAMPLES, 44100, NULL)) &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInit">sceUsbMicInputInit</a>()<br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INVALID_SIZE">SCE_USBMIC_ERROR_INVALID_SIZE</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_PRIV_REQUIRED">SCE_USBMIC_ERROR_PRIV_REQUIRED</a><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INPUT_BUSY">SCE_USBMIC_ERROR_INPUT_BUSY</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INVALID_FREQUENCY">SCE_USBMIC_ERROR_INVALID_FREQUENCY</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbMicInput"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbMicInput<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Mic input (non-blocking)<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbmic.h&gt;
int <b>sceUsbMicInput</b>(
	int <i>len,</i>
	int <i>frequency,</i>
	void <i>*datapointer</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>len</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of input samples (multiple of 64)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>frequency</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Sampling frequency of acquired data (one of 44100, 22050, or 11025)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>datapointer</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to storage destination of acquired data&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, one of the following error codes or an error code that is defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a>,<br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INVALID_SIZE">SCE_USBMIC_ERROR_INVALID_SIZE</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_PRIV_REQUIRED">SCE_USBMIC_ERROR_PRIV_REQUIRED</a>,<br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INPUT_BUSY">SCE_USBMIC_ERROR_INPUT_BUSY</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INVALID_FREQUENCY">SCE_USBMIC_ERROR_INVALID_FREQUENCY</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs mic input. This function returns when mic input begins; no WAIT state occurs. The completion of mic input can be verified by using <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicWaitInputEnd">sceUsbMicWaitInputEnd</a>() or <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicPollInputEnd">sceUsbMicPollInputEnd</a>().<br>Before this function is executed, a function such as <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInit">sceUsbMicInputInit</a>() must be used to initialize mic input. If mic input has not been initialized, an SCE_ERROR_NOT_INITIALIZED error is returned.<br>Mic input can be explicitly ended by setting <i>datapointer</i> to NULL. Even in this case, the end of processing should be verified by using <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicWaitInputEnd">sceUsbMicWaitInputEnd</a>() <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicPollInputEnd">sceUsbMicPollInputEnd</a>().<br><br>If a USB mic is not connected or if suspend processing is being executed, an <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a> error is returned. Be sure to take an action such as prompting the user to connect a USB mic and requesting input again.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define SAMPLES  4096

short InputBuf[SAMPLES];  /* Input buffer */
int ret;

/* Initialize ALC_Target=-12[dB] MaxGain=+30[dB] NoiseGateThreshold=-60[dB] */
if ((ret = <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInit">sceUsbMicInputInit</a>(-12, 30, -60)) &lt; 0) {
	// Error handling
}

/* Perform mic input */
if ((ret = sceUsbMicInput(SAMPLES, 44100, InputBuf)) &lt; 0) {
	// Error handling
}

/* Wait for completion of mic input */
if ((ret = <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicWaitInputEnd">sceUsbMicWaitInputEnd</a>()) &lt; 0) {
	// Error handling
}

/* End mic input */
if ((ret = sceUsbMicInput(SAMPLES, 44100, NULL)) &lt; 0) {
	// Error handling
}

/* Wait for end of mic input */
if ((ret = <a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicWaitInputEnd">sceUsbMicWaitInputEnd</a>()) &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicInputInit">sceUsbMicInputInit</a>()<br><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicWaitInputEnd">sceUsbMicWaitInputEnd</a>()<br><a href="../peripheral/USB_Mic-Reference-English.htm#sceUsbMicPollInputEnd">sceUsbMicPollInputEnd</a>()<br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INVALID_SIZE">SCE_USBMIC_ERROR_INVALID_SIZE</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_PRIV_REQUIRED">SCE_USBMIC_ERROR_PRIV_REQUIRED</a><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INPUT_BUSY">SCE_USBMIC_ERROR_INPUT_BUSY</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_INVALID_FREQUENCY">SCE_USBMIC_ERROR_INVALID_FREQUENCY</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbMicGetInputLength"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbMicGetInputLength<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of samples that were obtained<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbmic.h&gt;
int <b>sceUsbMicGetInputLength</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, the number of samples that were acquired is returned.<br>If an error occurs, one of the following error codes or an error code that is defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_INITIALIZED">SCE_USBMIC_ERROR_NOT_INITIALIZED</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the number of mic input samples that were acquired.<br>After mic input has been initialized, if mic input has not yet been started, an <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_INITIALIZED">SCE_USBMIC_ERROR_NOT_INITIALIZED</a> error will occur.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_INITIALIZED">SCE_USBMIC_ERROR_NOT_INITIALIZED</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbMicWaitInputEnd"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbMicWaitInputEnd<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Wait for completion of mic input<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbmic.h&gt;
int <b>sceUsbMicWaitInputEnd</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, one of the following error codes or an error code that is defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_INITIALIZED">SCE_USBMIC_ERROR_NOT_INITIALIZED</a>,<br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function waits for the completion of mic input. A WAIT state occurs until the completion of mic input or until an error occurs.<br>After mic input has been initialized, if mic input has not yet been started, an <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_INITIALIZED">SCE_USBMIC_ERROR_NOT_INITIALIZED</a> error will occur.<br><br>If a USB mic is not connected or if suspend processing was performed during mic input, an <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a> error is returned. Be sure to take an action such as prompting the user to connect a USB mic and requesting input again.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_INITIALIZED">SCE_USBMIC_ERROR_NOT_INITIALIZED</a>,<br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbMicPollInputEnd"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbMicPollInputEnd<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get mic input completion status<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbmic.h&gt;

int <b>sceUsbMicPollInputEnd</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If mic input has completed, 0 is returned; if it has not completed, 1 is returned.<br>After mic input has been initialized, if mic input has not yet been started, 0 is returned.<br>If an error occurs, one of the following error codes or an error code that is defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets a value indicating whether or not mic input has completed.<br><br>If a USB mic is not connected or if suspend processing was performed during mic input, an <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a> error is returned. Be sure to take an action such as prompting the user to connect a USB mic and requesting input again.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>, <a href="../peripheral/USB_Mic-Reference-English.htm#SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="List of Error Codes"></a>
<table width="100%"><td width="70%"><font size=6>List of Error Codes<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Error Codes]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Error codes returned by the USB mic library<br></div><br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Meaning</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBACC_ERROR_NOT_ACCESSORY">SCE_USBACC_ERROR_NOT_ACCESSORY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243701&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Connected to a USB host other than a USB accessory&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBMIC_ERROR_NOT_INITIALIZED">SCE_USBMIC_ERROR_NOT_INITIALIZED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243801&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Mic input has not been started&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBMIC_ERROR_PRIV_REQUIRED">SCE_USBMIC_ERROR_PRIV_REQUIRED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243804&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Privilege is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBMIC_ERROR_INVALID_SIZE">SCE_USBMIC_ERROR_INVALID_SIZE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243806&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Data length is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBMIC_ERROR_INVALID_FREQUENCY">SCE_USBMIC_ERROR_INVALID_FREQUENCY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8024380A&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Frequency is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBMIC_ERROR_INPUT_BUSY">SCE_USBMIC_ERROR_INPUT_BUSY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243810&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Data input is being performed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBMIC_ERROR_NOT_AVAILABLE">SCE_USBMIC_ERROR_NOT_AVAILABLE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243820&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Currently not available&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBMIC_ERROR_NOT_STARTED">SCE_USBMIC_ERROR_NOT_STARTED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243821&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Driver has not been started&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<p><p><hr>
<div ALIGN="right">
    &copy;2007 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
