<html lang="jp">
<head>
<title>Power-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=Shift_JIS>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&reg; Programmer Tool Runtime Library Release 6.6.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
パワーサービス
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_KERNEL_POWER_TICK_xxx"></a>
<table width="100%"><td width="70%"><font size=6>SCE_KERNEL_POWER_TICK_xxx<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>アイドルタイマキャンセル方法の種類<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>マクロ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>説明</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_POWER_TICK_DEFAULT">SCE_KERNEL_POWER_TICK_DEFAULT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;全てのタイマをキャンセルする。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_POWER_TICK_SUSPENDONLY">SCE_KERNEL_POWER_TICK_SUSPENDONLY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;自動サスペンド関連のタイマを&nbsp;&nbsp;<br>&nbsp;&nbsp;キャンセルする。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_POWER_TICK_LCDONLY">SCE_KERNEL_POWER_TICK_LCDONLY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;LCD関連のタイマをキャンセルする。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">パワーセーブモード始動までの時間を計測するタイマのキャンセル方法の種類を表す定数です。<br><a href="../peripheral/Power-Reference-Japanese.htm#SCE_KERNEL_POWER_TICK_SUSPENDONLY">SCE_KERNEL_POWER_TICK_SUSPENDONLY</a>は、自動スリープのためのタイマのみをキャンセルするための指定ですが、現在の実装ではPSP&reg;システムソフトウェアの省電力設定にかかわらずゲーム動作中には自動スリープ機能が働かないようになっているため、あえて<a href="../peripheral/Power-Reference-Japanese.htm#SCE_KERNEL_POWER_TICK_SUSPENDONLY">SCE_KERNEL_POWER_TICK_SUSPENDONLY</a>を使用する必要はありません。<br>そのため、通常は<a href="../peripheral/Power-Reference-Japanese.htm#SCE_KERNEL_POWER_TICK_DEFAULT">SCE_KERNEL_POWER_TICK_DEFAULT</a>、または<a href="../peripheral/Power-Reference-Japanese.htm#SCE_KERNEL_POWER_TICK_LCDONLY">SCE_KERNEL_POWER_TICK_LCDONLY</a>を使用してください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#sceKernelPowerTick">sceKernelPowerTick</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerIsPowerOnline"></a>
<table width="100%"><td width="70%"><font size=6>scePowerIsPowerOnline<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>外部電源の接続状態を取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerIsPowerOnline</b> (
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;外部電源(ACアダプタ)からの電源供給あり&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;外部電源(ACアダプタ) からの電源供給なし&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">外部電源(ACアダプタ)からの電源供給の有無を調べる関数です。<br><br>この状態は、コールバック関数により取得することもできます。詳しくは、<a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>()をご覧ください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerIsBatteryCharging">scePowerIsBatteryCharging</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerIsLowBattery"></a>
<table width="100%"><td width="70%"><font size=6>scePowerIsLowBattery<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ローバッテリ状態を取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerIsLowBattery</b> (
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br></div>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ローバッテリ状態である&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ローバッテリ状態ではない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ローバッテリ状態か、ローバッテリ状態以外かを取得する関数です。<br></div>
<br>
<div style="margin-left:50px;">ローバッテリ状態とは、バッテリ残量が少ないことを示します。<br></div>
<br>
<div style="margin-left:50px;">この状態は、コールバック関数により取得することもできます。詳しくは、<a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>()をご覧ください。<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerIsBatteryExist"></a>
<table width="100%"><td width="70%"><font size=6>scePowerIsBatteryExist<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>バッテリの装着状態を取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerIsBatteryExist</b> (
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリが装着されている&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリが装着されていない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">物理的にバッテリが装着されているか、装着されていないかを取得する関数です。<br><br>バッテリと正しく通信さえできれば、装着されていると判断されます。<br>バッテリの装着直後、パワーサービスがポーリングによって、バッテリ装着を認識するまでの間は、正しい値を返さないことがあります。<br><br>この状態は、コールバック関数により取得することもできます。詳しくは、<a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>()をご覧ください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerIsBatteryCharging">scePowerIsBatteryCharging</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerIsBatteryCharging"></a>
<table width="100%"><td width="70%"><font size=6>scePowerIsBatteryCharging<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>バッテリの充電中状態を取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerIsBatteryCharging</b> (
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;充電中状態である&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;充電中状態ではない&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_POWER_ERROR_NO_BATTERY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリ未装着&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_POWER_ERROR_DETECTING&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリ情報取得中&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">バッテリの充電を行っている状態か、行っていない状態かを取得する関数です。<br><br>バッテリの装着直後、パワーサービスがポーリングによってバッテリ装着を認識するまでの間は正しい値を返さないことがあります。<br>WLANの使用中には、バッテリ充電が抑制されている（充電中ではない）ことがあります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerIsBatteryExist">scePowerIsBatteryExist</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerIsPowerOnline">scePowerIsPowerOnline</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerGetBatteryLifePercent"></a>
<table width="100%"><td width="70%"><font size=6>scePowerGetBatteryLifePercent<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>満充電状態に対するバッテリ残容量の割合を100分率で取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerGetBatteryLifePercent</b> (
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;100〜0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリの残容量率&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_POWER_ERROR_NO_BATTERY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリ未装着&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_POWER_ERROR_DETECTING&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリ情報取得中&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">バッテリ残量を満充電容量に対する割合で取得できる関数です。<br><br>バッテリまたはACの接続状態が変わった直後は、SCE_POWER_ERROR_DETECTINGエラーが発生します。<br><br>この状態は、コールバック関数により取得することもできます。詳しくは、<a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>()をご覧ください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetBatteryLifeTime">scePowerGetBatteryLifeTime</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerGetBatteryLifeTime"></a>
<table width="100%"><td width="70%"><font size=6>scePowerGetBatteryLifeTime<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>バッテリ予測持続残り時間を取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerGetBatteryLifeTime</b> (
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&gt;=0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリ予測持続残り時間[min]&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_POWER_ERROR_NO_BATTERY&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリ未装着&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_POWER_ERROR_DETECTING&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリ情報取得中&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">バッテリ残量の予測持続時間を分単位で取得する関数です。<br><br>外部電源(ACアダプタ)から電源供給が行われている場合は、持続時間の予測を行う事ができないため、scePowerGetBatteryLifeTime()関数は0を返します。<br>バッテリまたはACの接続状態が変わった直後は、SCE_POWER_ERROR_DETECTINGエラーが発生します。またその後しばらくの間は予測値が安定してないことがあるのにご注意ください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetBatteryLifePercent">scePowerGetBatteryLifePercent</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerRequestSuspend"></a>
<table width="100%"><td width="70%"><font size=6>scePowerRequestSuspend<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>サスペンド要求を発生<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerRequestSuspend</b> (
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（ディスパッチ許可, 割り込み許可状態で呼ぶこと）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">本体をサスペンド状態にすることを要求します。本体のPOWER/HOLDスイッチを使用してサスペンド操作を行った場合と同様の動作をします。<br>scePowerRequestSuspend()関数はサスペンド状態にすることを要求するだけであり、実際のサスペンド操作は遅延して実行されることがあるので、scePowerRequestSuspend()関数は連続して呼び出さないで下さい。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_1">
<div style="margin-left:40px;"><h4><b>厳重注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">scePowerRequestSuspend()関数を使用すると、ユーザーにとって意外なタイミングでの電源OFFを発生させることができてしまいます。このため、現状ではscePowerRequestSuspend()関数の使用は、<a href="../peripheral/RTC-Reference-Japanese.htm#sceRtcSetAlarmTick">sceRtcSetAlarmTick</a>()でRTCアラームによるタイマ起床を設定した場合のみに限るようにしてください。それ以外の目的でのscePowerRequestSuspend()関数の使用は禁止です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/RTC-Reference-Japanese.htm#sceRtcSetAlarmTick">sceRtcSetAlarmTick</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelPowerLock"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelPowerLock<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>電源OFF処理ロック<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelPowerLock</b> (
	int <i>locktype</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（ディスパッチ許可, 割り込み許可状態で呼ぶこと）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>locktype</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;電源処理ロックタイプ&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_KERNEL_POWER_LOCK_DEFAULTを指定してください&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">SCE_KERNEL_ERROR_OK<br>SCE_KERNEL_ERROR_ILLEGAL_CONTEXT<br>SCE_KERNEL_ERROR_CAN_NOT_WAIT<br>SCE_ERROR_INVALID_MODE<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">電源OFFの要求をロックが解除されるまで遅延させる関数です。<br><br>電源遮断されると困るタイミングを、クリティカルセクションとして保護する目的で使用します。たとえば、Memory Stick&trade;への書き込み中で、電源が遮断することを防ぐ目的で使用します。<br><br>通常は、sceKernelPowerLock()関数はすぐに処理を戻しますが、サスペンド/スタンバイ処理が始まって以降にsceKernelPowerLock()関数が呼び出されると、スレッドをブロックすることがあります。<br>サスペンド/スタンバイ処理は、パワーサービス内のスレッドの処理として行われます。したがって、割り込み禁止状態、ディスパッチ禁止状態で完結する処理であれば、sceKernelPowerLock()〜<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelPowerUnlock">sceKernelPowerUnlock</a>()で囲う必要はありません。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_2">
<div style="margin-left:40px;"><h4><b>厳重注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">電源ロック中はユーザーがPOWER/HOLDスイッチの操作で電源を切る事ができなくなるため、安易にsceKernelPowerLock()を使用すると著しくユーザビリティを下げる結果になります。<br><br>たとえばユーザーからのインタラクションを待つような状況で電源ロックを使用し、その状態で放置された場合、バッテリ切れ直前に自動的にサスペンド状態に遷移させる強制サスペンドの機能が有効に動作しません。<br>また、電源ロック状態の間に行われたPOWER/HOLDスイッチの操作は、<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelPowerUnlock">sceKernelPowerUnlock</a>()によってロック状態を解除されるタイミングまで遅延して動作するため、ロックしている期間が長時間に及ぶと、ユーザーにとって意外なタイミングでの電源OFFが発生することになります。<br><br>電源ロックを使用する場合は細心の注意が必要です。くれぐれも安易な使用は避けてください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#sceKernelPowerUnlock">sceKernelPowerUnlock</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelPowerUnlock"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelPowerUnlock<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>電源OFFロック解除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelPowerUnlock</b> (
	int <i>locktype</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（ディスパッチ許可, 割り込み許可状態で呼ぶこと）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>locktype</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;電源処理ロックタイプ&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_KERNEL_POWER_LOCK_DEFAULTを指定してください&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&gt;=0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#sceKernelPowerLock">sceKernelPowerLock</a>()でロックした電源ロック状態を解除する関数です。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_3">
<div style="margin-left:40px;"><h4><b>厳重注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">sceKernelPowerUnlock()関数の呼び出しは、<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelPowerLock">sceKernelPowerLock</a>()関数によって電源ロック状態にしていた場合に限られます。<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelPowerLock">sceKernelPowerLock</a>()関数と対にならないsceKernelPowerUnlock()関数の呼び出しが行われると、電源ロックのネストが破綻してしまい、どのような結果になるかわかりません。ご注意ください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#sceKernelPowerLock">sceKernelPowerLock</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelVolatileMemLock"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelVolatileMemLock<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>揮発性メモリ使用権のブロッキング取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelVolatileMemLock</b> (
	int <i>arg</i>,
	void **<i>ppAddr,</i>
	unsigned int *<i>puiSize</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（ディスパッチ許可, 割り込み許可状態で呼ぶこと）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arg</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_VOLATILE_MEM_DEFAULTを指定してください&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>ppAddr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;揮発性メモリエリアの開始アドレスを受け取るvoid *型変数へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>puiSize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;揮発性メモリエリアのサイズを受け取るunsigned int型変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">サスペンド/レジューム時にPSP&reg;システムチップ内蔵eDRAMを保存するために使用されるメモリの使用権をアプリケーション側で取得する関数です。<br><br>このメモリエリアは、ユーティリティライブラリで使用します。しかし、この関数を使用することで、ユーティリティ非動作中に、アプリケーションから使用できるように排他処理を行えます。<br>sceKernelVolatileMemLock()関数の処理は、ブロッキングで行われます。ブロッキングしたくない場合は、<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemTryLock">sceKernelVolatileMemTryLock</a>()関数を使用してください。<br>sceKernelVolatileMemLock()関数で取得した使用権は、<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>()関数で返還します。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_4_4">
<div style="margin-left:40px;"><h4><b>厳重注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">sceKernelVolatileMemLock()関数で揮発性メモリの使用権を取得している間はスタンバイ処理を行う事ができなくなります。<a href="../peripheral/Power-Reference-Japanese.htm#scePowerRegisterCallback">scePowerRegisterCallback</a>()関数で登録されるコールバックで<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_SUSPENDING">SCE_POWER_CALLBACKARG_SUSPENDING</a>または<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_STANDINGBY">SCE_POWER_CALLBACKARG_STANDINGBY</a>を検出した場合は、速やかに<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>()関数でロック解除しなくてはなりません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemTryLock">sceKernelVolatileMemTryLock</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelVolatileMemTryLock"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelVolatileMemTryLock<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>揮発性メモリ使用権の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelVolatileMemTryLock</b> (
	int <i>arg</i>,
	void **<i>ppAddr,</i>
	unsigned int *<i>puiSize</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arg</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_KERNEL_VOLATILE_MEM_DEFAULTを指定してください&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>ppAddr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;揮発性メモリエリアの開始アドレスを受け取るvoid *型変数へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>puiSize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;揮発性メモリエリアのサイズを受け取るunsigned int型変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_POWER_ERROR_CANNOT_LOCK_VMEM&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;使用中&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">サスペンド/レジューム時にPSP&reg;システムチップ内蔵eDRAMを保存するために使用されるメモリの使用権の取得を行う関数です。<br><br>このメモリエリアは、ユーティリティライブラリで使用します。しかし、この関数を使用することで、ユーティリティ非動作中に、アプリケーションから使用できるように排他処理を行えます。<br>sceKernelVolatileMemTryLock()関数では、ブロッキングしません。ブロッキング処理したい場合は、<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemLock">sceKernelVolatileMemLock</a>()関数を使用してください。<br>sceKernelVolatileMemTryLock()関数で取得した使用権は、<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>()関数で返還します。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_4_5">
<div style="margin-left:40px;"><h4><b>厳重注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">sceKernelVolatileMemTryLock()関数で揮発性メモリの使用権を取得している間はスタンバイ処理を行う事ができなくなります。<a href="../peripheral/Power-Reference-Japanese.htm#scePowerRegisterCallback">scePowerRegisterCallback</a>()関数で登録されるコールバックで<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_SUSPENDING">SCE_POWER_CALLBACKARG_SUSPENDING</a>または<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_STANDINGBY">SCE_POWER_CALLBACKARG_STANDINGBY</a>を検出した場合は、速やかに<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>()関数でロック解除しなくてはなりません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelVolatileMemUnlock"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelVolatileMemUnlock<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>揮発性メモリ使用権の返還<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelVolatileMemUnlock</b> (
	int <i>arg</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arg</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0を指定してください&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br></div>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemLock">sceKernelVolatileMemLock</a>()関数または<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemTryLock">sceKernelVolatileMemTryLock</a>()関数によって取得された、メモリの使用権をユーティリティに返還する関数です。<br></div>
<br>
<div style="margin-left:50px;">このメモリエリアは、サスペンド/レジューム時にPSP&reg;システムチップ内蔵eDRAMを保存するために使用される領域です。この領域がアプリケーションで使用されている場合は、サスペンド/レジューム前に、sceKernelVolatileMemUnlock()関数でユーティリティが使えるように解放しなければなりません。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_4_6">
<div style="margin-left:40px;"><h4><b>厳重注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">sceKernelVolatileMemUnlock()関数の呼び出しは、<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemLock">sceKernelVolatileMemLock</a>()関数または<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemTryLock">sceKernelVolatileMemTryLock</a>()関数によって排他的な使用権を得ている場合に限られます。使用権を取得していない状態でsceKernelVolatileMemUnlock()関数を呼び出すと、排他制御が破綻してどのような結果になるかわかりません。ご注意ください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemLock">sceKernelVolatileMemLock</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemTryLock">sceKernelVolatileMemTryLock</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceKernelPowerTick"></a>
<table width="100%"><td width="70%"><font size=6>sceKernelPowerTick<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>アイドルタイマキャンセル<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;kernel.h&gt;
int <b>sceKernelPowerTick</b> (
	int <i>ticktype</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（ディスパッチ許可,割り込み許可状態で呼ぶこと）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>ticktype</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;パワーセーブモード始動までの時間を計測するタイマの&nbsp;&nbsp;<br>&nbsp;&nbsp;キャンセル方法を指定します。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">引数<i>ticktype</i>に指定する値は、以下の表の通りです。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>マクロ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>説明</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-Japanese.htm#SCE_KERNEL_POWER_TICK_DEFAULT">SCE_KERNEL_POWER_TICK_DEFAULT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;全てのタイマをキャンセルする。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-Japanese.htm#SCE_KERNEL_POWER_TICK_SUSPENDONLY">SCE_KERNEL_POWER_TICK_SUSPENDONLY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;自動サスペンド関連のタイマを&nbsp;&nbsp;<br>&nbsp;&nbsp;キャンセルする。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-Japanese.htm#SCE_KERNEL_POWER_TICK_LCDONLY">SCE_KERNEL_POWER_TICK_LCDONLY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;LCD関連のタイマをキャンセルする。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">常に0が返ります。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">アイドルタイマの満了によって省電力状態に入れないよう、アイドルタイマのカウント値をキャンセルする関数です。<br><br>アイドル状態のとき、システムは自動的にLCDバックライト状態を消灯するなど省電力処理を行います。sceKernelPowerTick()では、そのアイドル状態のカウント値をキャンセルすることで、指定した省電力処理を行わないようにすることができます。<br><br><a href="../peripheral/Power-Reference-Japanese.htm#SCE_KERNEL_POWER_TICK_SUSPENDONLY">SCE_KERNEL_POWER_TICK_SUSPENDONLY</a>は、自動スリープのためのタイマのみをキャンセルするための指定ですが、現在の実装ではPSP&reg;システムソフトウェアの省電力設定にかかわらずゲーム動作中には自動スリープ機能が働かないようになっているため、あえて<a href="../peripheral/Power-Reference-Japanese.htm#SCE_KERNEL_POWER_TICK_SUSPENDONLY">SCE_KERNEL_POWER_TICK_SUSPENDONLY</a>を使用する必要はありません。<br>そのため、通常は<a href="../peripheral/Power-Reference-Japanese.htm#SCE_KERNEL_POWER_TICK_DEFAULT">SCE_KERNEL_POWER_TICK_DEFAULT</a>、または<a href="../peripheral/Power-Reference-Japanese.htm#SCE_KERNEL_POWER_TICK_LCDONLY">SCE_KERNEL_POWER_TICK_LCDONLY</a>を使用してください。<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_POWER_CALLBACKARG_STANDINGBY"></a>
<table width="100%"><td width="70%"><font size=6>SCE_POWER_CALLBACKARG_STANDINGBY<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>スタンバイ状態<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
#define SCE_POWER_CALLBACKARG_STANDINGBY	0x00080000

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">POWERスイッチ操作により、スタンバイ状態中であることを表すビットを示す定数です。<br><br>POWERスイッチの長押し(2秒以上)により、スタンバイ処理が始まります。スタンバイ状態が始まった後に発生したコールバックは、このビットが設定されています。<br>電源OFFからの次回電源ONは、コールドブートになり、PSP&reg;システムソフトウェアが起動します。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_6_7">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">揮発性メモリを使用していた状態でSCE_POWER_CALLBACKARG_STANDINGBYが検出された場合、速やかに<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>()により揮発性メモリ使用権の変換を行うようにする必要があります。<br><br>スタンバイ状態になり、SCE_POWER_CALLBACKARG_STANDINGBYが通知されたタイミングでは、デバイスドライバは電源を遮断するための処理が始まっています。この通知よりも後にUMD&reg;やMemory Stick&trade;へのI/Oアクセスを行うと失敗します。また、この通知の後数秒後に自動的に電源が遮断されますので、電源OFF直前にMemory Stick&trade;への書き込みを行う目的にこの通知を使用してはいけません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_POWER_CALLBACKARG_RESUME_COMP"></a>
<table width="100%"><td width="70%"><font size=6>SCE_POWER_CALLBACKARG_RESUME_COMP<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>レジューム完了状態<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
#define SCE_POWER_CALLBACKARG_RESUME_COMP	0x00040000

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">レジューム処理が完了したことを表すビットを示す定数です。<br><br>この通知は、サスペンドからレジュームが発生したとき、レジュームが完了したタイミングで1回だけ通知されます。<br>レジューム時、SCE_POWER_CALLBACKARG_RESUME_COMPが通知されるよりも前に、スレッドの動作は開始していることがあることにご注意ください。SCE_POWER_CALLBACKARG_RESUME_COMPが通知されるのは、各種デバイスのレジューム処理が完了し、定常状態に戻った後になります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_POWER_CALLBACKARG_RESUMING"></a>
<table width="100%"><td width="70%"><font size=6>SCE_POWER_CALLBACKARG_RESUMING<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>レジューム処理中状態<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
#define SCE_POWER_CALLBACKARG_RESUMING		0x00020000

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">レジューム処理が始まったことを表すビットを示す定数です。<br><br>サスペンド状態からPOWERスイッチ操作により、レジューム動作が始まったことを示します。レジューム動作が始まった後に発生したコールバックは、このビットが設定されています。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_6_8">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">レジューム動作が始まりSCE_POWER_CALLBACKARG_RESUMINGが通知されたタイミングでは、デバイスドライバは電源を再投入するための処理が始まっています。この通知のあと、<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_RESUME_COMP">SCE_POWER_CALLBACKARG_RESUME_COMP</a>よりも前のタイミングでは、UMD&reg;やMemory Stick&trade;へのI/Oアクセスを行うと処理がブロックする可能性があります。<br><br>レジューム処理の開始から、レジューム処理が完全に完了してコールバックに<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_RESUME_COMP">SCE_POWER_CALLBACKARG_RESUME_COMP</a>が通知されるまでは数秒の時間がかかります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_POWER_CALLBACKARG_SUSPENDING"></a>
<table width="100%"><td width="70%"><font size=6>SCE_POWER_CALLBACKARG_SUSPENDING<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>サスペンド処理中状態<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
#define SCE_POWER_CALLBACKARG_SUSPENDING	0x00010000

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">サスペンド処理が開始されている状態を表すビットを示した定数です。<br><br>POWERスイッチの短押し(2秒未満)や、パワーセーブによる自動スリープ、バッテリ切れによる強制スリープ等が発生し、サスペンド動作が始まったことを示します。サスペンド動作が始まった後に発生したコールバックは、このビットが設定されます。<br>サスペンド状態からの次回電源ONは、レジューム起動になります。PSP&reg;システムソフトウェアが起動することなく、サスペンド発生時の状態に復元されます。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_6_9">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">揮発性メモリを使用していた状態でSCE_POWER_CALLBACKARG_SUSPENDINGが検出された場合、速やかに<a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>()により揮発性メモリ使用権の変換を行うようにする必要があります。<br><br>サスペンド動作が始まりSCE_POWER_CALLBACKARG_SUSPENDINGが通知されたタイミングでは、デバイスドライバは電源を遮断するための処理が始まっています。この通知よりも後にUMD&reg;やMemory Stick&trade;へのI/Oアクセスを行うと失敗します。また、この通知の後数秒後に自動的に電源が遮断されますので、電源遮断直前にMemory Stick&trade;への書き込みを行う目的にこの通知を使用してはいけません。<br><br>SCE_POWER_CALLBACKARG_SUSPENDING通知は、サスペンド動作中,レジューム動作中にゲームが進行してしまわないように自動的にポーズ状態にしたり、ムービー等のストリーミングを停止状態にするためにのみ使用してください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#sceKernelVolatileMemUnlock">sceKernelVolatileMemUnlock</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_POWER_CALLBACKARG_POWERONLINE"></a>
<table width="100%"><td width="70%"><font size=6>SCE_POWER_CALLBACKARG_POWERONLINE<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>外部電源供給状態<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
#define SCE_POWER_CALLBACKARG_POWERONLINE	0x00001000

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">外部電源(ACアダプタ)からの電源供給がされていることを表すビットを示す定数です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerIsPowerOnline">scePowerIsPowerOnline</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_POWER_CALLBACKARG_LOWBATTERY"></a>
<table width="100%"><td width="70%"><font size=6>SCE_POWER_CALLBACKARG_LOWBATTERY<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ローバッテリ状態<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
#define SCE_POWER_CALLBACKARG_LOWBATTERY	0x00000100

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ローバッテリ状態であることを表すビットを示す定数です。<br><br>外部電源の接続、未接続には、無関係であることにご注意ください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerIsLowBattery">scePowerIsLowBattery</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_POWER_CALLBACKARG_BATTERYEXIST"></a>
<table width="100%"><td width="70%"><font size=6>SCE_POWER_CALLBACKARG_BATTERYEXIST<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>バッテリ装着状態<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
#define SCE_POWER_CALLBACKARG_BATTERYEXIST	0x00000080

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">バッテリ装着状態であることを表すビットを示す定数です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerIsBatteryExist">scePowerIsBatteryExist</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_POWER_CALLBACKSLOT_AUTO"></a>
<table width="100%"><td width="70%"><font size=6>SCE_POWER_CALLBACKSLOT_AUTO<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>POWERコールバックのスロット自動検索<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
#define SCE_POWER_CALLBACKSLOT_AUTO	-1

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerRegisterCallback">scePowerRegisterCallback</a>()でコールバックを登録する時、スロット番号を空きスロットから自動的に検索することを指定する定数です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerRegisterCallback">scePowerRegisterCallback</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="powercallback"></a>
<table width="100%"><td width="70%"><font size=6>powercallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>パワーサービスコールバックのプロトタイプ<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>int <b>powercallback</b> (
	int <i>count</i>,
	int <i>arg</i>
	void <i>*common</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>()でコールバックを生成したスレッドのコンテキストで呼び出されます。<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>count</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック呼び出し回数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arg</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック引数&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>common</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバックのクッキー値&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>()関数によって与えられた値が渡されます。&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;">引数<i>arg</i>には、状態を表す以下の値がコールバックにより渡されます。<br>#include &lt;powersvc.h&gt;<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>bit</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>マクロ</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>説明</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;31〜20&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;――&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照しないでください&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;19&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_STANDINGBY">SCE_POWER_CALLBACKARG_STANDINGBY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;スタンバイ処理中状態&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;18&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_RESUME_COMP">SCE_POWER_CALLBACKARG_RESUME_COMP</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;レジューム完了状態&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;17&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_RESUMING">SCE_POWER_CALLBACKARG_RESUMING</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;レジューム処理中状態&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;16&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_SUSPENDING">SCE_POWER_CALLBACKARG_SUSPENDING</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;サスペンド処理中状態&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;15〜13&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;――&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照しないでください&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;12&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_POWERONLINE">SCE_POWER_CALLBACKARG_POWERONLINE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;外部電源供給状態&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;11〜9&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;――&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;参照しないでください&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;8&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_LOWBATTERY">SCE_POWER_CALLBACKARG_LOWBATTERY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ローバッテリ状態&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;7&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKARG_BATTERYEXIST">SCE_POWER_CALLBACKARG_BATTERYEXIST</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリ装着状態&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;6〜0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;――&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バッテリ残量(%)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">常に0を返してください。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">電源状態などに変化が生じたときに通知されるコールバック関数のプロトタイプです。<br><br>パワーサービスから通知コールバックを受け取りたい場合は、<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>()によって生成したコールバックのSceUID値を<a href="../peripheral/Power-Reference-Japanese.htm#scePowerRegisterCallback">scePowerRegisterCallback</a>()関数によって登録してください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerRegisterCallback">scePowerRegisterCallback</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerRegisterCallback"></a>
<table width="100%"><td width="70%"><font size=6>scePowerRegisterCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>パワーサービス通知コールバックの登録<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerRegisterCallback</b> (
	int <i>slot</i>,
	SceUID <i>uidCb</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>slot</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック登録スロット&nbsp;&nbsp;<br>&nbsp;&nbsp;(0〜15または<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKSLOT_AUTO">SCE_POWER_CALLBACKSLOT_AUTO</a>)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uidCb</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバックUID&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;０&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功(引数<i>slot</i>で0〜15のスロット番号を与えた時)。&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0〜15&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功。自動的に割り当てられたスロット番号&nbsp;&nbsp;<br>&nbsp;&nbsp;(引数<i>slot</i>で<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKSLOT_AUTO">SCE_POWER_CALLBACKSLOT_AUTO</a>を与えた時)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">パワーサービスから、POWERスイッチやバッテリの状態に変化が生じたときに通知されるコールバックの登録を行う関数です。<br><br>あらかじめ<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>()でコールバックを生成し、コールバックUIDをscePowerRegisterCallback()関数でパワーサービスに登録することで、以降電源関連の変化があったときにコールバックが発生します。コールバック関数は、それぞれ生成されたスレッドがコールバックつきの待ち状態に入ったとき、それぞれのスレッドのコンテキストで呼び出されます。<br>コールバックは、16個まで登録する事ができ、引数<i>slot</i>で指定された位置に登録されます。ひとつのスロット位置には、ひとつのコールバックUIDのみが登録可能です。<br>引数<i>slot</i>に<a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKSLOT_AUTO">SCE_POWER_CALLBACKSLOT_AUTO</a>を与えた場合、自動的に空きスロットが検索され、返り値で割り当てられたスロット番号が返されます。<a href="../peripheral/Power-Reference-Japanese.htm#scePowerUnregisterCallback">scePowerUnregisterCallback</a>()でコールバックの登録を解除する場合は、このスロット番号を使用してください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#SCE_POWER_CALLBACKSLOT_AUTO">SCE_POWER_CALLBACKSLOT_AUTO</a>,<a href="../peripheral/Power-Reference-Japanese.htm#scePowerUnregisterCallback">scePowerUnregisterCallback</a>(),<br><a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#powercallback">powercallback</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerUnregisterCallback"></a>
<table width="100%"><td width="70%"><font size=6>scePowerUnregisterCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>パワーサービス通知コールバックの登録削除<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerUnregisterCallback</b> (
	int <i>slot</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>slot</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コールバック登録スロット(0〜15)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;０&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerRegisterCallback">scePowerRegisterCallback</a>()で登録したコールバックの登録解除を行う関数です。<br><br>登録解除したコールバックは<a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDeleteCallback">sceKernelDeleteCallback</a>()で削除して下さい。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerRegisterCallback">scePowerRegisterCallback</a>(), <a href="../kernel/Thread_Manager-Reference-Japanese.htm#sceKernelDeleteCallback">sceKernelDeleteCallback</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerCheckWlanCoexistenceClock"></a>
<table width="100%"><td width="70%"><font size=6>scePowerCheckWlanCoexistenceClock<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>WLAN使用可能な最高クロック周波数の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerCheckWlanCoexistenceClock</b> (
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（ディスパッチ許可,割り込み許可状態で呼ぶこと）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_POWER_WLAN_COEXISTENCE_CLOCK_222MHz&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;WLAN動作中のPLLクロックが&nbsp;&nbsp;<br>&nbsp;&nbsp;222MHzまでの機種&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_POWER_WLAN_COEXISTENCE_CLOCK_333MHz&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;WLAN動作中にPLLクロックを&nbsp;&nbsp;<br>&nbsp;&nbsp;266MHz、333MHzに設定可能な機種&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">PSP-1000では、WLANの動作中はPLLクロックに266MHz、333MHzを設定することはできません。PSP-2000以降の機種ではWLANの動作中にもPLLクロックに266MHz、333MHzを設定することができます。機種により異なる動作をすることに注意してください。<br><br>scePowerCheckWlanCoexistenceClock()関数では、どちらの機種で動作しているかを予め調べることができます。この機種判別はWLAN使用可能なPLLクロックの最高周波数の取得以外の目的には使用してはいけません。<br><br>PSP&reg;開発ツールDTP-T1000等では、起動時のブートパラメータbit 11でPSP-1000相当の動作、PSP-2000以降相当の動作のどちらにするかを選ぶことができます。PLLクロック周波数を266MHz、333MHzに設定して使用するプログラムでは、かならず両方の設定で動作確認をおこなってください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerSetClockFrequency">scePowerSetClockFrequency</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerSetClockFrequency"></a>
<table width="100%"><td width="70%"><font size=6>scePowerSetClockFrequency<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>クロック周波数の制御<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerSetClockFrequency</b> (
	int <i>iPllClock</i>,
	int <i>iCpuClock</i>,
	int <i>iBusClock</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（ディスパッチ許可,割り込み許可状態で呼ぶこと）<br>マルチスレッドセーフではない<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iPllClock</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;PLLクロック周波数[MHz]&nbsp;&nbsp;<br>&nbsp;&nbsp;190, 222, 266, 333のいずれかを設定してください&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iCpuClock</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;CPUクロック周波数[MHz](1〜333)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iBusClock</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;バスクロック周波数[MHz](37〜166)&nbsp;&nbsp;<br>&nbsp;&nbsp;(<i>iPllClock</i>のちょうど1/2を指定してください)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">PLLクロック周波数、CPUクロック周波数、バスクロック周波数をそれぞれMHz単位で設定します。<br><br>PSP-1000では、WLANの動作中はPLLクロックに266MHz、333MHzを設定することはできません。PSP-2000以降の機種ではWLANの動作中にもPLLクロックに266MHz、333MHzを設定することができます。機種により異なる動作をすることに注意してください。どちらの機種で動作しているかは<a href="../peripheral/Power-Reference-Japanese.htm#scePowerCheckWlanCoexistenceClock">scePowerCheckWlanCoexistenceClock</a>()関数で予め調べることができます。<br><br>PLLクロックには、190MHz未満の値を設定しないで下さい。<br>バスクロック周波数には、PLLクロック周波数のちょうど1/2に相当する値以外は、設定しないようにしてください。<br><br>つまり現在の運用では、<i>iPllClock, iCpuClock, iBusClock</i>の組み合わせは、以下のいずれかに合致している必要があります。<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<i><b>iPllClock</b></i>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<i><b>iCpuClock</b></i>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<i><b>iBusClock</b></i>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;333&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1〜333&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;166&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;266&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1〜266&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;133&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;222&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1〜222&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;111&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;190&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1〜190&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;95&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">scePowerSetClockFrequency()関数によってクロック周波数を設定しても、必ずしもその周波数にならないことがある点にご注意ください。実際に設定された動作クロック周波数は、<a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetPllClockFrequencyFloat">scePowerGetPllClockFrequencyFloat</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetCpuClockFrequencyFloat">scePowerGetCpuClockFrequencyFloat</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetBusClockFrequencyFloat">scePowerGetBusClockFrequencyFloat</a>()関数等で、取得する事ができます。<br><br>scePowerSetClockFrequency()関数では、PLLクロック,CPUクロック,バスクロックの全てを切り替えます。<a href="../peripheral/Power-Reference-Japanese.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>()では、PLLクロックを保存したままCPUクロックだけを切り替える点に注意してください。<br>PLLクロック周波数が異なる場合には、<a href="../peripheral/Power-Reference-Japanese.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>()で同じ周波数を指定しても、正確に同じ周波数にはなりません。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_8_10">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;">PLLクロック周波数の変更には、時間がかかる場合があります。長時間の割り込み禁止による処理落ちなど許容できない状況では、クロック周波数の変更を行わないようにしてください。とくにPLLクロック周波数の変更においては、CPUだけでなく全てのバスマスタ(GE, VFPU, Memory Stick&trade;, UMD&reg;, WLAN, USB, Media Engine)の動作を一時停止させる処理を伴います。処理落ちサウンドの音途切れなどが許容できない状況では、PLLクロック周波数の変更を行わないようにしてください。<br><br>またscePowerSetClockFrequency()関数の実行にかかる時間は、機種, 個体によって変化する可能性がある点に注意してください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerCheckWlanCoexistenceClock">scePowerCheckWlanCoexistenceClock</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetPllClockFrequencyInt">scePowerGetPllClockFrequencyInt</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetPllClockFrequencyFloat">scePowerGetPllClockFrequencyFloat</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetCpuClockFrequencyInt">scePowerGetCpuClockFrequencyInt</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetCpuClockFrequencyFloat">scePowerGetCpuClockFrequencyFloat</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetBusClockFrequencyInt">scePowerGetBusClockFrequencyInt</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetBusClockFrequencyFloat">scePowerGetBusClockFrequencyFloat</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerGetPllClockFrequencyInt"></a><a name="scePowerGetPllClockFrequencyFloat"></a>
<a name="scePowerGetPllClockFrequencyInt / scePowerGetPllClockFrequencyFloat"></a>
<table width="100%"><td width="70%"><font size=6>scePowerGetPllClockFrequencyInt / scePowerGetPllClockFrequencyFloat<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>PLL出力クロック周波数の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerGetPllClockFrequencyInt</b> (
	void
);
float <b>scePowerGetPllClockFrequencyFloat</b> (
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">現在のPLL出力クロック周波数をMHz単位で返します。<br></div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">PLLクロック周波数をMHz単位で取得する関数です。<br></div>
<br>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerSetClockFrequency">scePowerSetClockFrequency</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerSetCpuClockFrequency"></a>
<table width="100%"><td width="70%"><font size=6>scePowerSetCpuClockFrequency<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>CPUクロック周波数の制御<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerSetCpuClockFrequency</b> (
	int <i>iCpuClock</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（ディスパッチ許可,割り込み許可状態で呼ぶこと）<br>マルチスレッドセーフではない<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iCpuClock</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;CPUクロック周波数[MHz](1〜333)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;成功&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;エラー&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">CPUクロック周波数をMHz単位で設定する関数です。<br><br>ALLEGREX CPUは、通常CPUクロック周波数で動作していますが、CPUのロードストアユニットがバスアクセスを行っている間はバスクロック周波数での動作に切り替わります。<br><br>scePowerSetCpuClockFrequency()関数によってCPUクロック周波数を設定しても、必ずしもその周波数にならないことがある点にご注意ください。実際に設定されたCPU動作クロック周波数は<a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetCpuClockFrequencyInt">scePowerGetCpuClockFrequencyInt</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetCpuClockFrequencyFloat">scePowerGetCpuClockFrequencyFloat</a>()関数で取得する事ができます。<br><br>PSP&reg;カーネルでは、他の全てのスレッドがWAIT状態になった場合に動作するスレッドとして、アイドルスレッドという特別なスレッドがあります。しかし、アイドルスレッドではCPUクロックを停止する特殊な命令が実行されます。消費電力の観点からは、処理すべきタスクがない場合には適切にスレッドをWAIT状態にし、なるべくアイドルスレッドに遷移するようになっていれば、scePowerSetCpuClockFrequency()関数でCPUクロック周波数を操作する必要はありません。<br><br>クロック周波数の変更には時間がかかる場合があります。長時間の割り込み禁止による処理落ちなど許容できない状況ではクロック周波数の変更を行わないようにしてください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetCpuClockFrequencyInt">scePowerGetCpuClockFrequencyInt</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#scePowerGetCpuClockFrequencyFloat">scePowerGetCpuClockFrequencyFloat</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerGetCpuClockFrequencyInt"></a><a name="scePowerGetCpuClockFrequencyFloat"></a>
<a name="scePowerGetCpuClockFrequencyInt / scePowerGetCpuClockFrequencyFloat"></a>
<table width="100%"><td width="70%"><font size=6>scePowerGetCpuClockFrequencyInt / scePowerGetCpuClockFrequencyFloat<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>CPUクロック周波数の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerGetCpuClockFrequencyInt</b> (
	void
);
float<b> scePowerGetCpuClockFrequencyFloat</b> (
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br><br></div>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">現在のCPUクロック周波数をMHz単位で返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">CPUクロック周波数をMHz単位で取得する関数です。<br><br><a href="../peripheral/Power-Reference-Japanese.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>()関数によってCPUクロック周波数を設定しても、必ずしもその周波数にならないことがある点にご注意ください。実際に設定されたCPU動作クロック周波数は、scePowerGetCpuClockFrequencyInt(), scePowerGetCpuClockFrequencyFloat()関数で取得する事ができます。一般的にflot形式の方が正確な値を取得できますが、それほどInt形式に比べて正確性で優位な値が取得できるわけではありません。<br><br>ALLEGREX CPUは、通常CPUクロック周波数で動作していますが、CPUのロードストアユニットがバスアクセスを行っている間はバスクロック周波数での動作に切り替わります。<br><br>PSP&reg;カーネルでは、他の全てのスレッドがWAIT状態になった場合に動作するスレッドとして、アイドルスレッドという特別なスレッドがあります。しかし、アイドルスレッドではCPUクロックを停止する特殊な命令が実行されます。消費電力の観点からは、処理すべきタスクがない場合には適切にスレッドをWAIT状態にし、なるべくアイドルスレッドに遷移するようになっていれば、<a href="../peripheral/Power-Reference-Japanese.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>()関数でCPUクロック周波数を操作する必要はありません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Power-Reference-Japanese.htm#scePowerSetCpuClockFrequency">scePowerSetCpuClockFrequency</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="scePowerGetBusClockFrequencyInt"></a><a name="scePowerGetBusClockFrequencyFloat"></a>
<a name="scePowerGetBusClockFrequencyInt / scePowerGetBusClockFrequencyFloat"></a>
<table width="100%"><td width="70%"><font size=6>scePowerGetBusClockFrequencyInt / scePowerGetBusClockFrequencyFloat<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>バスクロック周波数の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;powersvc.h&gt;
int <b>scePowerGetBusClockFrequencyInt</b> (
	void
);
float <b>scePowerGetBusClockFrequencyFloat</b> (
	void
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">なし<br></div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">現在のバスクロック周波数をMHz単位で返します。<br></div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">バスクロック周波数をMHz単位で取得する関数です。<br><br>バスクロック周波数は、常にPLLクロック周波数の1/2で動作します。従来のバージョンにあったscePowerSetBusClockFrequency()関数は削除されています。<br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2010 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
