<html lang="jp">
<head>
<title>Controller-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=Shift_JIS>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&reg; Programmer Tool Runtime Library Release 6.6.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
コントローラサービス
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="基本ボタン状態定数"></a>
<table width="100%"><td width="70%"><font size=6>基本ボタン状態定数<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>基本ボタン状態定数<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
#define <i><b>定数名</i></b>	<i><b>値</i></b>

</font></pre></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>定数名</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>ボタン</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_SELECT">SCE_CTRL_SELECT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;0)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SELECT&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_START">SCE_CTRL_START</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;3)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;START&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_UP">SCE_CTRL_UP</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;4)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;方向キー上&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Lup">SCE_CTRL_Lup</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_RIGHT">SCE_CTRL_RIGHT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;5)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;方向キー右&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Lright">SCE_CTRL_Lright</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_DOWN">SCE_CTRL_DOWN</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;6)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;方向キー下&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Ldown">SCE_CTRL_Ldown</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_LEFT">SCE_CTRL_LEFT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;7)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;方向キー左&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Lleft">SCE_CTRL_Lleft</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_L">SCE_CTRL_L</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;8)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Lボタン&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_R">SCE_CTRL_R</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;9)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Rボタン&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_TRIANGLE">SCE_CTRL_TRIANGLE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;12)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;△ボタン&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Rup">SCE_CTRL_Rup</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_CIRCLE">SCE_CTRL_CIRCLE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;13)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;○ボタン&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Rright">SCE_CTRL_Rright</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_CROSS">SCE_CTRL_CROSS</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;14)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;×ボタン&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Rdown">SCE_CTRL_Rdown</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_SQUARE">SCE_CTRL_SQUARE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;(1&lt;&lt;15)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;□ボタン&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_CTRL_Rleft">SCE_CTRL_Rleft</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コントローラ状態情報にある「各基本ボタンの押し下げ状態を表すビット位置」を示す定数群です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_CTRL_INTERCEPTED"></a>
<table width="100%"><td width="70%"><font size=6>SCE_CTRL_INTERCEPTED<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コントローラ入力インターセプト状態定数<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
#define	SCE_CTRL_INTERCEPTED	(1&lt;&lt;16)

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コントローラ状態情報にある、「コントローラ入力インターセプトを表すビット位置」を示す定数です。<br><br>ここで言うコントローラ入力インターセプトとは、「コントローラサービスに対する、システムからのインターセプト信号が入った状態」です。この状態になると、コントローラ入力がアプリケーションに通知されません。<br>ユーザーによりPSボタン(HOMEボタン)が押され、PSP&reg;システムソフトウェア提供のポップアップメニューが動作中に、この状態になることがあります。ただし、ポップアップメニューが動作中でも、アプリケーションに対するコントローラ入力インターセプト信号が入っていない間は、SCE_CTRL_INTERCEPTEDビットに1が設定されません。あくまでもコントローラ入力インターセプトに対応するビットであり、ポップアップメニューが表示されていることを示すビットではないことにご注意ください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_CTRL_HOLD"></a>
<table width="100%"><td width="70%"><font size=6>SCE_CTRL_HOLD<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>POWER / HOLDスイッチ状態定数<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
#define	SCE_CTRL_HOLD		(1&lt;&lt;17)

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コントローラ状態情報にある、「POWER / HOLDスイッチのロック状態を表すビット位置」を示す定数です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="コントローラモード定数"></a>
<table width="100%"><td width="70%"><font size=6>コントローラモード定数<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[定数定義]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コントローラモード定数<br></div><br>

<!-- 定義 -->
<div style="margin-left:10px;"><b>定義</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
#define	SCE_CTRL_MODE_DIGITALONLY 		0
#define	SCE_CTRL_MODE_DIGITALANALOG      	1

</font></pre></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">SCE_CTRL_MODE_DIGITALONLYは、デジタルボタンのみを使用し、アナログパッドを使用しないデジタルボタン専用モードを示す定数です。<br><br>SCE_CTRL_MODE_DIGITALANALOGは、デジタルボタンとアナログパッドを両用するデジタル/アナログ両用モードを示す定数です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlSetSamplingMode">sceCtrlSetSamplingMode</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceCtrlData"></a>
<table width="100%"><td width="70%"><font size=6>SceCtrlData<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コントローラ基本情報<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
typedef struct SceCtrlData {
	unsigned int <i>TimeStamp</i>;
	unsigned int <i>Buttons</i>;
	unsigned char <i>Lx</i>;
	unsigned char <i>Ly</i>;
	unsigned char <i>Rsrv</i>[6];
} <b>SceCtrlData</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>TimeStamp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラサービス読み取り時タイムスタンプ（μsec）&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>Buttons</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラ状態情報&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>Lx</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アナログパッドX軸（左0x00〜右0xff）&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>Ly</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;アナログパッドY軸（上0x00〜下0xff）&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>Rsrv[6]</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;リザーブ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コントローラ状態情報を取得するための構造体です。<br><br>引数<i>TimeStamp</i>には、<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>()等を利用してコントローラサービスからデータを取得したタイムスタンプが入ります。<br>引数<i>Buttons</i>には、32bitのコントローラ状態情報が入ります。アプリケーションは、<a href="../peripheral/Controller-Reference-Japanese.htm#基本ボタン状態定数">基本ボタン状態定数</a>等を利用して、各ボタン等の状態を知ることができます。<br>引数<i>Lx</i>, <i>Ly</i>には、中心を0x80としたアナログパッドの座標データが入ります。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlPeekBufferPositive">sceCtrlPeekBufferPositive</a>(), <a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlPeekBufferNegative">sceCtrlPeekBufferNegative</a>(), <a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>(), <a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceCtrlLatch"></a>
<table width="100%"><td width="70%"><font size=6>SceCtrlLatch<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[構造体]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コントローララッチ情報<br></div><br>

<!-- 構造 -->
<div style="margin-left:10px;"><b>構造</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
typedef struct SceCtrlLatch {
	unsigned int <i>uiMake</i>;
	unsigned int <i>uiBreak</i>;
	unsigned int <i>uiPress</i>;
	unsigned int <i>uiRelease</i>;
} <b>SceCtrlLatch</b>;

</font></pre></div>

<!-- メンバ -->
<div style="margin-left:10px;"><b>メンバ</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiMake</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プレス開始（リリース終了）履歴&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiBreak</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プレス終了（リリース開始）履歴&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiPress</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プレス状態になった履歴&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiRelease</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;リリース状態になった履歴&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コントローラボタンのラッチ状態を取得するための構造体です。<br><br>上記メンバの条件に適合した時、コントローラサービス内の対応メンバの位置へ1が記録されていきます。これがラッチ情報で、システムでグローバルに保持されいます。<br>ラッチ情報のクリアは、<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>()関数でラッチ情報を読み出した後に行われます。つまり記録されているラッチ情報は、前回に<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>()関数を呼び出した後からの履歴となります。<br><br>ラッチ情報のメンバには、下記の表にあるビットパターンのみ返されます。これ以外の組み合わせはありません。詳細の項目はすべて、前回に<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>()関数を呼び出した後から、今回<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>()関数を呼び出した間のボタンの動きを説明しています。取得時状態は、ラッチ情報を取得した時のボタン状態です。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>make</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>break</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>press</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>release</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>意味</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>詳細</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>取得時</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;リリース状態が継続&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ボタンは前回から継続して&nbsp;&nbsp;<br>&nbsp;&nbsp;リリースされている。&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;リリース&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プレス状態が継続&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ボタンは前回から継続して&nbsp;&nbsp;<br>&nbsp;&nbsp;プレスされている。&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;リリース状態へ移行&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ボタンは前回のプレス状態&nbsp;&nbsp;<br>&nbsp;&nbsp;からリリースされ、その後&nbsp;&nbsp;<br>&nbsp;&nbsp;リリース状態が継続されて&nbsp;&nbsp;<br>&nbsp;&nbsp;いる。&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;リリース&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;リリース状態へ移行&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ボタンは継続していた&nbsp;&nbsp;<br>&nbsp;&nbsp;プレス状態からリリース&nbsp;&nbsp;<br>&nbsp;&nbsp;され、その後リリース状態&nbsp;&nbsp;<br>&nbsp;&nbsp;が継続されている。&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;リリース&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プレス状態へ移行&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ボタンは前回のリリース&nbsp;&nbsp;<br>&nbsp;&nbsp;状態からプレスされ、&nbsp;&nbsp;<br>&nbsp;&nbsp;その後プレス状態が継続&nbsp;&nbsp;<br>&nbsp;&nbsp;されている。&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プレス状態へ移行&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ボタンは継続していた&nbsp;&nbsp;<br>&nbsp;&nbsp;リリース状態からプレス&nbsp;&nbsp;<br>&nbsp;&nbsp;され、その後はプレス状態&nbsp;&nbsp;<br>&nbsp;&nbsp;が継続されている。&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プレス&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;プレス・&nbsp;&nbsp;<br>&nbsp;&nbsp;リリース&nbsp;&nbsp;<br>&nbsp;&nbsp;相互移行&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ボタンはプレスとリリース&nbsp;&nbsp;<br>&nbsp;&nbsp;の両方の状態になった。&nbsp;&nbsp;<br>&nbsp;&nbsp;（順序はわからない）&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;不明&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlPeekLatch">sceCtrlPeekLatch</a>(), <a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlSetSamplingMode"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlSetSamplingMode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コントローラモードの設定<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlSetSamplingMode</b> (
	unsigned int <i>uiMode</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiMode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラモード&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_CTRL_MODE_DIGITALONLY&nbsp;&nbsp;<br>&nbsp;&nbsp;SCE_CTRL_MODE_DIGITALANALOG&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">それまで設定されていた古いモード設定値を返します。<br>エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;失敗&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;デジタルボタン専用モード&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;デジタルボタン／アナログパッド両用モード&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コントローラモードを設定する関数です。<br><br>デジタルボタンのみを取得するデジタルボタン専用モード（SCE_CTRL_MODE_DIGITALONLY）と、アナログパッドも使用するデジタルボタン/アナログパッド両用モード（SCE_CTRL_MODE_DIGITALANALOG）のいずれかを引数<i>uiMode</i>に設定してください。<br>デフォルトは、デジタルボタン専用モードです。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlGetSamplingMode">sceCtrlGetSamplingMode</a>(), SCE_CTRL_MODE_DIGITALONLY, SCE_CTRL_MODE_DIGITALANALOG<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlGetSamplingMode"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlGetSamplingMode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コントローラモードの取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlGetSamplingMode</b> (
	unsigned int *<i>puiMode</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>puiMode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラモードを受け取るunsigned int型変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">変更前に設定されていたモード設定値を返します。<br>エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;失敗&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlSetSamplingMode">sceCtrlSetSamplingMode</a>()関数で設定したコントローラモードを取得する関数です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlSetSamplingMode">sceCtrlSetSamplingMode</a>(), SCE_CTRL_MODE_DIGITALONLY, SCE_CTRL_MODE_DIGITALANALOG<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlSetSamplingCycle"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlSetSamplingCycle<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>サンプリング周期の設定<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlSetSamplingCycle</b> (
	unsigned int <i>uiCycle</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiCycle</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;サンプリング周期をμ秒単位で指定&nbsp;&nbsp;<br>&nbsp;&nbsp;（範囲は0または5555〜20000）&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">変更前に設定されていたサンプリング周期設定値を返します。<br>エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;失敗&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コントローラのサンプリングを行う周期をμ秒単位で設定する関数です。<br><br>引数<i>uiCycle</i>には、周波数ではなく周期を設定します。<br>アプリケーション起動時のデフォルトサンプリング周期は0です。0の時は、VSYNC周期のサンプリングモードで、VBLANK期間の開始タイミングごとにサンプリングが行われます。<br>5555〜20000の値（およそ180〜50Hzの範囲）を指定すると、VSYNCに非同期で指定された、μ秒単位でのサンプリングとなります。<br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_3_1">
<div style="margin-left:40px;"><h4><b>注意</b><br><br></h4></div></a>

<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>(), <a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>()関数は、呼び出されたタイミングでサンプリングが完了していなかった場合にスレッドをブロックしますが、sceCtrlSetSamplingCycle()関数でVSYNC非同期のサンプリング周波数を指定した場合には<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>(), <a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>()関数のブロック解除タイミングはVSYNCと非同期になります。<br>同一のスレッドから<a href="../peripheral/Display-Reference-Japanese.htm#sceDisplayWaitVblankStart">sceDisplayWaitVblankStart</a>()関数等と<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>()関数等を呼び出している場合は、VSYNC非同期モードの使用には十分注意してください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlGetSamplingCycle">sceCtrlGetSamplingCycle</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlGetSamplingCycle"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlGetSamplingCycle<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>サンプリング周期の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlGetSamplingCycle</b> (
	unsigned int *<i>puiCycle</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>puiCycle</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;サンプリング周期を受け取るunsigned int型変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;失敗&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlSetSamplingCycle">sceCtrlSetSamplingCycle</a>()関数で設定したサンプリング周期を取得する関数です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlSetSamplingCycle">sceCtrlSetSamplingCycle</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlSetIdleCancelThreshold"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlSetIdleCancelThreshold<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>アイドルキャンセル閾値の設定<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlSetIdleCancelThreshold</b>(
	int <i>iUnHoldThreshold</i>,
	int <i>iHoldThreshold</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iUnHoldThreshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;非ホールド時の閾値（-1〜128）&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iHoldThreshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ホールド時の閾値（-1〜128）&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;失敗&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">アナログパッド操作において、アイドルタイマをキャンセル処理させる閾値を設定する関数です。<br><br>アイドルタイマとは、自動バックライト消灯、自動スリープなど省電力機能を働かせるための処理です。ユーザーがアナログパッドをとのぐらい動かした時に、このアイドルタイマをキャンセル処理させるかを指定します。<br>引数<i>iUnHoldThreshold</i>および<i>iHoldThreshold</i>で、それぞれ非ホールド時およびホールド時の閾値を-1〜128の値で設定します。<br>-1を指定したとき、アナログパッド操作をアイドルタイマのキャンセル要因とはしません。デフォルトではこの状態です。<br>0を指定したとき、操作がなくてもアイドルタイマのキャンセルが行われてしまうため、アイドルタイマそのものが機能しなくなってしまいます。<br>最大値の128を指定した時は、ユーザーがアナログパッドをX, Yいずれかを最大幅まで移動させたときにアイドルタイマのキャンセル要因となります。<br>アナログパッドの無操作時には中央値としてX, Yが0x80になるのが理想状態ですが、実際にはヒステリシスやジッターにより中央付近は不感値帯として捨てる必要があります。そのため、sceCtrlSetIdleCancelThreshold()関数で設定する閾値も小さすぎる値は設定しないようにしてください。<br>なお、<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlSetSamplingMode">sceCtrlSetSamplingMode</a>()関数でSCE_CTRL_MODE_DIGITALONLYモードを指定している場合は、sceCtrlSetIdleCancelThresholdの設定に関わらずアナログパッド操作がアイドルタイマキャンセル要因とはなりません。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlGetIdleCancelThreshold">sceCtrlGetIdleCancelThreshold</a>(), <a href="../peripheral/Power-Reference-Japanese.htm#sceKernelPowerTick">sceKernelPowerTick</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlGetIdleCancelThreshold"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlGetIdleCancelThreshold<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>アイドルキャンセル閾値の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlGetIdleCancelThreshold</b>(
	int *<i>piUnHoldThreshold</i>,
	int *<i>piHoldThreshold</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>piUnHoldThreshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;非ホールド時の閾値を受け取るためのint型変数へのポインタ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>piHoldThreshold</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ホールド時の閾値を受け取るためのint型変数へのポインタ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>値</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>結果</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;失敗&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlSetIdleCancelThreshold">sceCtrlSetIdleCancelThreshold</a>()関数で設定した閾値を取得する関数です。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlSetIdleCancelThreshold">sceCtrlSetIdleCancelThreshold</a>()<br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlPeekBufferPositive"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlPeekBufferPositive<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コントローラ状態情報のポーリング取得（正論理）<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlPeekBufferPositive</b> (
	<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a> *<i>pData</i>,
	int <i>nBufs</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pData</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラデータを受け取るバッファ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nBufs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラデータを受け取るバッファの個数（1〜64）&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>pData</i>に返されたコントローラデータの個数を返します。値は1〜<i>nBufs</i>の範囲となります。<br>エラーのとき負の値を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コントローラ状態情報を正論理で取得する関数です。<br><br>sceCtrlPeekBufferPositive()関数では、引数<i>pData</i>に入る<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a>構造体の<i>Buttons</i>メンバは、各ビットが1の場合に該当するボタンがプレス（押し下げ）であること示します。<br>コントローラサービス内では、直近から64個のコントローラ状態情報をバッファに保持しており、sceCtrlPeekBufferPositive()関数はこのうち新しいバッファの方から、引数<i>nBufs</i>で指定された個数だけポーリングで取得します。<br>バッファの内容はコントローラのサンプリングが行われるたびに割り込みで更新され、sceCtrlPeekBufferPositive()関数の呼び出しによってはバッファの状態は変化しません。このため、sceCtrlPeekBufferPositive()関数を呼び出すタイミングによっては、通常VSYNC周期で行われるバッファ更新の更新前、更新後どちらのデータが取得できるかバラつきが発生する可能性があることにご注意ください。<br><br></div>

<!-- 備考 -->
<div style="margin-left:10px;"><b>備考</b></div>
<hr noshade align="left" size=2 width=20%>
<br>

<!-- sce_title -->
<a Name ="HeadingT_4_2">
<div style="margin-left:40px;"><h4><b>類似関数との相違点</b><br><br></h4></div></a>

<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlPeekBufferNegative">sceCtrlPeekBufferNegative</a>()関数は、該当するボタンがプレス（押し下げ）されたときのコントローラ状態情報が0の時になります。<br><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>()関数は、ブロッキングでコントローラ状態情報を取得するため、サンプリング周期より早く呼び出した場合にスレッドをブロックして、直近の情報を取得させます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a>, <a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlPeekBufferNegative">sceCtrlPeekBufferNegative</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlPeekBufferNegative"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlPeekBufferNegative<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コントローラ状態情報のポーリング取得（負論理）<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlPeekBufferNegative</b> (
	<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a> *<i>pData</i>,
	int <i>nBufs</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pData</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラデータを受け取るバッファ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nBufs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラデータを受け取るバッファの個数（1〜64）&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>pData</i>に返されたコントローラデータの個数を返します。値は1〜<i>nBufs</i>の範囲となります。<br>エラーのとき負の値を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コントローラ状態情報を負論理で取得する関数です。<br><br>sceCtrlPeekBufferNegative()関数では、引数<i>pData</i>に入る<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a>構造体の<i>Buttons</i>メンバは、各ビットが0の場合に該当するボタンがプレス（押し下げ）であること示します。<br>コントローラサービス内では、直近から64個のコントローラ状態情報をバッファに保持しており、sceCtrlPeekBufferNegative()関数はこのうち新しいバッファの方から、引数<i>nBufs</i>で指定された個数だけポーリングで取得します。<br>バッファの内容はコントローラのサンプリングが行われるたびに割り込みで更新され、sceCtrlPeekBufferNegative()関数の呼び出しによってはバッファの状態は変化しません。このため、sceCtrlPeekBufferNegative()関数を呼び出すタイミングによっては、通常VSYNC周期で行われるバッファ更新の更新前、更新後どちらのデータが取得できるかバラつきが発生する可能性があることにご注意ください。<br><br></div>

<!-- 備考 -->
<div style="margin-left:10px;"><b>備考</b></div>
<hr noshade align="left" size=2 width=20%>
<br>

<!-- sce_title -->
<a Name ="HeadingT_4_3">
<div style="margin-left:40px;"><h4><b>類似関数との相違点</b><br><br></h4></div></a>

<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlPeekBufferPositive">sceCtrlPeekBufferPositive</a>()関数は、該当するボタンがプレス（押し下げ）されたときのコントローラ状態情報が1の時になります。<br><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>()関数は、ブロッキングでコントローラ状態情報を取得するため、サンプリング周期より早く呼び出した場合にスレッドをブロックして、直近の情報を取得させます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a>, <a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlPeekBufferPositive">sceCtrlPeekBufferPositive</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlReadBufferPositive"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlReadBufferPositive<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コントローラ状態情報のブロッキング取得（正論理）<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlReadBufferPositive</b> (
	<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a> *<i>pData</i>,
	int <i>nBufs</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（割り込み許可、ディスパッチ許可状態で呼ぶこと）<br>マルチスレッドセーフではない<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pData</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラデータを受け取るバッファ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nBufs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラデータを受け取るバッファの個数（1〜64）&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>pData</i>に返されたコントローラ状態情報の個数を返します。値は1〜<i>nBufs</i>の範囲となります。<br>エラーのとき負の値を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コントローラ状態情報を正論理で取得する関数です。<br><br>sceCtrlReadBufferPositive()関数では、引数<i>pData</i>に入る<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a>構造体の<i>Buttons</i>メンバは、各ビットが1の場合に該当するボタンがプレス（押し下げ）であること示します。<br>コントローラサービス内では、直近から最大64個のコントローラ状態情報をバッファに保持しており、sceCtrlReadBufferPositive()関数は現在の読み出しポインタの位置から引数<i>nBufs</i>で指定された個数だけ取得し、読み出しポインタを更新します。<br>前回のsceCtrlReadBufferPositive()関数または<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>()関数の呼び出しから今回のsceCtrlReadBufferPositive()関数呼び出しまでの間にコントローラのサンプリングが1回も行われていなかった場合、新しくコントローラのサンプリングが行われるまでsceCtrlReadBufferPositive()関数内でスレッドをブロッキングします。したがって、返り値は必ず1以上となり、直近のデータが取得できます。<br>なお、処理落ちなどで設定されているサンプリング周期ごとにsceCtrlReadBufferPositive()関数を呼び出すことができない場合がある時は、<i>nBuf</i>の値を2以上にし、返り値が1より大きくなるかどうかで処理落ちがあったかどうか判断する事ができます。<br><br></div>

<!-- 備考 -->
<div style="margin-left:10px;"><b>備考</b></div>
<hr noshade align="left" size=2 width=20%>
<br>

<!-- sce_title -->
<a Name ="HeadingT_4_4">
<div style="margin-left:40px;"><h4><b>類似関数との相違点</b><br><br></h4></div></a>

<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>()関数は、該当するボタンがプレス（押し下げ）されたときのコントローラ状態情報が0の時になります。<br><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlPeekBufferPositive">sceCtrlPeekBufferPositive</a>()関数は、スヌープでコントローラ状態情報を取得するため、サンプリング周期より早く呼び出した場合にスレッドをブロックせず、最後のサンプリング結果を繰り返し取得させます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a>, <a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferNegative">sceCtrlReadBufferNegative</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlReadBufferNegative"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlReadBufferNegative<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>コントローラ状態情報のブロッキング取得（負論理）<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlReadBufferNegative</b> (
	<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a> *<i>pData</i>,
	int <i>nBufs</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し不可<br>スレッドから呼び出し可能（割り込み許可、ディスパッチ許可状態で呼ぶこと）<br>マルチスレッドセーフではない<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pData</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラデータを受け取るバッファ&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nBufs</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;コントローラデータを受け取るバッファの個数（1〜64）&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><i>pData</i>に返されたコントローラデータの個数が返ります。値は1〜<i>nBufs</i>の範囲となります。<br>エラーのとき負の値を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">コントローラ状態情報を負論理で取得する関数です。<br><br>sceCtrlReadBufferNegative()関数では、引数<i>pData</i>に入る<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a>構造体の<i>Buttons</i>メンバは、各ビットが0の場合に該当するボタンがプレス（押し下げ）であること示します。<br>コントローラサービス内では、直近から最大64個のコントローラ状態情報をバッファに保持しており、sceCtrlReadBufferNegative()関数は現在の読み出しポインタの位置から引数<i>nBufs</i>で指定された個数だけ取得し、読み出しポインタを更新します。<br>前回の<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>()関数またはsceCtrlReadBufferNegative()関数の呼び出しから今回のsceCtrlReadBufferNegative()関数呼び出しまでの間にコントローラのサンプリングが1回も行われていなかった場合、新しくコントローラのサンプリングが行われるまでsceCtrlReadBufferNegative()関数内でスレッドをブロッキングします。したがって、返り値は必ず1以上となり、直近のデータが取得できます。<br>なお、処理落ちなどで設定されているサンプリング周期ごとにsceCtrlReadBufferNegative()関数を呼び出すことができない場合がある時は、<i>nBuf</i>の値を2以上にし、返り値が1より大きくなるかどうかで処理落ちがあったかどうか判断する事ができます。<br><br></div>

<!-- 備考 -->
<div style="margin-left:10px;"><b>備考</b></div>
<hr noshade align="left" size=2 width=20%>
<br>

<!-- sce_title -->
<a Name ="HeadingT_4_5">
<div style="margin-left:40px;"><h4><b>類似関数との相違点</b><br><br></h4></div></a>

<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>()関数は、該当するボタンがプレス（押し下げ）されたときのコントローラ状態情報が1の時になります。<br><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlPeekBufferNegative">sceCtrlPeekBufferNegative</a>()関数は、スヌープでコントローラ状態情報を取得するため、サンプリング周期より早く呼び出した場合にスレッドをブロックせず、最後のサンプリング結果を繰り返し取得させます。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlData">SceCtrlData</a>, <a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadBufferPositive">sceCtrlReadBufferPositive</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlPeekLatch"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlPeekLatch<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ラッチ情報のスヌープ取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlPeekLatch</b> (
	<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlLatch">SceCtrlLatch</a> *<i>pLatch</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pLatch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ラッチ情報を受け取るバッファ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">最後に<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>()関数を呼び出してから、サンプリングが行われた回数を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ラッチ情報を読み込む関数です。<br><br>コントローラサービスは、サンプリング周波数ごとにデジタルボタンのプレス（押し下げ）／リリース（解放）状態を前回のボタン押し下げ状態と比較し、その変化をラッチ情報としてシステムでグローバルに記録します。sceCtrlPeekLatch()関数は、そのラッチ情報を読み込みます。<br>ただし、<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>()関数と違い、読み込んだ後にラッチ情報をクリアしません。このため<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>()関数を使用するスレッドが動作中に、他のスレッドでラッチ情報を取得したい場合、他のスレッドに影響を与えないsceCtrlPeekLatch()関数で行ってください。<br>取得できるラッチ情報の詳細に関しては、<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlLatch">SceCtrlLatch</a>をご覧ください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlReadLatch">sceCtrlReadLatch</a>(), <a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlLatch">SceCtrlLatch</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlReadLatch"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlReadLatch<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ラッチ情報の取得<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlReadLatch</b> (
	<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlLatch">SceCtrlLatch</a> *<i>pLatch</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフではない<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pLatch</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ラッチ情報を受け取るバッファ&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">最後にsceCtrlReadLatch()関数を呼び出してから、サンプリングが行われた回数を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">最新のラッチ情報を読み込む関数です。<br><br>コントローラサービスは、サンプリング周波数ごとにデジタルボタンのプレス（押し下げ）／リリース（解放）状態を前回のボタン押し下げ状態と比較し、その変化をラッチ情報としてシステムでグローバルに記録します。sceCtrlReadLatch()関数は、そのラッチ情報を読み込み、その後にラッチ情報をクリアします。このため、他のsceCtrlReadLatch()関数を使用するスレッドが動作中に、ラッチ情報を取得したい場合は、他のスレッドに影響を与えない<a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlPeekLatch">sceCtrlPeekLatch</a>()関数で行ってください。<br>取得できるラッチ情報の詳細に関しては、<a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlLatch">SceCtrlLatch</a>をご覧ください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlPeekLatch">sceCtrlPeekLatch</a>(), <a href="../peripheral/Controller-Reference-Japanese.htm#SceCtrlLatch">SceCtrlLatch</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlClearRapidFire"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlClearRapidFire<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ボタン連射設定のクリア<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlClearRapidFire</b> (
	int <i>idx</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>idx</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ボタン連射のルールインデックス（0-15）&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlSetRapidFire">sceCtrlSetRapidFire</a>()で設定した、デジタルボタンの連射設定をクリアする関数です。<br><br>引数<i>idx</i>でクリアするルールインデックスを選択してください。<br><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlSetRapidFire">sceCtrlSetRapidFire</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceCtrlSetRapidFire"></a>
<table width="100%"><td width="70%"><font size=6>sceCtrlSetRapidFire<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[関数]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>ボタン連射ルールの設定<br></div><br>

<!-- 形式 -->
<div style="margin-left:10px;"><b>形式</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;ctrlsvc.h&gt;
int <b>sceCtrlSetRapidFire</b> (
	int <i>idx</i>,
	unsigned int <i>uiMask</i>,
	unsigned int <i>uiTrigger</i>,
	unsigned int <i>uiTarget</i>,
	unsigned int <i>uiDelay</i>,
	unsigned int <i>uiMake</i>,
	unsigned int <i>uiBreak</i>
);

</font></pre></div>

<!-- 呼出条件 -->
<div style="margin-left:10px;"><b>呼出条件</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">割り込みハンドラから呼び出し可能<br>スレッドから呼び出し可能（割り込み禁止、許可状態に依存しない）<br>マルチスレッドセーフである<br><br></div>

<!-- 引数 -->
<div style="margin-left:10px;"><b>引数</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>idx</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ボタン連射のルールインデックス（0-15）&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiMask</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;連射トリガーとなるボタン操作の比較マスク&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiTrigger</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;連射トリガーとなるボタン操作&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiTarget</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;連射入力が行われる対象ボタン&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiDelay</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;連射トリガーの不感時間（サンプリング回数）&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiMake</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ボタン押し下げ時間（サンプリング回数）&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiBreak</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;ボタン離し時間（サンプリング回数）&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- 返り値 -->
<div style="margin-left:10px;"><b>返り値</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">エラーのとき負の値を返します。<br><br></div>

<!-- 解説 -->
<div style="margin-left:10px;"><b>解説</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">ボタン連射機能のルールを設定する関数です。<br><br>この関数は実機でも動作しますが、主としてデバッグ用途を意図しています。<br>引数<i>idx</i>に0〜15のルールインデックスナンバーを振ってください。ルールを最大16パターンまで登録できます。ボタンの入力を引数<i>uiMask</i>でマスクした値が引数<i>uiTrigger</i>と一致したとき、引数<i>uiTarget</i>で指定されたボタンが連射状態に置かれます。引数<i>uiMask</i>, <i>uiTrigger</i>, <i>uiTarget</i>はいずれも正論理で論理を指定します。引数<i>uiDelay</i>で連射開始タイミング、<i>uiMake</i>, <i>uiBreak</i>で連射サイクルを指定します。<br></div>

<!-- sce_title -->
<a Name ="HeadingT_5_6">
<div style="margin-left:40px;"><h4><b>設定例</b><br><br></h4></div></a>

        <div style="margin-left:50px;"><pre><font size=3>sceCtrlSetRapidFire(0,
		(<a href="../peripheral/Controller-Reference-Japanese.htm#SCE_CTRL_CIRCLE">SCE_CTRL_CIRCLE</a> | <a href="../peripheral/Controller-Reference-Japanese.htm#SCE_CTRL_L">SCE_CTRL_L</a>),	// [○][L]をマスクし
		<a href="../peripheral/Controller-Reference-Japanese.htm#SCE_CTRL_CIRCLE">SCE_CTRL_CIRCLE</a>,      	// [○]ボタンがプレス状態のとき
		<a href="../peripheral/Controller-Reference-Japanese.htm#SCE_CTRL_SQUARE">SCE_CTRL_SQUARE</a>,     	// [□]ボタンを
		10,                       	// 10サイクルの遅延後
		1, 1);                     	// (1+1)サイクル周期でON&rarr;OFF&rarr;

sceCtrlSetRapidFire(1,
		<a href="../peripheral/Controller-Reference-Japanese.htm#SCE_CTRL_TRIANGLE">SCE_CTRL_TRIANGLE</a>, 	// [△]をマスクし
		<a href="../peripheral/Controller-Reference-Japanese.htm#SCE_CTRL_TRIANGLE">SCE_CTRL_TRIANGLE</a>, 	// [△]ボタンがプレス状態のとき
		<a href="../peripheral/Controller-Reference-Japanese.htm#SCE_CTRL_TRIANGLE">SCE_CTRL_TRIANGLE</a>, 	// [△]ボタンを
		1,                 	// 1サイクルの遅延後
		2, 1);             	// (2+1)サイクル周期でON&rarr;ON&rarr;OFF&rarr;
</font></pre></div>
<div style="margin-left:50px;"><br></div>

<!-- 関連項目 -->
<div style="margin-left:10px;"><b>関連項目</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Controller-Reference-Japanese.htm#sceCtrlClearRapidFire">sceCtrlClearRapidFire</a>()<br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
