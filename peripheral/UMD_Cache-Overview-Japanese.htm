<html lang="jp">
<head>
<title>UMD_Cache-Overview</title>
<meta http-equiv="Content-Type" content= text/html; charset=Shift_JIS>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&reg; Programmer Tool Runtime Library Release 6.6.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
UMD&reg;Cacheドライバ概要
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd3 -->
<a name="Heading3_1">
<h2>
 1 <!-- hp --><b>ドキュメント概要</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">このドキュメントでは、PSP&reg;本体(PSP-2000、PSP-3000)に搭載されている64MBメモリのうち、ゲームタイトルによって使用されない32MB中から、一定サイズをUMD&reg;のキャッシュとして利用する、<b>キャッシュドライバ</b>の説明をします。<br><br>ゲームタイトル起動時は、PSP-1000のタイトル互換の必要があるため、タイトル自体では、これまでどおり28MBのメモリを使用できます。そのため、ゲーム起動中は、残り32MBが未使用な状態にあります。<br>この残りメモリを有効活用するため、タイトルに依存しない形で、タイトルのデータ読み込みを高速化することが、キャッシュドライバの目的となります。<br>キャッシュメモリに使用されるサイズについては、予告なく変更されることがありますので、具体的な数字のコミットはいたしません。<br><br>キャッシュドライバの動作については、DTP-T1000、DTP-2000、DTP-H2500およびDTP-H1500のデバッグ設定で、"UMD&trade; Cache"モードを有効にすることで、確認することが可能です。<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_2">
<h2>
 2 <!-- hp --><b>UMD&reg;キャッシュ概要</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_2_1">
<h3>
<a href="#Heading3_2"> 2. </a>1 
<!-- hp1 --><b>UMD&reg;キャッシュの種類</b><br>
</a>
</h3>
<div style="margin-left:50px;">UMD&reg;のキャッシュには大きく二つのキャッシュメモリが存在します。<br>ひとつは、UMD&reg;ドライブにあるメモリで、以後、<b>ドライブキャッシュ</b>と称します。<br>もうひとつは、今回のPSP-2000、PSP-3000のキャッシュドライバで確保する<b>キャッシュメモリ</b>です。<br>読み込みをわずかでもはやくするために、使いまわされる数KBのメモリ領域も存在しますが、PSP-1000まではUMD&reg;のキャッシュといえば、ドライブキャッシュを指していました。<br></div>

<div style="margin-left:67px;">
<p>
<img src="gif/UMD_Cache-Overview-Japanese001.gif">
</div>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_2">
<h3>
<a href="#Heading3_2"> 2. </a>2 
<!-- hp1 --><b>データアクセスシーケンス</b><br>
</a>
</h3>
<div style="margin-left:50px;">PSP-2000、PSP-3000におけるキャッシュドライバを含めた、データアクセスシーケンスを以下にまとめます。従来のPSP-1000の通常アクセスは、PSP-2000、PSP-3000でのSCE_O_NOBUFおよびSCE_FNBUFフラグ付アクセスと同様のものと考えてください。<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_2_1">
<div style="margin-left:40px;"><h4><b>通常アクセス</b><br><br></h4></div></a>

</ul>
<div style="margin-left:55px;"><ol>
<li VALUE=1> ゲームタイトルが、ブロックデバイスもしくはファイルシステムを経由して、データアクセスをします。</li>
<li VALUE=2> UMD&reg;キャッシュドライバで、キャッシュヒット判定を行い、キャッシュヒットしていた場合、そのデータをタイトルに渡します。</li>
<li VALUE=3> (2)でキャッシュミスヒットしていた場合、デバイスドライバは、UMD&reg;ドライブに対して、I/Oリクエストを行います。</li>
<li VALUE=4> UMD&reg;ドライブは、デバイスドライバからのリクエストを受け、ドライブキャッシュのキャッシュヒット判定を行い該当データがある場合、そのデータをデバイスドライバに転送します。（6へ）</li>
<li VALUE=5> (4)で、ドライブキャッシュに該当データがなかった場合、UMD&reg;ディスクからデータを取得します。</li>
<li VALUE=6> そのデータは、ドライブキャッシュ、UMD&reg;キャッシュメモリにキャッシュされて、タイトルに渡されます。</li>
</ol></div>

<!-- sce_title -->
<a Name ="HeadingT_2_2_2">
<div style="margin-left:40px;"><h4><b>SCE_ISOFS_UNCACHED_READおよびSCE_UMD_UNCACHED_READアクセス</b><br><br></h4></div></a>

<div style="margin-left:55px;"><ol>
<li VALUE=1> ゲームタイトルが、ブロックデバイスもしくはファイルシステムを経由して、データアクセスします。</li>
<li VALUE=2> UMD&reg;キャッシュドライバを経由せず、UMD&reg;ドライブにI/Oリクエストを行います。</li>
<li VALUE=3> UMD&reg;ドライブは、ドライブキャッシュに対して、キャッシュヒット判定を行わず、UMD&reg;ディスクからデータを取得します。</li>
<li VALUE=4> そのデータは、ドライブキャッシュにのみキャッシュされて、タイトルに渡されます。</li>
</ol></div>

<!-- sce_title -->
<a Name ="HeadingT_2_2_3">
<div style="margin-left:40px;"><h4><b>SCE_O_NOBUFおよびSCE_FNBUFフラグ付のアクセス</b><br><br></h4></div></a>

<div style="margin-left:55px;"><ol>
<li VALUE=1> ゲームタイトルが、ブロックデバイスもしくはファイルシステムを経由して、データアクセスします。</li>
<li VALUE=2> UMD&reg;キャッシュドライバを経由せず、UMD&reg;ドライブに、I/Oリクエストを行います。</li>
<li VALUE=3> UMD&reg;ドライブは、デバイスドライバからのリクエストを受け、ドライブキャッシュのキャッシュヒット判定を行い該当データがある場合、そのデータをデバイスドライバに転送します。（5へ）</li>
<li VALUE=4> (3)で、ドライブキャッシュに該当データがなかった場合、UMD&reg;ディスクからデータを取得します。</li>
<li VALUE=5> そのデータは、ドライブキャッシュにのみキャッシュされて、タイトルに渡されます。</li>
</ol></div>

<!-- sce_title -->
<a Name ="HeadingT_2_2_4">
<div style="margin-left:40px;"><h4><b>SCE_ISOFS_READ_AHEAD、SCE_ISOFS_ACQ_READ_AHEADおよびSCE_UMD_READ_AHEAD、SCE_UMD_ACQ_READ_AHEADコマンド</b><br><br></h4></div></a>

<div style="margin-left:55px;"><ol>
<li VALUE=1> ゲームタイトルが、先読みコマンドを実行します。</li>
<li VALUE=2> (1)のコマンドが受理されると、デバイスドライバは、UMD&reg;キャッシュメモリから、必要なメモリを確保し、UMD&reg;ドライブに対してI/Oリクエストを行います。</li>
<li VALUE=3> UMD&reg;ドライブは、デバイスドライバからのリクエストを受け、ドライブキャッシュのキャッシュヒット判定を行い該当データがある場合、そのデータをデバイスドライバに転送します。（5へ）</li>
<li VALUE=4> (3)で、ドライブキャッシュに該当データがなかった場合、UMD&reg;ディスクからデータを取得します。</li>
<li VALUE=5> そのデータは、ドライブキャッシュおよびUMD&reg;キャッシュメモリにキャッシュされますが、タイトルにデータを渡しません。</li>
</ol></div>

<!-- sce_hd4 -->
<a name="Heading4_2_3">
<h3>
<a href="#Heading3_2"> 2. </a>3 
<!-- hp1 --><b>概要</b><br>
</a>
</h3>
<div style="margin-left:50px;">キャッシュドライバの目的は、基本的には、二回目以降の同じデータに対する読み込みを高速化することです。キャッシュヒットすることにより、スループットの向上のほか、ドライブの消費電力を抑えることにもつながります。<br><br>キャッシュメモリ単位は、<b>128KB(64セクタ)</b>です。<br>キャッシュアルゴリズムは、以下の方式を組み合わせたもので構成されています。<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_3_5">
<div style="margin-left:40px;"><h4><b>LRU(Least Recently Used)</b><br><br></h4></div></a>

<div style="margin-left:67px;">LRU(Least Recently Used)は、最後に使われたキャッシュから捨てていく方法です。キャッシュは、キャッシュ登録時およびキャッシュヒット時に、リストの先頭につながれます。キャッシュメモリが不足した場合に、新たなキャッシュメモリを確保するために、リストの最後にあるデータ順に開放を行っていきます。<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_3_6">
<div style="margin-left:40px;"><h4><b>削除カウント(Deletion Count)</b><br><br></h4></div></a>

<div style="margin-left:67px;">LRUをベースにキャッシュメモリの管理を行いますが、一方で、参照数の多いキャッシュ（キャッシュヒットした回数が多い）ものは、再利用率が高いと推測できるため可能なかぎり、キャッシュとしてとどめておきたいと考えます。<br>参照数の多いキャッシュの削除を遅らせるために、キャッシュ管理において、削除カウント数を要素に加え、参照カウントと削除カウントが同じになった場合に、そのキャッシュデータを削除する処理を行います。<br>削除カウントは、LRUによって、削除対象になったキャッシュに対してインクリメントされていきます。<br>ただし、以下の例外があります。<br></div>
</ol>
<div style="margin-left:70px;"><ul>
<li> 削除カウントが16を超えているものは、参照数が多くともLRUが優先され、削除対象になります。
<li> 以上の条件で、リストの先頭まで検索しても削除すべき要素が見つからなかった場合は、LRUが優先されて最後に利用したキャッシュを削除します。
</ul></div>

<!-- sce_title -->
<a Name ="HeadingT_2_3_7">
<div style="margin-left:40px;"><h4><b>先読み(Read-Ahead)</b><br><br></h4></div></a>

<div style="margin-left:67px;">キャッシュドライバを使って、UMD&reg;に関連するドライバは先読みを行うことがあります。<br>とはいえ、投機的な先読みを行うわけではなく、キャッシュドライバによってストリーミングデータのアクセス要求と判断された場合、そのデータの継ぎ足しのために先読みを行います。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_2_4">
<h3>
<a href="#Heading3_2"> 2. </a>4 
<!-- hp1 --><b>キャッシュの削除タイミング</b><br>
</a>
</h3>
<div style="margin-left:50px;">キャッシュメモリの削除タイミングは、以下のようになります。<br></div>
</ol>
<div style="margin-left:40px;"><ul>
<li> 新たなキャッシュのために必要なメモリが足りなくなった場合
<li> ディスク検出時（スリープモードからレジュームした場合やディスクの挿抜時）
</ul></div>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd3 -->
<a name="Heading3_3">
<h2>
 3 <!-- hp --><b>キャッシュに関連する設定およびAPIについて</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_3_1">
<h3>
<a href="#Heading3_3"> 3. </a>1 
<!-- hp1 --><b>ドライブキャッシュ、キャッシュドライバを経由しないIoctlコマンド</b><br>
</a>
</h3>
<div style="margin-left:50px;">SCE_ISOFS_UNCACHED_READ<br>SCE_UMD_UNCACHED_READ<br>これらのコマンドで、読み込みリクエストを行った場合、ドライブキャッシュ、キャッシュドライバを経由せず、かならずディスクアクセスします。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_2">
<h3>
<a href="#Heading3_3"> 3. </a>2 
<!-- hp1 --><b>sceIoOpen*()の第二引数に、SCE_O_NOBUF、SCE_FNBUFフラグを設定する</b><br>
</a>
</h3>
<div style="margin-left:50px;">これらのフラグ設定をされたファイルは、キャッシュドライバを経由せずデータ転送されます。<br>そのため、キャッシュヒット判定が行われず、UMD&reg;ドライブまで処理が到達します。<br>PSP-1000でこのフラグが設定された場合は、キャッシュドライバが常駐しないため、読み込みに対してなんら影響は与えません。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_3_3">
<h3>
<a href="#Heading3_3"> 3. </a>3 
<!-- hp1 --><b>先読みリクエストコマンド</b><br>
</a>
</h3>
<div style="margin-left:50px;">SCE_ISOFS_READ_AHEAD<br>SCE_ISOFS_ACQ_READ_AHEAD<br>SCE_UMD_READ_AHEAD<br>SCE_UMD_ACQ_READ_AHEAD<br>これらのコマンドは、キャッシュドライバにあらかじめ指定データをキャッシュするようにリクエストするコマンドです。<br>コマンド自体は、PSP-1000で利用可能ですが、キャッシュドライバが存在しないため、先読みは実行されず、その後の読み込みでもキャッシュヒットすることはありません。<br><br>SCE_ISOFS_ACQ_READ_AHEAD<br>SCE_UMD_ACQ_READ_AHEAD<br>この2つのコマンドは、先読みの状態を取得することが可能です。<br>状態には、WAIT状態、WORKING状態、FINISH状態が存在します。<br>PSP-1000において状態確認を行った場合には、先読みが実行されないため、常にFINISH状態を戻します。<br><br>状態確認のためには、SCE_UMD_POLL_READ_AHEAD, SCE_UMD_WAIT_READ_AHEADコマンドを実行する際に、SCE_UMD_ACQ_READ_AHEADが戻すindex値を設定して、状態確認したリクエストを指定します。<br>その際に、不正なindex値を指定しても、エラーではなく、FINISH状態が戻る点に注意してください。<br><br>SCE_ISOFS_POLL_STAT_READ_AHEAD, SCE_ISOFS_WAIT_STAT_READ_AHEADの場合には、index値はなく、ファイルディスクリプタからリクエスト状態を取得します。<br>ひとつのディスクリプタに対して複数の先読みリクエストを行った場合には、最後にリクエストされた状態がこれらのコマンドから取得されます。<br><br>コマンドに使用方法については、ISO9660およびUMD&reg;Blockの各リファレンスを参照してください。<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_4">
<h2>
 4 <!-- hp --><b>先読みリクエストコマンド</b>
<hr noshade>
</h2>

<div style="margin-left:50px;">先読みリクエストは、キャッシュメモリに対して、指定したデータを先読みするようにリクエストする機能です。<br>キャッシュドライバの目的は、概要で述べたとおり、二回目以降の同じデータに対する読み込みを高速化することですが、先読みを行うことで、最初の読み込みからロードの高速化が可能となります。<br><br>効果的な先読みは、ロード時間を劇的に短縮しますが、使い方には考慮すべき点もありますので、それを以下にまとめます。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_1">
<h3>
<a href="#Heading3_4"> 4. </a>1 
<!-- hp1 --><b>先読み中の読み込み</b><br>
</a>
</h3>
<div style="margin-left:50px;">先読みと読み込みの違いは、キャッシュドライバにデータを渡すかタイトルにデータを渡すかの違いしかありません。そのため、先読みを行っている最中は、読み込みはブロックされます。<br>例えば、<br></div>
<div style="margin-left:67px;">"場面A"において、次に"場面B"に遷移することがわかっていた場合、"場面B"に必要なデータを先読みすることは理にかなっていますが、"場面A"でBGMをストリーミングしていたりする場合、そのストリーミングを妨げることが考えられます。<br><br></div>
<div style="margin-left:50px;">ストリーミングなどと併用する場合は注意が必要です。<br>先読み中は、読み込みがブロックされますが、読み込みがキャッシュヒットする場合、その読み込みスレッドはブロックされずにタイトルまで戻ります。<br>ブロックされる読み込みは、キャッシュミスヒットした読み込みもしくは、キャッシュドライバを経由しない読み込みになります。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_4_2">
<h3>
<a href="#Heading3_4"> 4. </a>2 
<!-- hp1 --><b>先読みを生かす</b><br>
</a>
</h3>
<div style="margin-left:50px;">必要なデータを先読みするということは、キャッシュメモリを使い果たしている場合、既存のキャッシュデータをリプレースすることを意味します。すでに不要となっているデータの置き換えは問題ありませんが、先読み量や先読みタイミングによっては、キャッシュヒットさせるために先読みしたデータを後の先読みがリプレースしてしまう可能性があります。<br>例えば、<br></div>
<div style="margin-left:67px;">"場面A"において、"場面A"に必要なデータがキャッシュにあり、実際に読み込みでキャッシュヒットし続けます。<br>次に"場面B"に遷移することがわかっている場合、"場面B"に必要なデータを先読みしておくことは理にかなっていますが、この場合"場面A"のデータがキャッシュヒットし続けると、場合によっては、"場面B"のために先読みしておいたデータがリストの最後につながり、アルゴリズムとして、キャッシュのリプレースの第一候補になってしまう可能性がありえます。<br><br></div>
<div style="margin-left:50px;">キャッシングする場合に、すでに新たに確保するメモリがなく、既存のキャッシュメモリをリプレースするような場合は注意が必要です。<br><br>キャッシュヒットし続けている限りにおいては、キャッシュを新たにリプレースすることはありませんが、先読みした後でキャッシュミスヒットを頻繁におこすと、先読みの意味するとおり参照数が上がらない先読みキャッシュメモリは、すぐにリプレースの対象となりその効果を生かせない可能性があります。<br><br></div>

<!-- sce_hd3 -->
<a name="Heading3_5">
<h2>
 5 <!-- hp --><b>キャッシュ利用時の注意点</b>
<hr noshade>
</h2>


<!-- sce_hd4 -->
<a name="Heading4_5_1">
<h3>
<a href="#Heading3_5"> 5. </a>1 
<!-- hp1 --><b>PSP-1000でのユーザビリティも考慮する</b><br>
</a>
</h3>
<div style="margin-left:50px;">キャッシュドライバは、PSP-2000、PSP-3000に常駐します。そのためPSP-2000、PSP-3000を前提とすると、PSP-1000での読み込み時間が考慮されず、ユーザビリティを下げることになるかもしれません。<br>キャッシュドライバに適した読み込みを行うことは、PSP-2000、PSP-3000において、ロード時間の短縮に大きく寄与しますが、これだけに注力しないようお願いします。<br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_2">
<h3>
<a href="#Heading3_5"> 5. </a>2 
<!-- hp1 --><b>一定のスループットに依存しないようにする</b><br>
</a>
</h3>
<div style="margin-left:50px;">PSP-1000では大きな外乱がなければ、シーケンシャルアクセスにおいては一定のスループットが計算できましたが、PSP-2000、PSP-3000ではキャッシュドライバが常駐することによって、シーケンシャルなアクセスでもキャッシュヒット時とミスヒット時では、スループットが大きく変化します。<br>ドライバがシーケンシャルなアクセスと判断した場合、先読みなどで、できるかぎりキャッシュヒットさせてスループットを一定に保つようにしますが、かならずしも先読みが間に合うわけではありません。<br>ムービーや音楽再生のストリーミング再生時には、ある程度のスループットの変化に対応しておく必要があります。<br>もしくは、ストリーミングでファイルを読む場合、SCE_O_NOBUF, SCE_FNBUFフラグを設定してキャッシュドライバを経由しないようにすることで、スループットの変化を避けることができます。<br><b>キャッシュを有効利用するために、ムービーデータや音楽データなど、1度しか利用しないデータアクセスの場合は、これらのフラグを設定することを推奨します。</b><br></div>

<!-- sce_hd4 -->
<a name="Heading4_5_3">
<h3>
<a href="#Heading3_5"> 5. </a>3 
<!-- hp1 --><b>通信タイムアウト時間に配慮する</b><br>
</a>
</h3>
<div style="margin-left:50px;">PSP-1000同士の通信の場合では、ロード時間のばらつきがわずかであっても、PSP-1000とPSP-2000およびPSP-3000の通信では、キャッシュヒットすることで、ロード時間差が数十秒オーダーで変化することが考えられます。<br>この場合、通信タイムアウト時間が短いとキャッシュヒットしたPSP&reg;と通信エラーが発生し、ネットワーク対戦ができない場合がありますので、通信時には、ロード時間によるタイムアウト設定に注意してください。<br>※「pspnet」概要ドキュメントの「注意事項」の章も参照してください。<br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2010 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
