<html lang="en">
<head>
<title>USB_PSPComm-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
USB PSP&trade; Communications Library Reference
</h1></center>
</a>
<!-- sce_hd1 -->

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="Connection or disconnection state"></a>
<table width="100%"><td width="70%"><font size=6>Connection or disconnection state<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Connection or disconnection state<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbpspcm.h&gt;
</font></pre></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Macro</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Value</b>&nbsp;</td>
<td bgcolor="#cccccc" valign="top">&nbsp;<b>Explanation</b>&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<a name="SCE_USBPSPCM_CONNECTED">SCE_USBPSPCM_CONNECTED</a>&nbsp;</td>
<td valign="top">&nbsp;0x01&nbsp;</td>
<td valign="top">&nbsp;When&nbsp;PSP&trade;&nbsp;is&nbsp;connected&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<a name="SCE_USBPSPCM_DISCONNECTED">SCE_USBPSPCM_DISCONNECTED</a>&nbsp;</td>
<td valign="top">&nbsp;0x02&nbsp;</td>
<td valign="top">&nbsp;When&nbsp;PSP&trade;&nbsp;is&nbsp;disconnected&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<a name="SCE_USBPSPCM_INVAL_TITLE">SCE_USBPSPCM_INVAL_TITLE</a>&nbsp;</td>
<td valign="top">&nbsp;0x04&nbsp;</td>
<td valign="top">&nbsp;When&nbsp;title&nbsp;check&nbsp;failed&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<a name="SCE_USBPSPCM_BUSY">SCE_USBPSPCM_BUSY</a>&nbsp;</td>
<td valign="top">&nbsp;0x08&nbsp;</td>
<td valign="top">&nbsp;When&nbsp;USB&nbsp;host&nbsp;is&nbsp;busy&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<a name="SCE_USBPSPCM_WAIT">SCE_USBPSPCM_WAIT</a>&nbsp;</td>
<td valign="top">&nbsp;0x10&nbsp;</td>
<td valign="top">&nbsp;When&nbsp;waiting&nbsp;for&nbsp;title&nbsp;check&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<a name="SCE_USBPSPCM_EXCEEDED">SCE_USBPSPCM_EXCEEDED</a>&nbsp;</td>
<td valign="top">&nbsp;0x20&nbsp;</td>
<td valign="top">&nbsp;When&nbsp;too&nbsp;many&nbsp;PSP&trade;&nbsp;devices&nbsp;are&nbsp;connected&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<a name="SCE_USBPSPCM_VERSION_ERROR">SCE_USBPSPCM_VERSION_ERROR</a>&nbsp;</td>
<td valign="top">&nbsp;0x40&nbsp;</td>
<td valign="top">&nbsp;When&nbsp;there&nbsp;is&nbsp;a&nbsp;mismatch&nbsp;with&nbsp;the&nbsp;<br>&nbsp;library&nbsp;version&nbsp;on&nbsp;the&nbsp;USB&nbsp;host.&nbsp;</td>
</tr>
<tr>
<td valign="top">&nbsp;<a name="SCE_USBPSPCM_OWN">SCE_USBPSPCM_OWN</a>&nbsp;</td>
<td valign="top">&nbsp;0x80&nbsp;</td>
<td valign="top">&nbsp;When&nbsp;PSP&trade;&nbsp;itself&nbsp;is&nbsp;connected/disconnected&nbsp;</td>
</tr></table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This group of constants represents the connection or disconnection state.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmConnect">SceUsbPspcmConnect</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_HOST_ADDR"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_HOST_ADDR<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>USB host address<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbpspcm.h&gt;
#define  SCE_USBPSPCM_HOST_ADDR		0xFF

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the USB host address.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BIND">SCE_USBPSPCM_BIND</a><br><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_NAME"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_NAME<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>USB PSP&trade; communication driver name<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbpspcm.h&gt;
#define  SCE_USBPSPCM_NAME		"USBPSPCommunicationDriver"

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the name of the USB PSP&trade; communication driver. <br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceUsbStart">sceUsbStart</a>() , <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceUsbStop">sceUsbStop</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USB_PID_PSPCM"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USB_PID_PSPCM<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>USB PSP&trade; communication driver's product ID<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbpspcm.h&gt;
#define  SCE_USB_PID_PSPCM		0x01CB

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the USB PSP&trade; communication driver's product ID.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceUsbActivate">sceUsbActivate</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="Read"></a><a name="WriteMode"></a>
<a name="Read/Write Mode"></a>
<table width="100%"><td width="70%"><font size=6>Read/Write Mode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Read/write mode<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbpspcm.h&gt;
</font></pre></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Description</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_RDWR_NORMAL">SCE_USBPSPCM_RDWR_NORMAL</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x00&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Normal mode, in which data is handled in&nbsp;&nbsp;<br>&nbsp;&nbsp;terms of writes&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_RDWR_RD_SEQ">SCE_USBPSPCM_RDWR_RD_SEQ</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x01&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Receive mode, which is used if the&nbsp;&nbsp;<br>&nbsp;&nbsp;maximum size of the data to be received&nbsp;&nbsp;<br>&nbsp;&nbsp;is known beforehand&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_RDWR_WR_SEQ">SCE_USBPSPCM_RDWR_WR_SEQ</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x02&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Send mode, which divides a chunk of data&nbsp;&nbsp;<br>&nbsp;&nbsp;into multiple writes&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the read/write mode.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_MODE">SCE_USBPSPCM_RDWR_MODE</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceUsbPspcmConnect"></a>
<table width="100%"><td width="70%"><font size=6>SceUsbPspcmConnect<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Structure representing the connection/disconnection state<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbpspcm.h&gt;
typedef struct SceUsbPspcmConnect {
	int <i>addr</i>;
	SceUInt <i>stat</i>;
} <b>SceUsbPspcmConnect</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>addr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;PSP&trade; address&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>stat</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#Connection or disconnection state">Connection or disconnection state</a>&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a structure for representing the PSP&trade; connection/disconnection state.<br>This structure is returned as an argument of the connection/disconnection reporting thread.<br><i>stat</i> represents the logical OR of the following bits.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Explanation</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_OWN">SCE_USBPSPCM_OWN</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;When the PSP&trade; itself is connected or &nbsp;&nbsp;<br>&nbsp;&nbsp;disconnected&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_CONNECTED">SCE_USBPSPCM_CONNECTED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x01&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;When the PSP&trade; is connected&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_DISCONNECTED">SCE_USBPSPCM_DISCONNECTED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x02&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;When the PSP&trade; is disconnected&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_INVAL_TITLE">SCE_USBPSPCM_INVAL_TITLE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x04&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;When the title check failed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BUSY">SCE_USBPSPCM_BUSY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x08&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;When the USB host is busy&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_WAIT">SCE_USBPSPCM_WAIT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x10&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;When waiting for the title check&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_EXCEEDED">SCE_USBPSPCM_EXCEEDED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x20&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;When too many PSP&trade; devices are &nbsp;&nbsp;<br>&nbsp;&nbsp;connected&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_VERSION_ERROR">SCE_USBPSPCM_VERSION_ERROR</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x40&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;When there is a mismatch with the&nbsp;&nbsp;<br>&nbsp;&nbsp;library version on the USB host.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">For <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_CONNECTED">SCE_USBPSPCM_CONNECTED</a> and <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_DISCONNECTED">SCE_USBPSPCM_DISCONNECTED</a>, <i>addr</i> represents the address of the PSP&trade; that was connected/disconnected.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_CONNECTED">SCE_USBPSPCM_CONNECTED</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_DISCONNECTED">SCE_USBPSPCM_DISCONNECTED</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_INVAL_TITLE">SCE_USBPSPCM_INVAL_TITLE</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BUSY">SCE_USBPSPCM_BUSY</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_WAIT">SCE_USBPSPCM_WAIT</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_VERSION_ERROR">SCE_USBPSPCM_VERSION_ERROR</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_EXCEEDED">SCE_USBPSPCM_EXCEEDED</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_OWN">SCE_USBPSPCM_OWN</a><br>        <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_REGISTER">SCE_USBPSPCM_REGISTER</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceUsbPspcmBind"></a>
<table width="100%"><td width="70%"><font size=6>SceUsbPspcmBind<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Communication start request information<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usbpspcm.h&gt;
typedef struct SceUsbPspcmBind {
	SceSize <i>size</i>;
	int <i>addr</i>;
	SceUInt <i>*timeout</i>;
} <b>SceUsbPspcmBind</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>size</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Structure size&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>addr</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address of communication destination&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>timeout</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Timeout interval&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This structure is used as an argument of the <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BIND">SCE_USBPSPCM_BIND</a> of <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>(). <br><br>Be sure to specify the address of the communication destination for <i>addr</i> and assign sizeof(SceUsbPspcmBind) to <i>size</i>. <br>A timeout interval is established as a means of dealing with abnormal problems such as when the peer being communicated with hangs up. Although it depends on the situation, normally a timeout interval on the order of 2 or 3 seconds should be specified.<br>Also, an unlimited wait can be caused by assigning NULL for <i>timeout</i>.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BIND">SCE_USBPSPCM_BIND</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbStart"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbStart<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Plug in USB PSP&trade; communications driver<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usb.h&gt;
int <b>sceUsbStart</b>(
	const char <i>*name</i>,
	unsigned int <i>args,</i>
<i>	</i>const void <i>*argp</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_NAME">SCE_USBPSPCM_NAME</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>args</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size of data to pass to driver (at most 64 bytes)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Title check string&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, an error code defined in usb.h, or one defined in kerror.h or psperror.h is returned.<br><br>SCE_USB_ERROR_ALREADY, SCE_USB_ERROR_NOTAVAIL<br>SCE_USB_ERROR_NOENT, SCE_USB_ERROR_INPROGRESS<br>SCE_USB_ERROR_INVAL<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function plugs in the USB PSP&trade; communications driver.<br><br>It is an API provided by the USB bus driver. <br>For <i>argp</i>, specify a string of at most 64 bytes to be used for the title check.<br>The USB bus driver must be activated before the USB PSP&trade; communications driver is plugged in.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define USBPSPCM_TITLE "XXXXXX"

// Plug in USB PSP&trade; communications driver
if (sceUsbStart(<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_NAME">SCE_USBPSPCM_NAME</a>, sizeof(USBPSPCM_TITLE), USBPSPCM_TITLE) &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceUsbStop">sceUsbStop</a>()<br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_NAME">SCE_USBPSPCM_NAME</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbStop"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbStop<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Plug out USB PSP&trade; communications driver<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usb.h&gt;
int <b>sceUsbStop(</b>
	const char <i>*name</i>,
	unsigned int <i>args,</i>
	const void <i>*argp</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>name</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_NAME">SCE_USBPSPCM_NAME</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>args</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, an error code defined in usb.h, or one defined in kerror.h or psperror.h is returned.<br><br>SCE_USB_ERROR_ALREADY, SCE_USB_ERROR_NOTAVAIL<br>SCE_USB_ERROR_NOENT, SCE_USB_ERROR_INPROGRESS<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function plugs out the USB PSP&trade; communications driver.<br><br>It is an API provided by the USB bus driver. <br>The USB device must be deactivated by using the <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceUsbDeactivate">sceUsbDeactivate</a>() function before the USB PSP&trade; communications driver can be plugged out.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>// Plug out USB PSP&trade; communications driver
if (sceUsbStop(<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_NAME">SCE_USBPSPCM_NAME</a>, 0, NULL) &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceUsbStart">sceUsbStart</a>()<br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_NAME">SCE_USBPSPCM_NAME</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbActivate"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbActivate<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Activate USB device<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usb.h&gt;
int <b>sceUsbActivate</b>(
	unsigned int <i>idProduct</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>idProduct</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USB_PID_PSPCM">SCE_USB_PID_PSPCM</a> (product ID)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, an error code defined in usb.h, or one defined in kerror.h or psperror.h is returned.<br><br>SCE_USB_ERROR_ALREADY, SCE_USB_ERROR_NOENT, SCE_USB_ERROR_NOSPC<br>SCE_USB_ERROR_NOMEM, SCE_USB_ERROR_INPROGRESS<br>SCE_USB_ERROR_INVAL, SCE_USB_ERROR_NOTAVAIL<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function activates a USB device. <br><br>It is an API provided by the USB bus driver. <br>Before activating a USB device, call <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceUsbStart">sceUsbStart</a>() to start the USB bus driver and the USB PSP&trade; communications driver. <br>Until the device is activated, it is not recognized by the host even if the USB cable is connected.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>if (sceUsbActivate(<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USB_PID_PSPCM">SCE_USB_PID_PSPCM</a>) &lt; 0) {
	// Error handling
} else {
	printf("success to activate\n");
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceUsbDeactivate">sceUsbDeactivate</a>()<br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USB_PID_PSPCM">SCE_USB_PID_PSPCM</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceUsbDeactivate"></a>
<table width="100%"><td width="70%"><font size=6>sceUsbDeactivate<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Deactivate USB device<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;usb.h&gt;
int <b>sceUsbDeactivate</b>(
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, an error code defined in usb.h, or one defined in kerror.h or psperror.h is returned.<br><br>SCE_USB_ERROR_ALREADY, SCE_USB_ERROR_INPROGRESS<br>SCE_USB_ERROR_NOTAVAIL<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function deactivates a USB device. <br><br>It is an API provided by the USB bus driver. <br>From the perspective of the USB host, this is the same state as when the USB cable is removed. <br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>if (sceUsbDeactivate() &lt; 0) {
	// Error handling
} else {
	printf("success to deactivate\n");
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceUsbActivate">sceUsbActivate</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoDevctl"></a>
<table width="100%"><td width="70%"><font size=6>sceIoDevctl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Special operations on a device<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
#include &lt;usbpspcm.h&gt;
int <b>sceIoDevctl</b>(
	const char <i>*devname</i>,
	int <i>cmd</i>,
	const void <i>*argp</i>,
	SceSize <i>arglen</i>,
	void <i>*bufp</i>,
	SceSize <i>buflen</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Depends on Devctl command.<br>Refer to the explanation of each Devctl command.<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>devname</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device filename to be manipulated:  SCE_USBPSPCM_DEVNAME&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cmd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Devctl command. The following commands are available.&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_REGISTER">SCE_USBPSPCM_REGISTER</a>&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_UNREGISTER">SCE_USBPSPCM_UNREGISTER</a>&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_GET_OWN_ADDR">SCE_USBPSPCM_GET_OWN_ADDR</a>&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_GET_ADDR">SCE_USBPSPCM_GET_ADDR</a>&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BIND">SCE_USBPSPCM_BIND</a>&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_CANCEL_BIND">SCE_USBPSPCM_CANCEL_BIND</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Arguments assigned to command. Depends on Devctl command.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i> size (bytes)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Arguments received from command. Depends on Devctl command.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i> size (bytes)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Depends on Devctl command.<br>Refer to the explanation of each Devctl command.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs special operations on a device.<br>For details, refer to the explanation of each Devctl command.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_REGISTER">SCE_USBPSPCM_REGISTER</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_UNREGISTER">SCE_USBPSPCM_UNREGISTER</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_GET_OWN_ADDR">SCE_USBPSPCM_GET_OWN_ADDR</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_GET_ADDR">SCE_USBPSPCM_GET_ADDR</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BIND">SCE_USBPSPCM_BIND</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_CANCEL_BIND">SCE_USBPSPCM_CANCEL_BIND</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoOpen"></a>
<table width="100%"><td width="70%"><font size=6>sceIoOpen<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Start communications<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
#include &lt;usbpspcm.h&gt;
SceUID <b>sceIoOpen</b>(
	const char <i>*filename</i>,
	int <i>flag</i>,
	SceMode <i>mode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>filename</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device filename&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>flag</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;SCE_O_RDWR&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, a file descriptor (nonnegative value) is returned.<br>If an error occurs, an error code defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_ALREADY">SCE_USBPSPCM_ERROR_ALREADY</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOTAVAIL">SCE_USBPSPCM_ERROR_NOTAVAIL</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INPROGRESS">SCE_USBPSPCM_ERROR_INPROGRESS</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function opens the device file having the name received from the <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>() command <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BIND">SCE_USBPSPCM_BIND</a>, and places the PSP&trade; in a state in which it can communicate.<br>Be sure to specify the device filename that was received from <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BIND">SCE_USBPSPCM_BIND</a> for <i>filename</i>. Once it is closed, the same device file cannot be opened again. Start over by executing the <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BIND">SCE_USBPSPCM_BIND</a> command again.<br>Note that the same device file cannot be opened more than once at the same time.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>// Get device filename by using <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BIND">SCE_USBPSPCM_BIND</a> command
SceUChar devname[SCE_USBPSPCM_DEVNAME_LENGTH]; 
SceUID fd;

// Open device file
fd = sceIoOpen(devname, SCE_O_RDWR, 0);
if (fd &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BIND">SCE_USBPSPCM_BIND</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoRead"></a>
<table width="100%"><td width="70%"><font size=6>sceIoRead<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Receive data<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
#include &lt;usbpspcm.h&gt;
SceSSize <b>sceIoRead</b>(
	SceUID <i>fd,</i>
	void <i>*buf,</i>
	SceSize <i>nbyte</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;File descriptor for which data is to be received&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffer for storing received data&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nbyte</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size to be received (bytes)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, the size of the data that was received is returned.<br>If an error occurs, an error code defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOTAVAIL">SCE_USBPSPCM_ERROR_NOTAVAIL</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESETTING">SCE_USBPSPCM_ERROR_RESETTING</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESET_END">SCE_USBPSPCM_ERROR_RESET_END</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INPROGRESS">SCE_USBPSPCM_ERROR_INPROGRESS</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function receives data using the device file previously opened with the <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoOpen">sceIoOpen</a>() function. <br><br>Since cache invalidation is performed within the library, be sure that <i>buf</i> is aligned with 64-byte alignment.<br>
  When a reset is executed from the communication destination, if a Read, Write, or Ioctl function is executed during the reset processing, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESETTING">SCE_USBPSPCM_ERROR_RESETTING</a> is returned, and if any of those functions is executed after the reset processing ends, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESET_END">SCE_USBPSPCM_ERROR_RESET_END</a> is returned once.<br>
  When the communication destination terminated communications, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a> is returned until the device file is closed.<br><br>
  In normal mode (NORMAL), since the data for one write is handled as one chunk of data,  a Read will always end after the last data is read from a chunk of data. If the size of the remaining data in the chunk is the same as the <i>nbyte</i> argument, the next Read will end at 0 bytes. For this reason, an application will know when the last chunk of data has been received when the received data size represented by the return value is smaller than the <i>nbyte</i> argument. <br>
  If the Read mode is RD_SEQ, then even if the size of the remaining data in a chunk is the same as the <i>nbyte</i> argument, the next Read will not end at 0 bytes, and the data in the next chunk can be read immediately thereafter.<br> 
  <br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define BUF_SIZE    0x1000

SceUChar buf[BUF_SIZE] __attribute__ ((aligned (64)));  // 64-byte alignment
SceSSize len;

// Receive data
if ((len = sceIoRead(fd, buf, BUF_SIZE)) &lt; 0) {
	// Error handling
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoWrite"></a>
<table width="100%"><td width="70%"><font size=6>sceIoWrite<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Send data<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
#include &lt;usbpspcm.h&gt;
SceSSize <b>sceIoWrite</b>(
	SceUID <i>fd,</i>
	const void <i>*buf,</i>
	SceSize <i>nbyte</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;File descriptor for which data is to be sent&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffer where data to be sent was stored&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nbyte</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size to be sent (bytes)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, the size of the data that was sent is returned.<br>If an error occurs, an error code defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOTAVAIL">SCE_USBPSPCM_ERROR_NOTAVAIL</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESETTING">SCE_USBPSPCM_ERROR_RESETTING</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESET_END">SCE_USBPSPCM_ERROR_RESET_END</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INPROGRESS">SCE_USBPSPCM_ERROR_INPROGRESS</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sends data using the device file previously opened with the <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoOpen">sceIoOpen</a>() function. <br><br>Since cache write-back is performed within the library, be sure that <i>buf</i> is aligned with 64-byte alignment.<br>
  When a reset is executed from the communication destination, if a Read, Write, or Ioctl function is executed during the reset processing, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESETTING">SCE_USBPSPCM_ERROR_RESETTING</a> is returned, and if any of those functions is executed after the reset processing ends, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESET_END">SCE_USBPSPCM_ERROR_RESET_END</a> is returned once.<br>
  When the communication destination terminated communications, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a> is returned until the device file is closed.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define BUF_SIZE    0x1000

SceUChar buf[BUF_SIZE] __attribute__ ((aligned (64)));  // 64-byte alignment
SceSSize len;

// Send data
if ((len = sceIoWrite(fd, buf, BUF_SIZE)) &lt; 0) {
	// Error handling
}

</font></pre></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoIoctl"></a>
<table width="100%"><td width="70%"><font size=6>sceIoIoctl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Special operations on the communication channel<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
#include &lt;usbpspcm.h&gt;
int <b>sceIoIoctl</b>(
	SceUID <i>fd,</i>
<i>	</i>int <i>cmd,</i>
	const void <i>*argp,</i>
<i>	</i>SceSize <i>arglen</i>,
	void <i>*bufp</i>,
	SceSize <i>buflen</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Depends on Ioctl command.<br>Refer to the explanation of each Ioctl command.<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;File descriptor to be manipulated&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cmd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Ioctl command. The following commands can be used.&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RESET">SCE_USBPSPCM_RESET</a>&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_MODE">SCE_USBPSPCM_RDWR_MODE</a>&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_POLL_DATA">SCE_USBPSPCM_POLL_DATA</a>&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_WAIT_DATA">SCE_USBPSPCM_WAIT_DATA</a>&nbsp;&nbsp;<br>&nbsp;&nbsp;<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_CANCEL_WAIT_DATA">SCE_USBPSPCM_CANCEL_WAIT_DATA</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Arguments to be assigned to command. Depends on the Ioctl command.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i> size (bytes)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Arguments to be received from command. Depends on the Ioctl command.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i> size (bytes)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Depends on Ioctl command.<br>Refer to the explanation of each Ioctl command.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs special operations on a communication channel.<br>For details, refer to the explanation of each Ioctl command.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RESET">SCE_USBPSPCM_RESET</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_MODE">SCE_USBPSPCM_RDWR_MODE</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_POLL_DATA">SCE_USBPSPCM_POLL_DATA</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_WAIT_DATA">SCE_USBPSPCM_WAIT_DATA</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_CANCEL_WAIT_DATA">SCE_USBPSPCM_CANCEL_WAIT_DATA</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoClose"></a>
<table width="100%"><td width="70%"><font size=6>sceIoClose<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Terminate communications<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
#include &lt;usbpspcm.h&gt;
int <b>sceIoClose</b>(
	SceUID <i>fd</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;File descriptor for which communications are to be closed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, an error code defined in kerror.h or psperror.h is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function terminates communications which were started using <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoOpen">sceIoOpen</a>(). <br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>// Terminate communications
if (sceIoClose(fd) &lt; 0) {
	// Error handling
}
</font></pre></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_REGISTER"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_REGISTER<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Devctl Commands]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Register connection/disconnection processing thread<br></div><br>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to thread ID of connection/disconnection processing thread&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(SceUID)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the command completes normally, 0 is returned.<br>If an error occurs, an error code defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_ALREADY">SCE_USBPSPCM_ERROR_ALREADY</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INPROGRESS">SCE_USBPSPCM_ERROR_INPROGRESS</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This command registers the connection/disconnection processing thread.<br>Only one thread ID can be registered. If a thread is already registered, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_ALREADY">SCE_USBPSPCM_ERROR_ALREADY</a> is returned.<br><br>When a PSP&trade; is connected/disconnected, a registered thread is started up, and a <a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmConnect">SceUsbPspcmConnect</a> structure is passed as an argument of that thread. The <i>addr</i> member of the structure indicates the address of the PSP&trade; that was connected or disconnected, and the <i>stat</i> member indicates the connection/disconnection state. If the <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_OWN">SCE_USBPSPCM_OWN</a> bit of the <i>stat</i> member is set, this indicates the connection or disconnection of the PSP&trade; itself.<br>If the USB cable is already connected when the thread ID is registered, first the fact that the PSP&trade; itself is connected is reported, and then if another PSP&trade; is connected, that connection is reported. Note that since a connection with another PSP&trade; is always disconnected when the PSP&trade; itself is disconnected, only the disconnection of the PSP&trade; itself is reported, and the disconnection of another PSP&trade; is not reported.<br><br>The next connection/disconnection is not reported until the connection/disconnection processing thread is terminated. As a result, make sure that no function that enters a wait state, or processing that takes an extremely long time, is performed within this thread.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>// Connection/disconnection processing thread
int connection_detect_thread(SceSize argsize, void *arg)
{
	<a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmConnect">SceUsbPspcmConnect</a> *conn;

	conn = (<a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmConnect">SceUsbPspcmConnect</a> *)arg;

	if (conn-&gt;stat &amp; <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_OWN">SCE_USBPSPCM_OWN</a>) {
		// When PSP&trade; itself is connected/disconnected
		if (conn-&gt;stat &amp; <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_CONNECTED">SCE_USBPSPCM_CONNECTED</a>) {
			int addr = conn-&gt;addr;  // Own address
			// Processing when PSP&trade; itself was connected
		} else if (conn-&gt;stat &amp; <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_DISCONNECTED">SCE_USBPSPCM_DISCONNECTED</a>) {
			// Processing when PSP&trade; itself was disconnected
		} else if (conn-&gt;stat &amp; <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_INVAL_TITLE">SCE_USBPSPCM_INVAL_TITLE</a>) {
			// Processing when title check failed
		} else if (conn-&gt;stat &amp; <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BUSY">SCE_USBPSPCM_BUSY</a>) {
			// Processing when USB host is busy
		} else if (conn-&gt;stat &amp; <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_WAIT">SCE_USBPSPCM_WAIT</a>) {
			// When waiting for title check
		} else if (conn-&gt;stat &amp; <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_VERSION_ERROR">SCE_USBPSPCM_VERSION_ERROR</a>) {
			// When the library versions do not match

		} else {
			// When too many PSP&trade; devices are connnected
		}
	} else {
		// When another PSP&trade; is connected/disconnected
		int addr = conn-&gt;addr;  // Address of connected/disconnected PSP&trade;
		if (conn-&gt;stat &amp; SCE_USB_CONNECTED) {
			// Processing when other PSP&trade; was connected
		} else {
			// Processing when other PSP&trade; was disconnected
		}
	}

	
}

...

	SceUID thid;
	int ret;

	// Generate thread for executing connection/disconnection processing functions
	thid = <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelCreateThread">sceKernelCreateThread</a>("ConnectionDetect", connection_detect_thread,
				     SCE_KERNEL_MODULE_INIT_PRIORITY, 0x1000,
				     SCE_KERNEL_TH_CLEAR_STACK, NULL);
	if (thid &lt; 0) {
		// Error handling
	}

	// Register generated thread ID
	ret = <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>(SCE_USBPSPCM_DEVNAME, 
	SCE_USBPSPCM_REGISTER,
			  &amp;thid, sizeof(SceUID), NULL, 0);
	if (ret &lt; 0) {
		// Error handling
	}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmConnect">SceUsbPspcmConnect</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>()<br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_UNREGISTER">SCE_USBPSPCM_UNREGISTER</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_UNREGISTER"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_UNREGISTER<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Devctl Commands]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Unregister connection/disconnection processing thread<br></div><br>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to thread ID of registered connection/disconnection reporting thread&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(SceUID)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the command completes normally, 0 is returned.<br>If an error occurs, an error code defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOENT">SCE_USBPSPCM_ERROR_NOENT</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INPROGRESS">SCE_USBPSPCM_ERROR_INPROGRESS</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This command cancels the registration of a connection/disconnection processing thread.<br><br>If the thread ID specified by the argument <i>argp</i> differs from the registered thread ID, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a> is returned.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>SceUID thid;    // Registered thread ID
int ret;

// Cancel thread registration
ret = <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>(SCE_USBPSPCM_DEVNAME, SCE_USBPSPCM_UNREGISTER,
		    &amp;thid, sizeof(SceUID), NULL, 0);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>()<br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_REGISTER">SCE_USBPSPCM_REGISTER</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_GET_OWN_ADDR"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_GET_OWN_ADDR<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Devctl Commands]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get own address<br></div><br>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the command completes normally, the PSP&trade; device's own address (nonnegative value) is returned.<br>If an error occurs, the following error code is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOTAVAIL">SCE_USBPSPCM_ERROR_NOTAVAIL</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The PSP&trade; device's own address is returned by this command as the return value of the <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>() function.<br><br>If the PSP&trade; itself is not connected, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOTAVAIL">SCE_USBPSPCM_ERROR_NOTAVAIL</a> is returned.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int addr;

addr = <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>(SCE_USBPSPCM_DEVNAME, SCE_USBPSPCM_GET_OWN_ADDR,
		     NULL, 0, NULL, 0);
if (addr &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_GET_ADDR"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_GET_ADDR<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Devctl Commands]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get addresses of all connected PSP&trade; devices<br></div><br>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to SceUInt type variable for storing addresses&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(SceUInt)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the function completes normally, 0 is returned.<br>If an error occurs, the following error code is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOTAVAIL">SCE_USBPSPCM_ERROR_NOTAVAIL</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This command gets the addresses of all connected PSP&trade; devices in bitmap format.<br><br>If the nth bit is set, it indicates that the PSP&trade; with address n is connected.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>SceUInt bm_addr;
int ret;

ret = <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>(SCE_USBPSPCM_DEVNAME, SCE_USBPSPCM_GET_ADDR,
		     NULL, 0, &amp;bm_addr, sizeof(SceUInt));
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_BIND"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_BIND<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Devctl Commands]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Issue communications initiation request<br></div><br>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to <a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmBind">SceUsbPspcmBind</a> structure&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(<a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmBind">SceUsbPspcmBind</a>)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffer where device filename having assigned unit number is to be copied&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Value greater than or equal to SCE_USBPSPCM_DEVNAME_LENGTH&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the command completes normally, 0 is returned.<br>If an error occurs, an error code defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOTAVAIL">SCE_USBPSPCM_ERROR_NOTAVAIL</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INPROGRESS">SCE_USBPSPCM_ERROR_INPROGRESS</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOENT">SCE_USBPSPCM_ERROR_NOENT</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_TIMEOUT">SCE_USBPSPCM_ERROR_TIMEOUT</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CANCELED">SCE_USBPSPCM_ERROR_CANCELED</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOSPC">SCE_USBPSPCM_ERROR_NOSPC</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This command issues a communications initiation request for communications with the address specified by the <i>addr</i> member of the <a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmBind">SceUsbPspcmBind</a> structure. <br><br>Be sure to assign sizeof(<a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmBind">SceUsbPspcmBind</a>) to the <i>size</i> member of the structure in advance. Also, if NULL is specified for the <i>timeout</i> member of the structure, an indefinite wait occurs.<br>If the communications initiations request is successful, the device filename having the assigned unit number is copied to the buffer specified for the argument <i>bufp</i>. Since the maximum length of a copied device filename is SCE_USBPSPCM_DEVNAME_LENGTH, be sure to specify a buffer having at least this length for the argument <i>bufp</i>.<br>Multiple initiation requests cannot be issued at the same time for the same address. To establish multiple communication channels for the same address, first verify that the previous initiation request was successful before issuing the next initiation request.<br>If the unit number does not have free space, the <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOSPC">SCE_USBPSPCM_ERROR_NOSPC</a> error is returned.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>#define BIND_TIMEOUT   3000000  // 3 seconds

<a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmBind">SceUsbPspcmBind</a> bind;
SceUChar devname[SCE_USBPSPCM_DEVNAME_LENGTH];
SceUInt timeout = BIND_TIMEOUT;
int ret;

bind.size    = sizeof(<a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmBind">SceUsbPspcmBind</a>);
bind.addr    = 1;                          // Communication destination address
bind.timeout = &amp;timeout;

// Issue communications initiation request
ret = <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>(SCE_USBPSPCM_DEVNAME, SCE_USBPSPCM_BIND,
		    &amp;bind, sizeof(bind), devname, sizeof(devname));
if (ret == <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_TIMEOUT">SCE_USBPSPCM_ERROR_TIMEOUT</a>) {
	// Processing when timeout occurs
} else if (ret == <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CANCELED">SCE_USBPSPCM_ERROR_CANCELED</a>) {
	// Processing when cancellation occurs
} else if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#SceUsbPspcmBind">SceUsbPspcmBind</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>()<br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_CANCEL_BIND">SCE_USBPSPCM_CANCEL_BIND</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_CANCEL_BIND"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_CANCEL_BIND<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Devctl Commands]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cancel communications initiation request<br></div><br>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to int type variable where address for which communications initiation request is to be canceled has been stored&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(int)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the command completes normally, 0 is returned.<br>If an error occurs, an error code defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOTAVAIL">SCE_USBPSPCM_ERROR_NOTAVAIL</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOENT">SCE_USBPSPCM_ERROR_NOENT</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This command cancels the communications initiation request of the specified address.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int addr = 1;       // Address for which communications initiation request is to 
be canceled

// Cancel communications initiation request
ret = <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>(SCE_USBPSPCM_DEVNAME, SCE_USBPSPCM_CANCEL_BIND,
		    &amp;addr, sizeof(int), NULL, 0);
if (ret &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>()<br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_BIND">SCE_USBPSPCM_BIND</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_RESET"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_RESET<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Ioctl Commands]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Rest communication channel<br></div><br>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the command completes normally, 0 is returned.<br>If an error occurs, an error code defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INPROGRESS">SCE_USBPSPCM_ERROR_INPROGRESS</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_NOTAVAIL">SCE_USBPSPCM_ERROR_NOTAVAIL</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This command resets the communication channel without terminating communications which were started using <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoOpen">sceIoOpen</a>(). <br><br>The function waits until the reset is completed.<br>When the communication destination has terminated communications, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a> is returned until the device file is closed.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>// Reset communication channel
if (<a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(fd, SCE_USBPSPCM_RESET, NULL, 0, NULL, 0) &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoOpen">sceIoOpen</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoRead">sceIoRead</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoWrite">sceIoWrite</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoClose">sceIoClose</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_RDWR_MODE"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_RDWR_MODE<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Ioctl Commands]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set Read/Write mode<br></div><br>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to SceUInt type variable for indicating the <a href="../peripheral/USB_PSPComm-Reference-English.htm#Read">Read</a>/<a href="../peripheral/USB_PSPComm-Reference-English.htm#Write Mode">Write Mode</a>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(SceUInt)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If the command completes normally, 0 is returned.<br>If an error occurs, an error code defined in kerror.h or psperror.h is returned.<br><br>SCE_USBPSPCM_ERROR_IN PROGRESS, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This command sets the <a href="../peripheral/USB_PSPComm-Reference-English.htm#Read">Read</a>/<a href="../peripheral/USB_PSPComm-Reference-English.htm#Write Mode">Write Mode</a> for the <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoRead">sceIoRead</a>() and <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoWrite">sceIoWrite</a>() functions. <br><br>The following four values can be specified for the read/write mode.<br></div>
</ul>
<div style="margin-left:60px;"><ul>
<li> <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_NORMAL">SCE_USBPSPCM_RDWR_NORMAL</a>
<li> <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_RD_SEQ">SCE_USBPSPCM_RDWR_RD_SEQ</a>
<li> <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_WR_SEQ">SCE_USBPSPCM_RDWR_WR_SEQ</a>
<li> <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_RD_SEQ">SCE_USBPSPCM_RDWR_RD_SEQ</a> | <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_WR_SEQ">SCE_USBPSPCM_RDWR_WR_SEQ</a>
</ul></div>
<div style="margin-left:50px;"><br>By default, the mode is set to normal (<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_NORMAL">SCE_USBPSPCM_RDWR_NORMAL</a>). In this mode, a single write's worth of data is treated as a single chunk of data, so a read will end when the reading of a chunk of data has ended. If the size of the remaining data in the chunk is the same as the <i>nbyte</i> argument of the <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoRead">sceIoRead</a>() function, the next Read will end at 0 bytes. In the receiving application, the reception of a single chunk of data can be deemed to have ended when the received data size represented by the return value is smaller than the value specified in the <i>nbyte</i> argument of the <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoRead">sceIoRead</a>() function. For this reason, the end of a chunk of data can be known with certainty even if the data size being sent is not known. <br>
<br>In RD_SEQ mode (<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_RD_SEQ">SCE_USBPSPCM_RDWR_RD_SEQ</a>), even if the size of the remaining data in a chunk is not the same as the value of the <i>nbyte</i> argument of the <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoRead">sceIoRead</a>() function, the next Read will not end at 0 bytes, and the data in the next chunk can be read immediately thereafter. <br>If the maximum size of the data to be received is known in advance, then the fact that the data for the chunk has ended will be known even if the size of the remaining data in a chunk is the same as the value of the <i>nbyte</i> argument of the <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoRead">sceIoRead</a>() function. In such cases, a superfluous 0-byte Read can be eliminated by setting the mode to RD_REQ mode. <br>
<br>In WR_SEQ mode (<a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_WR_SEQ">SCE_USBPSPCM_RDWR_WR_SEQ</a>), a chunk of data is divided into multiple writes and then sent. Use this mode when handling large amounts of data as a single chunk. <br>In this mode, as long as the size of a single write is an integer multiple of 4K bytes, the library will deem that the chunk of data has not yet ended, and that there is more data to come. For this reason, in the sending application, be sure that the size of a single write is an integer multiple of 4K bytes. <br>Also, when writing just the last chunk of data, return to normal mode before performing the final write. In WR_SEQ mode, if by chance the size of the last write is an integer multiple of 4K bytes, the library will assume that there is more data, and the receiving end will no longer be able to correctly determine the end of the chunk of data. <br><br>When the communication counterpart has finished communicating, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a> is returned until the device file is closed.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>SceUInt mode = <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_RDWR_RD_SEQ">SCE_USBPSPCM_RDWR_RD_SEQ</a>;

// Change <a href="../peripheral/USB_PSPComm-Reference-English.htm#Read">Read</a> mode
if (<a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(fd, SCE_USBPSPCM_RDWR_MODE, &amp;mode, sizeof(SceUInt), NULL, 0) &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoOpen">sceIoOpen</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoRead">sceIoRead</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoWrite">sceIoWrite</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoClose">sceIoClose</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_POLL_DATA"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_POLL_DATA<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Ioctl Commands]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Check if received data is present<br></div><br>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns 0 if data was received, or 1 if it was not. <br>If an error occurs, one of the following error codes, or an error code defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESETTING">SCE_USBPSPCM_ERROR_RESETTING</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESET_END">SCE_USBPSPCM_ERROR_RESET_END</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This command checks whether or not received read data is present in the buffer in the library. <br><br>If reset is performed by the communication counterpart, the function will return <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESETTING">SCE_USBPSPCM_ERROR_RESETTING</a> during the reset, and will return <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESET_END">SCE_USBPSPCM_ERROR_RESET_END</a> one time only to Read, Write, or Ioctl after the reset. <br>
When the communication counterpart has finished communicating, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a> is returned until the device file is closed.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret

// Check if data was received
if ((ret = <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(fd, SCE_USBPSPCM_POLL_DATA, NULL, 0, NULL, 0)) &lt; 0) {
	// Error handling
} else if (ret) {
	printf("No data\n");
} else {
	printf("Data exists\n");
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoOpen">sceIoOpen</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoRead">sceIoRead</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoWrite">sceIoWrite</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoClose">sceIoClose</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_WAIT_DATA"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_WAIT_DATA<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Ioctl Commands]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Wait for data to be received<br></div><br>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to SceUInt-format variable representing the time-out time&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(SceUInt)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns 0 upon successful completion. <br>If an error occurs, one of the following error codes, or an error code defined in kerror.h or psperror.h is returned.<br><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CANCELED">SCE_USBPSPCM_ERROR_CANCELED</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_TIMEOUT">SCE_USBPSPCM_ERROR_TIMEOUT</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INPROGRESS">SCE_USBPSPCM_ERROR_INPROGRESS</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESETTING">SCE_USBPSPCM_ERROR_RESETTING</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESET_END">SCE_USBPSPCM_ERROR_RESET_END</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a><br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This command enters a wait state until received data is received. <br><br>It will wait indefinitely if NULL is specified for <i>argp</i>. <br>If reset is performed by the communication counterpart, the function will return <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESETTING">SCE_USBPSPCM_ERROR_RESETTING</a> during the reset, and will return <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESET_END">SCE_USBPSPCM_ERROR_RESET_END</a> one time only to Read, Write, or Ioctl after the reset. <br>
When the communication counterpart has finished communicating, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a> is returned until the device file is closed.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>SceUInt timeout = 3 * 1000 * 1000; /* 3sec */
int ret

// Wait for data to be received
if ((ret = <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(fd, SCE_USBPSPCM_WAIT_DATA,
 &amp;timeout, sizeof(timeout), NULL, 0)) &lt; 0) {
	// Error handling
}
printf(&quot;Data exists\n&quot;);

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoOpen">sceIoOpen</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoRead">sceIoRead</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoWrite">sceIoWrite</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoClose">sceIoClose</a>()<br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_CANCEL_WAIT_DATA">SCE_USBPSPCM_CANCEL_WAIT_DATA</a><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_USBPSPCM_CANCEL_WAIT_DATA"></a>
<table width="100%"><td width="70%"><font size=6>SCE_USBPSPCM_CANCEL_WAIT_DATA<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Ioctl Commands]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Cancel wait for received data<br></div><br>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Returns 0 upon successful completion. <br>If an error occurs, one of the following error codes, or an error code defined in kerror.h or psperror.h is returned.<br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESETTING">SCE_USBPSPCM_ERROR_RESETTING</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESET_END">SCE_USBPSPCM_ERROR_RESET_END</a> <br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a>, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a><br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This command cancels the wait state of the <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>() <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_WAIT_DATA">SCE_USBPSPCM_WAIT_DATA</a> command,<br><br>If reset is performed by the communication counterpart, the function will return <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESETTING">SCE_USBPSPCM_ERROR_RESETTING</a> during the reset, and will return <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_RESET_END">SCE_USBPSPCM_ERROR_RESET_END</a> one time only to Read, Write, or Ioctl after the reset. <br>
When the communication counterpart has finished communicating, <a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a> is returned until the device file is closed.<br><br></div>

<!-- Example -->
<div style="margin-left:10px;"><b>Example</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
        <div style="margin-left:50px;"><pre><font size=3>int ret

// Cancel received data wait
if ((ret = <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(fd, SCE_USBPSPCM_CANCEL_WAIT_DATA,
 NULL, 0, NULL, 0)) &lt; 0) {
	// Error handling
}

</font></pre></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoOpen">sceIoOpen</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoRead">sceIoRead</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoWrite">sceIoWrite</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(), <a href="../peripheral/USB_PSPComm-Reference-English.htm#sceIoClose">sceIoClose</a>()<br><a href="../peripheral/USB_PSPComm-Reference-English.htm#SCE_USBPSPCM_WAIT_DATA">SCE_USBPSPCM_WAIT_DATA</a><br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="List of Error Codes"></a>
<table width="100%"><td width="70%"><font size=6>List of Error Codes<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Error Codes]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Error codes returned by the USB PSP&trade; communications library<br></div><br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Explanation</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_ERROR_ALREADY">SCE_USBPSPCM_ERROR_ALREADY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243401&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Already being processed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_ERROR_INVAL">SCE_USBPSPCM_ERROR_INVAL</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243402&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Argument is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_ERROR_NOSPC">SCE_USBPSPCM_ERROR_NOSPC</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243403&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unit number is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_ERROR_NOENT">SCE_USBPSPCM_ERROR_NOENT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243405&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Specified target is not found&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_ERROR_INPROGRESS">SCE_USBPSPCM_ERROR_INPROGRESS</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243406&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Processing is currently in progress&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_ERROR_NOTAVAIL">SCE_USBPSPCM_ERROR_NOTAVAIL</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243407&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Not currently available&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_ERROR_TIMEOUT">SCE_USBPSPCM_ERROR_TIMEOUT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243408&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Timeout occurred&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_ERROR_CANCELED">SCE_USBPSPCM_ERROR_CANCELED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80243409&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Cancellation occurred&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_ERROR_RESETTING">SCE_USBPSPCM_ERROR_RESETTING</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8024340A&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Resetting&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_ERROR_RESET_END">SCE_USBPSPCM_ERROR_RESET_END</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8024340B&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Reset ended&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_USBPSPCM_ERROR_CLOSED">SCE_USBPSPCM_ERROR_CLOSED</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8024340C&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Communications terminated&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<p><p><hr>
<div ALIGN="right">
    &copy;2007 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
