<html lang="en">
<head>
<title>Display-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
Display Service Reference
</h1></center>
</a>
<!-- sce_hd1 -->
<div style="margin-left:50px;"><br></div>
<div style="margin-left:50px;"><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_DISPLAY_MODE_LCD"></a>
<table width="100%"><td width="70%"><font size=6>SCE_DISPLAY_MODE_LCD<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>LCD output mode constant<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
#define  SCE_DISPLAY_MODE_LCD		0

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the LCD output mode. <br><br>Specify it when using <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetMode">sceDisplaySetMode</a>() to output to the LCD display of the PSP&trade;. <br>The maximum display area for LCD output is 480 (W) x 272 (H) pixels. The vertical synchronization frequency is approximately 59.94005995 Hz (theoretical value).<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplaySetMode">sceDisplaySetMode</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_DISPLAY_MODE_VESA1A"></a>
<table width="100%"><td width="70%"><font size=6>SCE_DISPLAY_MODE_VESA1A<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>VESA1A (VGA) output mode constant<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
#define  SCE_DISPLAY_MODE_VESA1A		0x1A

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the VESA1A (VGA) output mode.<br><br>Specify it when using <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetMode">sceDisplaySetMode</a>() to output video as VESA1A (VGA) from the PSP&trade; development TOOL. It cannot be used with an actual PSP&trade; device.<br>The maximum display area for VESA1A (VGA) output is 640 (W) x 480 (H) pixels. The vertical synchronization frequency is approximately 59.94047618Hz (theoretical value). This is different from that for LCD output mode.<br><br>The differences between SCE_DISPLAY_MODE_VESA1A and <a href="../peripheral/Display-Reference-English.htm#SCE_DISPLAY_MODE_PSEUDO_VGA">SCE_DISPLAY_MODE_PSEUDO_VGA</a> are in the vertical sync frequency and the pixel dot clock. SCE_DISPLAY_MODE_VESA1A enables you to output using the VESA1A dot clock, so the pixel format is the same as that for normal VGA, but the vertical sync frequency is different from that during LCD output. <br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplaySetMode">sceDisplaySetMode</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_DISPLAY_MODE_PSEUDO_VGA"></a>
<table width="100%"><td width="70%"><font size=6>SCE_DISPLAY_MODE_PSEUDO_VGA<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Pseudo-VGA output mode constant<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
#define  SCE_DISPLAY_MODE_PSEUDO_VGA		0x60

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents the LCD output mode. <br><br>Specify it when using <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetMode">sceDisplaySetMode</a>() to output video as pseudo-VGA from the PSP&trade; development tool. This cannot be used on an actual PSP&trade;. <br>The maximum display area for pseudo VGA output is 640 (W) x 480 (H) pixels. The vertical synchronization frequency is approximately 59.94005995Hz (theoretical value), which is the same as that for LCD output mode.<br><br>SCE_DISPLAY_MODE_PSEUDO_VGA differs from <a href="../peripheral/Display-Reference-English.htm#SCE_DISPLAY_MODE_VESA1A">SCE_DISPLAY_MODE_VESA1A</a> in terms of the vertical sync frequency and the pixel dot clock.<br>With SCE_DISPLAY_PSEUDO_VGA, the dot clock does not conform to that of VESA1A, but it does use the same vertical sync frequency as that of LCD output.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplaySetMode">sceDisplaySetMode</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_DISPLAY_PIXEL_RGB565"></a>
<table width="100%"><td width="70%"><font size=6>SCE_DISPLAY_PIXEL_RGB565<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>RGB565 16-bit color output mode constant<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
#define  SCE_DISPLAY_PIXEL_RGB565		0

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents output in the R:G:B=5:6:5 pixel format. <br><br>Specify it using <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>() when performing display output of graphics drawn in the R:G:B=5:6:5 pixel format. <br>R,G,B bit assignments in the pixel data are as follows.<br><br></div>

<div style="margin-left:50px;">
<p>
<img src="gif/Display-Reference-English001.gif">
</div>
<div style="margin-left:50px;"><br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_DISPLAY_PIXEL_RGBA5551"></a>
<table width="100%"><td width="70%"><font size=6>SCE_DISPLAY_PIXEL_RGBA5551<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>RGBA5551 16-color output mode constant<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
#define  SCE_DISPLAY_PIXEL_RGBA5551		1

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents output in the R:G:B:A=5:5:5:1 pixel format. <br><br>Specify it using <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>() when performing display output of graphics drawn in the R:G:B:A=5:5:5:1 pixel format. <br>R,G,B,A bit assignments in the pixel data are as follows.<br><br></div>

<div style="margin-left:50px;">
<p>
<img src="gif/Display-Reference-English002.gif">
</div>
<div style="margin-left:50px;"><br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_DISPLAY_PIXEL_RGBA4444"></a>
<table width="100%"><td width="70%"><font size=6>SCE_DISPLAY_PIXEL_RGBA4444<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>RGBA4444 16-bit color output mode constant<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
#define  SCE_DISPLAY_PIXEL_RGBA4444		2

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents output in the R:G:B:A=4:4:4:4 pixel format. <br><br>Specify it using <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>() when performing display output of graphics drawn in the R:G:B:A=4:4:4:4 pixel format. <br>R,G,B,A bit assignments in the pixel data are as follows.<br><br></div>

<div style="margin-left:50px;">
<p>
<img src="gif/Display-Reference-English003.gif">
</div>
<div style="margin-left:50px;"><br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SCE_DISPLAY_PIXEL_RGBA8888"></a>
<table width="100%"><td width="70%"><font size=6>SCE_DISPLAY_PIXEL_RGBA8888<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Constant Definitions]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>RGBA8888 32-bit color output mode constant<br></div><br>

<!-- Definition -->
<div style="margin-left:10px;"><b>Definition</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
#define  SCE_DISPLAY_PIXEL_RGBA8888		3

</font></pre></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This constant represents output in the R:G:B:A=8:8:8:8 pixel format. <br><br>Specify it using <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>() when performing display output of graphics drawn in the R:G:B:A=8:8:8:8 pixel format. <br>R,G,B,A bit assignments in the pixel data are as follows.<br><br></div>

<div style="margin-left:50px;">
<p>
<img src="gif/Display-Reference-English004.gif">
</div>
<div style="margin-left:50px;"><br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplaySetMode"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplaySetMode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set LCD controller mode<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplaySetMode</b> (
	int <i>iMode</i>,
	int <i>iDisplayWidth</i>,
	int <i>iDisplayHeight</i>,
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iMode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Screen mode&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iDisplayWidth</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Screen display width in pixels&nbsp;&nbsp;<br>&nbsp;&nbsp;(The number of pixels must be a multiple of 8.)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iDisplayHeight</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Screen display height in lines&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;"><b>Values which Can Be Specified for <i>iMode</i></b><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Meaning</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Display-Reference-English.htm#SCE_DISPLAY_MODE_LCD">SCE_DISPLAY_MODE_LCD</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;LCD output mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Display-Reference-English.htm#SCE_DISPLAY_MODE_VESA1A">SCE_DISPLAY_MODE_VESA1A</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;VESA1A (VGA) output mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Display-Reference-English.htm#SCE_DISPLAY_MODE_PSEUDO_VGA">SCE_DISPLAY_MODE_PSEUDO_VGA</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pseudo-VGA output mode&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Success&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_INVALID_MODE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid screen mode <i>mode</i> &nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_INVALID_SIZE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid frame buffer size <i>iWidth</i>, <i>iHeight</i>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_INVALID_FORMAT&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid pixel format <i>iPixelFormat</i>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_CPUDI&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The function was called when the CPU was in an interrupt-disabled state&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt; 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Other error&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the screen mode for the LCD controller.<br><br>Screen mode switching must be performed quickly during VBLANK. If the screen mode is to be switched outside of the VBLANK interval or when VBLANK terminates, execution is delayed until the start of the next VBLANK. At this time, the sceDisplaySetMode() function blocks for approximately 1V.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplayGetMode">sceDisplayGetMode</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplayGetMode"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplayGetMode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get LCD controller mode<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplayGetMode</b> (
	int *<i>piMode</i>,
	int *<i>piDisplayWidth</i>,
	int *<i>piDisplayHeight</i>,
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or -disabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>piMode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to variable of type int for receiving the screen mode&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>piDisplayWidth</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to variable of type int for receiving the display width in pixels&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>piDisplayHeight</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to variable of type int for receiving the display height in lines&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Success&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt; 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Error&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function gets the current screen mode.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplaySetMode">sceDisplaySetMode</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplayGetFramePerSec"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplayGetFramePerSec<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of frames per second<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
float <b>sceDisplayGetFramePerSec</b> (
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or -disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">The number of frames per second for the current screen mode is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function obtains the theoretical number of frames per second in the current screen mode.<br>Note that this function returns a theoretical value, and that some error may be present relative to the actual time.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplaySetFrameBuf"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplaySetFrameBuf<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Update frame buffer base address<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplaySetFrameBuf</b> (
	const void *<i>pFrameBuf</i>,
	int <i>iFrameWidth</i>,
	int <i>iPixelFormat,</i>
	int <i>iMode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or -disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>pFrameBuf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Start address of frame buffer (if NULL, output black)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iFrameWidth</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Horizontal pixel count of frame buffer&nbsp;&nbsp;<br>&nbsp;&nbsp;(Multiple of 64. Specify 0 if <i>pFrameBuf</i> is NULL.)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iPixelFormat</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pixel format of frame buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iMode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Specification of frame buffer start address update timing&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;"><b>Values which Can Be Specified for <i>iPixelFormat</i></b><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Meaning</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Display-Reference-English.htm#SCE_DISPLAY_PIXEL_RGBA8888">SCE_DISPLAY_PIXEL_RGBA8888</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;32-bit color (R:G:B:A=8:8:8:8)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Display-Reference-English.htm#SCE_DISPLAY_PIXEL_RGB565">SCE_DISPLAY_PIXEL_RGB565</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;16-bit color (R:G:B=5:6:5)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Display-Reference-English.htm#SCE_DISPLAY_PIXEL_RGBA5551">SCE_DISPLAY_PIXEL_RGBA5551</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;16-bit color (R:G:B:A=5:5:5:1)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/Display-Reference-English.htm#SCE_DISPLAY_PIXEL_RGBA4444">SCE_DISPLAY_PIXEL_RGBA4444</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;16-bit color (R:G:B:A=4:4:4:4)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;"><b>Values which Can Be Specified for <i>iMode</i></b><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Meaning</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_DISPLAY_UPDATETIMING_NEXTHSYNC&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Update upon next HSYNC&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_DISPLAY_UPDATETIMING_NEXTVSYNC&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Update during next VBLANK interval&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Success&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_INVALID_MODE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The <i>iMode</i> argument, which specifies the update timing, is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_INVALID_POINTER&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The <i>pFrameBuf</i> argument, which specifies the base address of the frame buffer, is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_INVALID_SIZE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;A multiple of 64 is [not] specified for the <i>iFrameWidth</i> argument, or 0 is not specified for the <i>iFrameWidth</i> argument even though NULL is specified for the <i>pFrameBuf</i> argument.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Other error&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the base address (upper-left coordinate),width, and pixel format of the frame buffer to be displayed on the LCD.<br><br>When either the width or pixel format of the frame buffer is changed, the update cannot be performed immediately. Be sure to specify that switching be performed during the next VBLANK interval by setting the <i>iMode</i> argument to SCE_DISPLAY_UPDATETIMING_NEXTVSYNC.<br><br>When NULL is set for the <i>pFrameBuf</i> argument, the output is blacked out. At this time, 0 should be specified for the <i>iFrameWidth</i> argument.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplayGetFrameBuf">sceDisplayGetFrameBuf</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplayGetFrameBuf"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplayGetFrameBuf<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get frame buffer base address<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplayGetFrameBuf</b> (
	const void **<i>ppFrameBuf</i>,
	int *<i>piFrameWidth</i>,
	int *<i>piPixelFormat,</i>
	int <i>iMode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or -disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>ppFrameBuf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to variable of type const void * for receiving frame buffer address&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>piFrameWidth</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to variable of type int for receiving the frame buffer width in pixels&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>piPixelFormat</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Pointer to variable of type int for receiving the pixel format of the frame buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iMode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Specifies the address to be obtained by <i>ppFrameBuf</i>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<div style="margin-left:50px;"><b>Values which Can Be Specified for <i>iMode</i></b><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Meaning</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address of frame buffer currently being displayed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address of frame buffer which has been arranged to be flipped at the next VSYNC&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Success&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_ERROR_INVALID_MODE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Invalid update timing specification <i>mode</i>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt; 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Other error&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function returns the base address (upper left coordinate),width, and pixel format of the frame buffer being displayed on the LCD.<br><br>If 1 is specified for the <i>iMode</i> argument, the frame buffer address can be acquired when updating is reserved during the next VSYNC interval by using the <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>() function. If reserved flipping is performed due to a VSYNC interrupt after the <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>() function is executed, the same value as for the frame buffer that is currently being displayed is returned as long as updating of the new frame buffer is not reserved again.<br>If 0 is specified for the <i>iMode</i> argument, the address of the frame buffer which is currently being displayed can be obtained at any time.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplayIsForeground"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplayIsForeground<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get the frame buffer display state<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplayIsForeground</b> (
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-disabled or -enabled state)<br>Mutithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Frame buffer is being displayed&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Frame buffer is not being displayed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function obtains the display state of the frame buffer specified by the <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>() function. <br><br>This function returns 1 when it is displayed.If NULL was specified as the frame buffer addess in the <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>() function, 0 will be returned for the sceDisplayIsForeground() function since the output will be blacked out. Also, when the system is displaying a screen that takes precedence over the frame buffer that was set by the <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>() function, 0 will be returned. Specifications that use the sceDisplayIsForeground() function to detect a priority display by the system and use that information to change the operation of a game are not recommended.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplaySetFrameBuf">sceDisplaySetFrameBuf</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplaySetHoldMode"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplaySetHoldMode<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set frame buffer hold mode during reboot<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplaySetHoldMode</b> (
	int <i>iMode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in interrupt-enabled state)<br>Not multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iMode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Mode for holding frame buffer during reboot&nbsp;&nbsp;<br>&nbsp;&nbsp;0 = black out during reboot (default)&nbsp;&nbsp;<br>&nbsp;&nbsp;1 = hold currently displayed frame buffer during reboot&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return value -->
<div style="margin-left:10px;"><b>Return value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If an error occurs, a negative value is returned.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Success&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function specifies whether or not, when <a href="../kernel/Loadexec-Reference-English.htm#sceKernelLoadExec">sceKernelLoadExec</a>() is next executed, to transition to the next application with the currently displayed frame buffer held as is. By holding the frame buffer as is, the black-out time can be shortened. In order to reboot with the frame buffer held as is, the frame buffer must be positioned at the beginning of the Graphics Engine eDRAM, and the width must be defined to be 512 pixels. <br><br>If frame buffer hold mode is selected, control moves on to the next application without deleting the contents of the first 1920KiB of the 2MiB in the Graphics Engine eDRAM. The last 128KiB of this 2MiB is always deleted.<br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplayGetVcount"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplayGetVcount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get number of VSYNCs<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplayGetVcount</b> (
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or -disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&gt;= 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of VSYNCs&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt; 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Error&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function returns the value in which each VSYNC during free running is counted. <br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplayIsVblank"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplayIsVblank<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Test VBLANK period<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplayIsVblank</b> (
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or -disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;1&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;VBLANK is active&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;VBLANK is not active&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function determines whether a VBLANK interval is in progress. <br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStart">sceDisplayWaitVblankStart</a>(), <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStartCB">sceDisplayWaitVblankStartCB</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplayWaitVblank"></a><a name="sceDisplayWaitVblankCB"></a>
<a name="sceDisplayWaitVblank / sceDisplayWaitVblankCB"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplayWaitVblank / sceDisplayWaitVblankCB<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Thread wait while VBLANK is not active<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplayWaitVblank</b> (
	void
);
int <b>sceDisplayWaitVblankCB</b> (
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Normal completion&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt; 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Error&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function places the thread into WAIT state until the VBLANK interval. <br><br>If a VBLANK interval is not in progress when the sceDisplayWaitVblank() or sceDisplayWaitVblankCB() function is called, the thread enters WAIT state. If a VBLANK interval is in progress, the function returns without doing anything. <br>With the sceDisplayWaitVblank() function, the thread manager callback is not executed during the WAIT. To perform callback processing during the WAIT, use the sceDisplayWaitVblankCB() function.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStart">sceDisplayWaitVblankStart</a>(), <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStartCB">sceDisplayWaitVblankStartCB</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplayWaitVblankStart"></a><a name="sceDisplayWaitVblankStartCB"></a>
<a name="sceDisplayWaitVblankStart / sceDisplayWaitVblankStartCB"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplayWaitVblankStart / sceDisplayWaitVblankStartCB<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Thread wait for start of VBLANK interval<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplayWaitVblankStart</b> (
	void
);
int <b>sceDisplayWaitVblankStartCB</b> (
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Normal completion&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt; 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Error&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function places the thread in WAIT state until the start of the next VBLANK interval. <br><br>Regardless of whether a VBLANK interval was in progress when the sceDisplayWaitVblankStart() or sceDisplayWaitVblankStartCB() function was called, the thread enters WAIT state until the start of the next VBLANK interval. <br><br>The sceDisplayWaitVblankStart() function does not execute a thread manager callback during a WAIT state. If you also want to perform callback processing during the WAIT state, use the sceDisplayWaitVblankStartCB() function.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblank">sceDisplayWaitVblank</a>(), <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankCB">sceDisplayWaitVblankCB</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplayWaitVblankStartMulti"></a><a name="sceDisplayWaitVblankStartMultiCB"></a>
<a name="sceDisplayWaitVblankStartMulti / sceDisplayWaitVblankStartMultiCB"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplayWaitVblankStartMulti / sceDisplayWaitVblankStartMultiCB<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Wait for start of multiple VBLANK intervals for each thread<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplayWaitVblankStartMulti</b> (
	int <i>iVcount</i>
);
int <b>sceDisplayWaitVblankStartMultiCB</b> (
	int <i>iVcount</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iVcount</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of VSYNC cycles to wait for&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Normal completion&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt; 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Error&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function places the thread in WAIT state until the start of the next VBLANK, after the specified number of VSYNCs has elapsed since the last time a VBLANK wait function was called.<br><br>The VBLANK wait functions <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblank">sceDisplayWaitVblank</a>() / <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankCB">sceDisplayWaitVblankCB</a>(), <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStart">sceDisplayWaitVblankStart</a>() / <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStartCB">sceDisplayWaitVblankStartCB</a>(), and sceDisplayWaitVblankStartMulti() / sceDisplayWaitVblankStartMultiCB() keep track of the number of VSYNCs that have occurred for each thread after the respective thread has returned from a wait state.<br>The sceDisplayWaitVblankStartMulti() / sceDisplayWaitVblankStartMultiCB() functions make the respective thread wait until the next VBLANK after the specified number of VSYNCs have elapsed as determined from the VSYNC count that was returned from the last VBLANK wait state, that was recorded for each thread.<br><br>For example, if the sceDisplayWaitVblankStartMulti() function is called with 2 specified for <i>iVcount</i>, and no VSYNCs have elapsed since the last call, the thread will wait until the start of the second VBLANK.<br>If one VSYNC has elapsed since the last call, the thread will wait until the start of the next VBLANK.<br>If two or more VSYNCs have elapsed since the last call, the thread will start at the next VBLANK. This enables the system to run at a fixed frame rate as long as no processing drop occurs.<br><br>The sceDisplayWaitVblankStartMulti() function does not execute a thread manager callback during a WAIT state. If you also want to perform callback processing during the WAIT state, use the sceDisplayWaitVblankStartMultiCB() function.<br><br>Use of the sceDisplayWaitVblankStartMulti() / sceDisplayWaitVblankStartMultiCB() functions is not recommended while a callback function is executing.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblank">sceDisplayWaitVblank</a>(), <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankCB">sceDisplayWaitVblankCB</a>(), <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStart">sceDisplayWaitVblankStart</a>(), <a href="../peripheral/Display-Reference-English.htm#sceDisplayWaitVblankStartCB">sceDisplayWaitVblankStartCB</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplaySetVblankCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplaySetVblankCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Register VBLANK interrupt callback function<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplaySetVblankCallback</b> (
	int <i>idx</i>
	void (*<i>cbFunc</i>)(int, void *),
	void *<i>cookie</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>idx</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Interrupt registration position (0 to 15)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbFunc</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback function starting address&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cookie</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Cookie value&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Normal completion&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Error&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the interrupt callback function to be called at the start of VBLANK. Up to 16 interrupt callback functions can be registered. An interrupt callback function is registered at the position specified by argument <i>idx</i>. Interrupt callback functions are called in ascending order of registered numbers.<br>To cancel an interrupt callback function, specify NULL for the argument <i>cbFunc</i>.<br>The cookie value is passed to <a href="../peripheral/Display-Reference-English.htm#vblankhandler">vblankhandler</a>() during the callback, and can be used mainly to determine the context. <br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#vblankhandler">vblankhandler</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="vblankhandler"></a>
<table width="100%"><td width="70%"><font size=6>vblankhandler<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>VBLANK interrupt callback function prototype<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>void <b>vblankhandler</b> (
	int <i>idx,</i>
	void *<i>cookie</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is called from an interrupt handler.<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>idx</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Interrupt callback registration position (0~15)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cookie</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Cookie value that was set when callback was registered&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a prototype declaration for the interrupt callback function to be called at the start of VBLANK.<br><br>The VBLANK interrupt callback function is called in an interrupt handler context.<br>16 interrupt handler functions are called in numerical order: 0, 1, 2, ..., 15.<br>The <i>cookie</i> argument is the value which is set when the <a href="../peripheral/Display-Reference-English.htm#sceDisplaySetVblankCallback">sceDisplaySetVblankCallback</a>() function is called. <br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplaySetVblankCallback">sceDisplaySetVblankCallback</a>()<br><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplayGetCurrentHcount"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplayGetCurrentHcount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get HSYNC count <br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplayGetCurrentHcount</b> (
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or -disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&gt;= 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;HSYNC count value&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt; 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Error&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function returns the HSYNC count value (horizontal line count) which is reset in 1V units during LCD display. Although the resolution of the LCD is 272 lines, there are actually 286 lines in 1V, including the VBLANK interval. Note that because of the timing of suspend/resume processing, phase changes may occur relative to VSYNC which will cause the length of 1V to momentarily vary from 286H.<br><br>This function should only be used for measuring process overhead. Polling should not be used for this purpose because that may introduce timing-dependent code if it is used improperly. <br>Note that the PSP&trade; displays output via a line buffer, so frame buffer data is read several horizontal lines ahead of what is actually displayed. As a result, modifying the contents of the frame buffer while the display is active is not recommended.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplayGetAccumulatedHcount">sceDisplayGetAccumulatedHcount</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceDisplayGetAccumulatedHcount"></a>
<table width="100%"><td width="70%"><font size=6>sceDisplayGetAccumulatedHcount<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get cumulative HSYNC count <br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;displaysvc.h&gt;
int <b>sceDisplayGetAccumulatedHcount</b> (
	void
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Can be called from an interrupt handler<br>Can be called from a thread (does not depend on interrupt-enabled or -disabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">None<br><br></div>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">When an error occurs, a negative value is returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Result</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&gt;= 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;HSYNC count value (0x0000000~0x7FFFFFFF)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;&lt; 0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Error&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function returns the cumulative HSYNC count, without resetting, in 1V units.<br><br>Since the return value when the function completes normally is a positive value, the value following 0x7FFFFFFF will be 0x00000000.<br>When using the difference in return values of the sceDisplayGetAccumulatedHcount() function to measure the elapsed time, mask off the low-order 31 bits.<br><br></div>
        <div style="margin-left:50px;"><pre><font size=3>	hstart = sceDisplayGetAccumulatedHcount();
		: (some processing)
	hend = sceDisplayGetAccumulatedHcount();
	hdiff = (hend - hstart) &amp; 0x7FFFFFFF;
</font></pre></div>
<div style="margin-left:50px;"><br>This function should only be used for measuring process overhead. Polling should not be used for this purpose because that may introduce timing-dependent code if it is used improperly.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/Display-Reference-English.htm#sceDisplayGetCurrentHcount">sceDisplayGetCurrentHcount</a>()<br><br></div>
<p><p><hr>
<div ALIGN="right">
    &copy;2008 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
