<html lang="en">
<head>
<title>UMD_Block-Reference</title>
<meta http-equiv="Content-Type" content= text/html; charset=iso-8859-1>
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Content-Style-Type" content="Text/css>
<meta name="Author"Content=" Sony Computer Entertainment Inc.">
</head>
<body bgcolor="#ffffff" text="#000000" >
<a name=TOP></a>
<table WIDTH="100%">
<tr><td>
<h3>PSP&trade; Programmer Tool Runtime Library Release 6.3.0</h3>
</td>
</tr>
</table>
<hr noshade size=6>
<center><h1>
UMD&trade; Block Device Driver Reference
</h1></center>
</a>
<!-- sce_hd1 -->
<div style="margin-left:50px;"><br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceUmdDiscInfo"></a>
<table width="100%"><td width="70%"><font size=6>SceUmdDiscInfo<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Disc information<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;umddisc.h&gt;
typedef struct {
	unsigned int <i>uiSize</i>;
	unsigned int <i>uiMediaType</i>;
} <b>SceUmdDiscInfo</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiSize</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(SceUmdDiscInfo)&nbsp;&nbsp;<br>&nbsp;&nbsp;(structure size)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>uiMediaType</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;UMD&trade; media type information&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a structure for storing UMD&trade; media disc information.<br><br>For the <i>uiSize</i> member, set the value of sizeof(SceUmdDiscInfo).<br>UMD&trade; media type information is set for the <i>uiMediaType</i> member.<br><br>UMD&trade; media type information is listed in the following table. A UMD&trade; may contain multiple sets of UMD&trade; media type information, and in that case, the information is returned as a logical OR of the individual sets of information.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Explanation</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_FMT_GAME&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Game title&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_FMT_AUDIO&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Music title&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_FMT_VIDEO&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Move title&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_FMT_CLEANER&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Cleaner&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_FMT_UNKNOWN&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unknown&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/UMD-Reference-English.htm#sceUmdGetDiscInfo">sceUmdGetDiscInfo</a>()<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceUmdReadAheadParam"></a>
<table width="100%"><td width="70%"><font size=6>SceUmdReadAheadParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Read ahead parameter<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;umddevctl.h&gt;
typedef struct {
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>iReserved0</i>;
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>iLBA</i>;
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>iReserved1</i>;
	<a href="../kernel/Types-Reference-English.htm#SceUInt32">SceUInt32</a> <i>iSectNum</i>;
}<b>SceUmdReadAheadParam</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iReserved0</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Reserved area 0&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iLBA</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Logical block address&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iReserved1</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Reserved area 1&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iSectNum</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of sectors&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This structure stores the read ahead starting position and extent.<br>It is used with the <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>*() functions as a configuration parameter of the SCE_UMD_READ_AHEAD and SCE_UMD_ACQ_READ_AHEAD commands.<br>These commands request that <i>iSectNum</i> sectors from <i>iLBA</i> be read ahead into the umdcache.<br>If <i>iSectNum</i> is less than 64 sectors, 64 sectors worth of data will be read ahead.<br>If <i>iLBA</i> + <i>iSectNum</i> extends beyond the last LBA, data will be read ahead through the last LBA.<br>For details about the umdcache and the read ahead function, refer to the UMD&trade; Cache Driver Overview.<br><br></div>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/UMD_Block-Reference-English.htm#sceIoDevctl">sceIoDevctl</a>(), <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(), <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoIoctlAsync">sceIoIoctlAsync</a>()<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="SceUmdSeekParam"></a>
<table width="100%"><td width="70%"><font size=6>SceUmdSeekParam<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Structure]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Seek configuration information<br></div><br>

<!-- Structure -->
<div style="margin-left:10px;"><b>Structure</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;umddevctl.h&gt;
typedef struct {
	SceOff <i>sk_off</i>;
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <i>sk_reserved;</i>
	<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a> <i>sk_whence;</i>
}<b>SceUmdSeekParam</b>;

</font></pre></div>

<!-- Members -->
<div style="margin-left:10px;"><b>Members</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sk_off</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;File offset (sectors)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sk_reserved</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Padding (unused)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>sk_whence</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Movement method&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a structure for storing file seek information.<br><br>It is used as the configuration parameters of the SCE_UMD_SEEK_FILE command of an <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>*() function.<br>The value that is set in the <i>sk_off</i> member for a block device is in units of sectors.<br>The following table lists the values that are used for the <i>sk_whence</i> member.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Explanation</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SEEK_SET&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The <i>sk_off</i> member is the distance from the beginning of the file.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SEEK_CUR&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The <i>sk_off </i>member is the relative distance from the current offset.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_SEEK_END&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;The <i>sk_off</i> member is the distance from the end of the file.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- See Also -->
<div style="margin-left:10px;"><b>See Also</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><a href="../peripheral/UMD_Block-Reference-English.htm#sceIoIoctlAsync">sceIoIoctlAsync</a>(), <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoIoctl">sceIoIoctl</a>(), <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoLseek">sceIoLseek</a>()<br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoOpen"></a>
<table width="100%"><td width="70%"><font size=6>sceIoOpen<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Open device<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
SceUID <b>sceIoOpen</b> (
	const char <i>*blkdevname</i>,
	int <i>flag</i>,
	SceMode <i>mode</i>
);
</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>blkdevname</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;umdXXXX:&nbsp;&nbsp;<br>&nbsp;&nbsp;XXXX is the unit number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>flag</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Only read only can be specified&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unused&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, the file descriptor value is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function opens a UMD&trade; block device file.<br><br>No filename is required when the UMD&trade; block device is used as an ISO9660 filesystem.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoClose"></a>
<table width="100%"><td width="70%"><font size=6>sceIoClose<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Close device<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
SceUID <b>sceIoClose</b> (
	SceUID <i>fd</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device descriptor&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, <a href="../peripheral/UMD_Block-Reference-English.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a> is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs processing for closing the device file.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoRead"></a>
<table width="100%"><td width="70%"><font size=6>sceIoRead<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Read sector data<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
SceSSize <b>sceIoRead</b> (
	SceUID <i>fd</i>, 
	void *<i>buf</i>, 
	SceSize <i>nsect</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device descriptor&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Read buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nsect</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size to be read (in terms of sectors)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, the number of sectors that were read (nsect &gt;= 0) is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function reads data from an open device.<br><br>The buffer address that is set for <i>buf</i>, must have word (4 bytes) alignment.<br>When the return value is a positive integer less than the <i>nsect</i> argument, it indicates that data of the indicated size was read. <br>When a value less than the <i>nsect</i> argument is returned, the end of the device data was reached.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoLseek"></a>
<table width="100%"><td width="70%"><font size=6>sceIoLseek<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Move device file offset<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
SceOff <b>sceIoLseek</b> (
	SceUID <i>fd</i>, 
	SceOff <i>offset</i>,
	int <i>whence</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device descriptor&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>offset</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of sectors from reference point&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>whence</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Reference point&nbsp;&nbsp;<br>&nbsp;&nbsp;* For details, refer to the IO/File Mgr document.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, the new device file offset value is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a function for moving the specified device file offset.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoOpenAsync"></a>
<table width="100%"><td width="70%"><font size=6>sceIoOpenAsync<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Open device file asynchronously<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
SceUID <b>sceIoOpenAsync</b> (
	const char *<i>devname</i>
	int <i>flag</i>,
	SceMode <i>mode</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>devname</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device file name&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>flag</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Read only, etc., can be specified&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>mode</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unused&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, the device descriptor value is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs processing for asynchronously opening a device file.<br><br>Currently, the number of device files that can be open simultaneously is 8.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoCloseAsync"></a>
<table width="100%"><td width="70%"><font size=6>sceIoCloseAsync<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Close device file asynchronously<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
SceUID <b>sceIoCloseAsync</b> (
	SceUID <i>fd</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device descriptor&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, <a href="../peripheral/UMD_Block-Reference-English.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a> is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function performs processing for asynchronously closing a device.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoReadAsync"></a>
<table width="100%"><td width="70%"><font size=6>sceIoReadAsync<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Read data asynchronously<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
SceSSize <b>sceIoReadAsync</b> (
	SceUID <i>fd</i>,
	void *<i>buf</i>,
	SceSize <i>nsect</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device descriptor&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buf</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Read buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>nsect</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Size to be read (in terms of sectors)&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, <a href="../peripheral/UMD_Block-Reference-English.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a> is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a function for asynchronously reading data from a device file.<br><br>The buffer address that is set for <i>buf</i>, must have word (4 bytes) alignment.<br>The sector size that was read can be verified by using the <i>iores</i> argument of the sceIoWaitAsyncXX() function and the <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoPollAsync">sceIoPollAsync</a>() function.<br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoLseekAsync"></a>
<table width="100%"><td width="70%"><font size=6>sceIoLseekAsync<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Move device file offset asynchronously<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
SceOff <b>sceIoLseekAsync</b> (
	SceUID<i> fd</i>,
	SceOff <i>offset</i>,
	int <i>whence</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device descriptor&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>offset</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of sectors from reference point&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>whence</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Reference point&nbsp;&nbsp;<br>&nbsp;&nbsp;* For details, refer to the IO/File Mgr document.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, <a href="../peripheral/UMD_Block-Reference-English.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a> is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a function for asynchronously moving the offset of the specified device file.<br><br>The offset is moved in terms of sectors.<br>The result of the seek processing can be verified by using the <i>iores</i> argument of the sceIoWaitAsyncXX() function and the <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoPollAsync">sceIoPollAsync</a>() function.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoSetAsyncCallback"></a>
<table width="100%"><td width="70%"><font size=6>sceIoSetAsyncCallback<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Set asynchronous processing notification callback<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
int <b>sceIoSetAsyncCallback</b>(
	SceUID <i>fd</i>,
	SceUID<i> cbid,</i>
	int <i>arg</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device descriptor&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cbid</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Callback ID&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arg</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Arguments passed to callback function&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, <a href="../peripheral/UMD_Block-Reference-English.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a> is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This function sets the thread manager callback ID to be notified when asynchronous file I/O processing is completed.<br><br>The callback must be created in advance by using the <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelCreateCallback">sceKernelCreateCallback</a>() function. When asynchronous I/O processing is completed, the <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelNotifyCallback">sceKernelNotifyCallback</a>() function is used to send a notification for the specified callback ID. Later, the thread that set the callback uses the <a href="../kernel/Thread_Manager-Reference-English.htm#sceKernelCheckCallback">sceKernelCheckCallback</a>() function to check whether or not a notification exists or a wait API with a callback call such as one of the sceXXXXCB() functions is executed to call the callback function that was set when the callback was created.<br>To complete asynchronous I/O processing, a function such as <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoPollAsync">sceIoPollAsync</a>() or <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoWaitAsync">sceIoWaitAsync</a>() must be executed during the callback function that was called to obtain the execution result of the file I/O processing.<br><br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoPollAsync"></a><a name="sceIoWaitAsync"></a><a name="sceIoWaitAsyncCB"></a>
<a name="sceIoPollAsync / sceIoWaitAsync / sceIoWaitAsyncCB"></a>
<table width="100%"><td width="70%"><font size=6>sceIoPollAsync / sceIoWaitAsync / sceIoWaitAsyncCB<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get asynchronous processing status<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
int <b>sceIoPollAsync</b>(
	SceUID <i>fd</i>,
	SceIores *<i>iores</i>
);
int <b>sceIoWaitAsync</b>(
	SceUID <i>fd</i>,
	SceIores *<i>iores</i>
);
int <b>sceIoWaitAsyncCB</b>(
	SceUID <i>fd</i>,
	SceIores *<i>iores</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device descriptor&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>iores</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Status&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If asynchronous processing has ended, 0 is returned. <br>If asynchronous processing is in progress, 1 is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">These functions get the status of asynchronous I/O processing.<br><br>The sceIoWaitAsync() function waits until asynchronous I/O processing is completed and returns 0 for the return value after storing the asynchronous I/O processing result in the <i>iores </i>argument.<br><br>The sceIoWaitAsyncCB() function checks for the existence of a callback notification while the sceIoWaitAsync() function is running.<br><br>The sceIoPollAsync() function returns to processing immediately from the sceIoWaitAsync() function without entering a wait state if asynchronous I/O processing is not completed. If asynchronous processing is not completed, it returns 1 for the return value. In this case, the value of the <i>iores</i> argument does not change.<br><br>When an asynchronous I/O function is executed, the above functions should be used to verify the processing status.<br>When the above functions return 0, the <i>iores</i> argument is set with the return value of the synchronous I/O function that corresponds to the asynchronous I/O function that completed execution.<br>If the relevant asynchronous I/O function is <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoOpenAsync">sceIoOpenAsync</a>(), <i>iores</i> will be set with the file descriptor, which is the return value of <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoOpen">sceIoOpen</a>(). If the asynchronous I/O function is <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoReadAsync">sceIoReadAsync</a>(), <i>iores</i> will be set with the read size, which is the return value of <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoRead">sceIoRead</a>().<br>For details, refer to the descriptions of the synchronous functions that correspond to each of the asynchronous I/O functions.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoIoctl"></a>
<table width="100%"><td width="70%"><font size=6>sceIoIoctl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get data normally excluded from I/O processing<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
#include &lt;umddevctl.h&gt;
#include &lt;umd_ioctl.h&gt;
int <b>sceIoIoctl</b>(
	SceUID <i>fd</i>,
	int <i>cmd</i>,
	const void *<i>argp</i>,
	SceSize <i>arglen</i>,
	void *<i>bufp</i>,
	SceSize <i>buflen</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device descriptor&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cmd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Command code&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Command parameter&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Command parameter size&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Data buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Data buffer size&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, <a href="../peripheral/UMD_Block-Reference-English.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a> is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a device file control function that is normally used for getting and setting data that is excluded from I/O processing.<br>The following commands can be used.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Command</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Explanation</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_GET_FILEPOINTER&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Get current device offset position.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_SEEK_FILE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Seek processing. Details are given later.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_UNCACHED_READ&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Forced disc access read.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">The options of each command are as follows.<br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Command</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Parameter</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Parameter size</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Buffer Direction and Size</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_GET_FILEPOINTER&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;out&nbsp;&nbsp;<br>&nbsp;&nbsp; 4bytes&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_SEEK_FILE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/UMD_Block-Reference-English.htm#SceUmdSeekParam">SceUmdSeekParam</a>*&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(<a href="../peripheral/UMD_Block-Reference-English.htm#SceUmdSeekParam">SceUmdSeekParam</a> *)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Null&nbsp;&nbsp;<br>&nbsp;&nbsp; 0 bytes&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_UNCACHED_READ&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Number of read sectors&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Int&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;out&nbsp;&nbsp;<br>&nbsp;&nbsp; Number of read sectors&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- sce_title -->
<a Name ="HeadingT_2_1">
<div style="margin-left:40px;"><h4><b>SCE_UMD_GET_FILEPOINTER</b><br><br></h4></div></a>

<div style="margin-left:50px;">This command gets the current device offset value.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_2">
<div style="margin-left:40px;"><h4><b>SCE_UMD_SEEK_FILE</b><br><br></h4></div></a>

<div style="margin-left:50px;">In addition to performing offset move processing for the <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoLseek">sceIoLseek</a>() function, this command also performs physical seek control for the optical head.<br>The required seek parameter should be set for the command parameter.<br>The device offset is set in terms of sectors.<br>A physical seek accompanying optical head control seeks the following LBA.<br><br><b>Seek position (LBA) = LBA of current device offset + offset value</b><br><br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_3">
<div style="margin-left:40px;"><h4><b>SCE_UMD_UNCACHED_READ</b><br><br></h4></div></a>

<div style="margin-left:50px;">This command causes data always to be read from disc without using the UMD&trade;/DVD cache function. This command should be used carefully since the reading speed drops compared with when the cache is used. Since data is always read from the disc, when this command is successful, the power status of the drive transitions to active.<br>In a similar manner as for <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoRead">sceIoRead</a>(), the number of read sectors (greater than or equal to zero) is returned for the return value when this command is successful.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoIoctlAsync"></a>
<table width="100%"><td width="70%"><font size=6>sceIoIoctlAsync<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get data by asynchronous processing other than normal I/O processing<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
#include &lt;umddevctl.h&gt;
#include &lt;umd_ioctl.h&gt;
int <b>sceIoIoctlAsync</b>(
	SceUID <i>fd</i>,
	int <i>cmd</i>,
	const void *<i>argp</i>,
	SceSize <i>arglen</i>,
	void *<i>bufp</i>,
	SceSize <i>buflen</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>fd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device descriptor&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cmd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Command code&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Command parameter&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Command parameter size&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Data buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Data buffer size&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, <a href="../peripheral/UMD_Block-Reference-English.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a> is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a function for asynchronously performing the filesystem control function normally used for getting and setting data that is excluded from I/O processing.<br><br>The processing result can be verified by using the <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoWaitAsync">sceIoWaitAsync</a>() function, <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoWaitAsyncCB">sceIoWaitAsyncCB</a>() function, and <a href="../peripheral/UMD_Block-Reference-English.htm#sceIoPollAsync">sceIoPollAsync</a>() function.<br><br></div>
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="sceIoDevctl"></a>
<table width="100%"><td width="70%"><font size=6>sceIoDevctl<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Function]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>Get and set device-specific data<br></div><br>

<!-- Syntax -->
<div style="margin-left:10px;"><b>Syntax</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;"><pre><font size=3>#include &lt;iofilemgr.h&gt;
#include &lt;umddevctl.h&gt;
int <b>sceIoDevctl</b>(
	const char *<i>devname,</i>
	int <i>cmd</i>,
	const void <i>*argp</i>,
	SceSize <i>arglen</i>,
	void <i>*bufp</i>,
	SceSize <i>buflen</i>
);

</font></pre></div>

<!-- Calling Conditions -->
<div style="margin-left:10px;"><b>Calling Conditions</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">Cannot be called from an interrupt handler<br>Can be called from a thread (must be called in an interrupt-enabled state)<br>Multithread safe<br><br></div>

<!-- Arguments -->
<div style="margin-left:10px;"><b>Arguments</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">
<table border=0>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>devname</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;umdXXXX:&nbsp;&nbsp;<br>&nbsp;&nbsp;XXXX is the unit number&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>cmd</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Command code&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>argp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Command parameter&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>arglen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Command parameter size&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>bufp</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Data buffer&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<i>buflen</i>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Data buffer size&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>

<!-- Return Value -->
<div style="margin-left:10px;"><b>Return Value</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">If processing is successful, <a href="../peripheral/UMD_Block-Reference-English.htm#SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a> is returned.<br>If an error occurs, a negative value is returned.<br><br></div>

<!-- Description -->
<div style="margin-left:10px;"><b>Description</b></div>
<hr noshade align="left" size=2 width=20%>
<br>
<div style="margin-left:50px;">This is a device control function normally used to get and set data that is excluded from I/O processing.<br>Currently, the following command can be used.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Explanation</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_GET_MEDIATYPE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Get UMD&trade; media type.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_GET_LASTLBA&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Get last LBA.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_ACTIVATE_DRIVE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Activate UMD&trade; drive.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_SEEK _DISC&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Seek to specified LBA.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_READ_AHEAD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Request read ahead&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_ACQ_READ_AHEAD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Issue a read ahead request that is statusable.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_WAIT_READ_AHEAD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Wait for read ahead status to become FINISH.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_POLL_READ_AHEAD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Get read ahead status.&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_CANCEL_STAT_READ_AHEAD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Cancel waiting for read ahead status to become FINISH.&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Command</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Parameter</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Parameter size</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Buffer Direction and Size</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_GET_MEDIATYPE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;out&nbsp;&nbsp;<br>&nbsp;&nbsp;sizeof(<a href="../peripheral/UMD_Block-Reference-English.htm#SceUmdDiscInfo">SceUmdDiscInfo</a>)&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_GET_LASTLBA&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;out&nbsp;&nbsp;<br>&nbsp;&nbsp; 4 bytes&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_ACTIVATE_DRIVE&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;<br>&nbsp;&nbsp; 0 bytes&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_SEEK_DISC&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;unsigned int&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(unsigned int *)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;<br>&nbsp;&nbsp; 0 bytes&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_READ_AHEAD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/UMD_Block-Reference-English.htm#SceUmdReadAheadParam">SceUmdReadAheadParam</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(<a href="../peripheral/UMD_Block-Reference-English.htm#SceUmdReadAheadParam">SceUmdReadAheadParam</a>)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;<br>&nbsp;&nbsp; 0bytes&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_ACQ_READ_AHEAD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../peripheral/UMD_Block-Reference-English.htm#SceUmdReadAheadParam">SceUmdReadAheadParam</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(<a href="../peripheral/UMD_Block-Reference-English.htm#SceUmdReadAheadParam">SceUmdReadAheadParam</a>)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;out&nbsp;&nbsp;<br>&nbsp;&nbsp; 4bytes&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_WAIT_READ_AHEAD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a>)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;<br>&nbsp;&nbsp; 0bytes&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_POLL_READ_AHEAD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a>)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;<br>&nbsp;&nbsp; 0bytes&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_CANCEL_STAT_READ_AHEAD&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;sizeof(<a href="../kernel/Types-Reference-English.htm#SceInt32">SceInt32</a>)&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;NULL&nbsp;&nbsp;<br>&nbsp;&nbsp; 0bytes&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- sce_title -->
<a Name ="HeadingT_2_4">
<div style="margin-left:40px;"><h4><b>Concerning SCE_UMD_GET _MEDIATYPE</b><br><br></h4></div></a>

<div style="margin-left:50px;">The following media types can be obtained by this command.<br>A UMD&trade; can contain multiple media types.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Media Type</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Contents</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_FMT_GAME&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Game title&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_FMT_AUDIO&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Music title&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_FMT_VIDEO&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Movie title&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_FMT_CLEANER&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Cleaner&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;SCE_UMD_FMT_UNKNOWN&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unknown&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>

<!-- sce_title -->
<a Name ="HeadingT_2_5">
<div style="margin-left:40px;"><h4><b>SCE_UMD_GET _LASTLBA</b><br><br></h4></div></a>

<div style="margin-left:50px;">This command gets the last LBA that was allocated on the disc.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_6">
<div style="margin-left:40px;"><h4><b>SCE_UMD_ACTIVATE_DRIVE</b><br><br></h4></div></a>

<div style="margin-left:50px;">This command activates the drive.<br>It differs from the processing that is performed by <a href="../peripheral/UMD-Reference-English.htm#sceUmdActivate">sceUmdActivate</a>().<br>Although this command causes the drive status to transition to READY, it does not initialize the filesystem.<br>As a result, even if this command is executed, the drive status does not transition to READABLE.<br>Also, the power supply state of the drive does not become active.<br>This command was provided at a time when the specifications had not been decided for titles that do not use the filesystem.<br>Currently, since the filesystem must be used to start up from a UMD&trade;, the use of this command in a title is meaningless.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_7">
<div style="margin-left:40px;"><h4><b>SCE_UMD_SEEK _DISC</b><br><br></h4></div></a>

<div style="margin-left:50px;">The optical head is moved to the specified LBA.<br>The specified LBA should be set for the command parameter.<br>(*) Note that the device offset in memory does not change.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_8">
<div style="margin-left:40px;"><h4><b>SCE_UMD_READ_AHEAD and SCD_UMD_ACQ_READ_AHEAD</b><br><br></h4></div></a>

<div style="margin-left:50px;">These commands request that the specified number of sectors starting from the specified LBA be read ahead into the umdcache.<br>If the specified number of sectors is less than 64, 64 sectors worth of data will be cached.<br>If the specified size is greater than 6.4MB, the data will not be cached.<br><br>The SCE_UMD_ACQ_READ_AHEAD command enables the status of the requested read ahead to be checked. If the request is successful, an index value that can be used to check the status is set in the buffer.<br><br>The index can be specified with a command for checking the status of the read ahead, or it can be specified with commands such as SCE_UMD_WAIT_READ_AHEAD or SCE_UMD_POLL_READ_AHEAD for obtaining the read ahead status. The index that is set in the buffer is always a positive value greater than or equal to 1.<br>If the UMD&trade;/DVD is not being read by any other thread, read ahead processing will be started immediately. However, if a read ahead is performed during streaming, the read ahead will be interrupted.<br>Note that other read operations are blocked during read ahead processing.<br>For information about the read ahead function, refer to the &quot;UMD&trade; Cache Overview&quot;.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_9">
<div style="margin-left:40px;"><h4><b>SCE_UMD_WAIT_READ_AHEAD</b><br><br></h4></div></a>

<div style="margin-left:50px;">Executing this command places the calling thread in a wait state until the status of the read ahead specified by the command parameter becomes FINISH.<br>The index value that was returned by the SCE_UMD_ACQ_READ_AHEAD command should be specified as the command parameter. If any other value is specified, then the status of the read ahead is considered to already be FINISH, and the function will return immediately without reporting an error and without the thread being placed in a wait state.<br>If the wait state set by this command is canceled by issuing the SCE_UMD_CANCEL_STAT_READ_AHEAD command, the function will return an SCE_KERNEL_ERROR_WAIT_CANCEL error.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_10">
<div style="margin-left:40px;"><h4><b>SCE_UMD_POLL_READ_AHEAD</b><br><br></h4></div></a>

<div style="margin-left:50px;">This command gets the status of the read ahead specified by the command parameter. One of the following values can be returned.<br><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value </b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Meaning</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Read ahead has finished&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x20&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Read ahead is executing&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;0x10&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Read ahead is waiting&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<br>
<div style="margin-left:50px;">The index value that was returned by the SCE_UMD_ACQ_READ_AHEAD command should be specified as the command parameter. If any other value is specified, then the status of the read ahead is considered to already be FINISH, and the function will return 0 without reporting an error.<br></div>

<!-- sce_title -->
<a Name ="HeadingT_2_11">
<div style="margin-left:40px;"><h4><b>SCE_UMD_CANCEL_STAT_READ_AHEAD</b><br><br></h4></div></a>

<div style="margin-left:50px;">This command wakes up the thread that was placed in a wait state by the SCE_UMD_WAIT_READ_AHEAD command until the read ahead status becomes FINISH.<br>This command does not cancel the read ahead itself.<br><br>For details about caching, refer to the "UMD&trade; Cache Overview."<br></div>

<!-- sce_hd2 -->
<!-- sce_funcname -->
<hr noshade Size=6 >
<a name="List of Error Codes"></a>
<table width="100%"><td width="70%"><font size=6>List of Error Codes<br></font></a></td>
<td width="30%"valign="center"align="right"><b><font size=4>[Error Codes]</font></b></td></table>
<hr noshade Size=4 >
<!-- sce_function -->
<!-- hp -->
<div align=right>UMD&trade; Error Codes<br></div><br>
<div style="margin-left:50px;"><br></div>
<div style="margin-left:50px;">
<table border=1>
<tr>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Macro</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Value</b>&nbsp;&nbsp;</td>
<td valign="TOP" bgcolor="#cccccc">&nbsp;&nbsp;<b>Explanation</b>&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_KERNEL_ERROR_OK">SCE_KERNEL_ERROR_OK</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x0&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Normal termination&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_ENOENT">SCE_ERROR_ERRNO_ENOENT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80010002&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;File does not exist&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_EIO">SCE_ERROR_ERRNO_EIO</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80010005&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Input/output error&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_EBADF">SCE_ERROR_ERRNO_EBADF</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80010009&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Descriptor is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_ENOMEM">SCE_ERROR_ERRNO_ENOMEM</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8001000C&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Required memory cannot be allocated&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_EFAULT">SCE_ERROR_ERRNO_EFAULT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8001000E&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_ENODEV">SCE_ERROR_ERRNO_ENODEV</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80010013&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device does not exist&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_EINVAL">SCE_ERROR_ERRNO_EINVAL</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80010016&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Argument is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_EMFILE">SCE_ERROR_ERRNO_EMFILE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80010018&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Too many opened files&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_EFBIG">SCE_ERROR_ERRNO_EFBIG</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8001001B&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;File is too large&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_ENOBUFS">SCE_ERROR_ERRNO_ENOBUFS</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80010069&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Buffer does not exist&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_ETIMEDOUT">SCE_ERROR_ERRNO_ETIMEDOUT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8001006E&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Timeout occurred&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_ENOMEDIUM">SCE_ERROR_ERRNO_ENOMEDIUM</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8001007B&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Media not found&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_EMEDIUMTYPE">SCE_ERROR_ERRNO_EMEDIUMTYPE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8001007C&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Illegal medium&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_ENOTSUP">SCE_ERROR_ERRNO_ENOTSUP</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8001B000&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unsupported function&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_NOMAIN_ADDR">SCE_ERROR_ERRNO_NOMAIN_ADDR</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8001B001&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Address not in main memory was specified&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_EUNIT">SCE_ERROR_ERRNO_EUNIT</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8001B002&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unit number is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_EFSIZE">SCE_ERROR_ERRNO_EFSIZE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8001B003&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;File size is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_ERROR_ERRNO_EFLAG">SCE_ERROR_ERRNO_EFLAG</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x8001B004&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Specified flag is invalid&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_UMD_NOT_DEVICE_READY">SCE_UMD_NOT_DEVICE_READY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80210001&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Device is not ready&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_UMD_LBA_OUTOFRANGE">SCE_UMD_LBA_OUTOFRANGE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80210002&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Access was beyond the last LBA&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_UMD_HARDWARE_FAILURE">SCE_UMD_HARDWARE_FAILURE</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0xC0210005&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;A problem occurred in the drive&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_UMD_NO_MEDIUM">SCE_UMD_NO_MEDIUM</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80210003&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;No medium exists&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_UMD_UNKNOWN_MEDIUM">SCE_UMD_UNKNOWN_MEDIUM</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0xC0210004&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Unknown medium&nbsp;&nbsp;</td>
</tr>
<tr>
<td valign="TOP">&nbsp;&nbsp;<a name="SCE_UMD_READAHEAD_BUSY">SCE_UMD_READAHEAD_BUSY</a>&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;0x80210011&nbsp;&nbsp;</td>
<td valign="TOP">&nbsp;&nbsp;Read ahead request is being executed&nbsp;&nbsp;</td>
</tr>
</table>
</div>
<br>
<p><p><hr>
<div ALIGN="right">
    &copy;2009 Sony Computer Entertainment Inc.  All Rights Reserved.<br>
    SCE CONFIDENTIAL
</div>
</body>
</html>
